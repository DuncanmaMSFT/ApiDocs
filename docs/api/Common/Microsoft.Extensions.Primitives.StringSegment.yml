### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Primitives.StringSegment
  commentId: T:Microsoft.Extensions.Primitives.StringSegment
  id: StringSegment
  parent: Microsoft.Extensions.Primitives
  children:
  - Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  - Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Buffer
  - Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  - Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  - Microsoft.Extensions.Primitives.StringSegment.HasValue
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Length
  - Microsoft.Extensions.Primitives.StringSegment.Offset
  - Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  - Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)
  - Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  - Microsoft.Extensions.Primitives.StringSegment.ToString
  - Microsoft.Extensions.Primitives.StringSegment.Trim
  - Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  - Microsoft.Extensions.Primitives.StringSegment.TrimStart
  - Microsoft.Extensions.Primitives.StringSegment.Value
  langs:
  - csharp
  - vb
  name: StringSegment
  nameWithType: StringSegment
  fullName: Microsoft.Extensions.Primitives.StringSegment
  type: Struct
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: StringSegment
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nAn optimized representation of a substring.\n"
  example: []
  syntax:
    content: 'public struct StringSegment : IEquatable<StringSegment>, IEquatable<string>'
    content.vb: >-
      Public Structure StringSegment
          Implements IEquatable(Of StringSegment), IEquatable(Of String)
  implements:
  - System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  - System.IEquatable{System.String}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StringSegment(String)
  nameWithType: StringSegment.StringSegment(String)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StringSegment(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nInitializes an instance of the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public StringSegment(string buffer)
    content.vb: Public Sub New(buffer As String)
    parameters:
    - id: buffer
      type: System.String
      description: "\nThe original <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> includes the whole <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StringSegment(String, Int32, Int32)
  nameWithType: StringSegment.StringSegment(String, Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StringSegment(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nInitializes an instance of the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public StringSegment(string buffer, int offset, int length)
    content.vb: Public Sub New(buffer As String, offset As Integer, length As Integer)
    parameters:
    - id: buffer
      type: System.String
      description: The original <xref href="System.String" data-throw-if-not-resolved="false"></xref> used as buffer.
    - id: offset
      type: System.Int32
      description: The offset of the segment within the <em>buffer</em>.
    - id: length
      type: System.Int32
      description: The length of the segment.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Buffer
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Buffer
  id: Buffer
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: StringSegment.Buffer
  fullName: Microsoft.Extensions.Primitives.StringSegment.Buffer
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Buffer
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 62
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> buffer for this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Offset
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Offset
  id: Offset
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: StringSegment.Offset
  fullName: Microsoft.Extensions.Primitives.StringSegment.Offset
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Offset
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the offset within the buffer for this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Length
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Length
  id: Length
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: StringSegment.Length
  fullName: Microsoft.Extensions.Primitives.StringSegment.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Length
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 72
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the length of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Value
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.Value
  id: Value
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: StringSegment.Value
  fullName: Microsoft.Extensions.Primitives.StringSegment.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Value
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 77
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the value of this segment as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.HasValue
  commentId: P:Microsoft.Extensions.Primitives.StringSegment.HasValue
  id: HasValue
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: StringSegment.HasValue
  fullName: Microsoft.Extensions.Primitives.StringSegment.HasValue
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: HasValue
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 95
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets whether or not this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> contains a valid value.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: StringSegment.Equals(Object)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 101
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  id: Equals(Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(StringSegment)
  nameWithType: StringSegment.Equals(StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 116
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(StringSegment other)
    content.vb: Public Function Equals(other As StringSegment) As Boolean
    parameters:
    - id: other
      type: Microsoft.Extensions.Primitives.StringSegment
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the current object is equal to the other parameter; otherwise, <pre><code>false</code></pre>.
  implements:
  - System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}.Equals(Microsoft.Extensions.Primitives.StringSegment)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
  id: Equals(Microsoft.Extensions.Primitives.StringSegment,System.StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(StringSegment, StringComparison)
  nameWithType: StringSegment.Equals(StringSegment, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(Microsoft.Extensions.Primitives.StringSegment, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 128
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nIndicates whether the current object is equal to another object of the same type.\n"
  example: []
  syntax:
    content: public bool Equals(StringSegment other, StringComparison comparisonType)
    content.vb: Public Function Equals(other As StringSegment, comparisonType As StringComparison) As Boolean
    parameters:
    - id: other
      type: Microsoft.Extensions.Primitives.StringSegment
      description: An object to compare with this object.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the current object is equal to the other parameter; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  id: Equals(System.String)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(String)
  nameWithType: StringSegment.Equals(String)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 144
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(string text)
    content.vb: Public Function Equals(text As String) As Boolean
    parameters:
    - id: text
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to compare with the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref> is equal to the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
  implements:
  - System.IEquatable{System.String}.Equals(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Equals(System.String,System.StringComparison)
  id: Equals(System.String,System.StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equals(String, StringComparison)
  nameWithType: StringSegment.Equals(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equals(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 155
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(string text, StringComparison comparisonType)
    content.vb: Public Function Equals(text As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: text
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to compare with the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the specified <xref href="System.String" data-throw-if-not-resolved="false"></xref> is equal to the current <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.GetHashCode
  id: GetHashCode
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: StringSegment.GetHashCode()
  fullName: Microsoft.Extensions.Primitives.StringSegment.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: GetHashCode
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 172
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  id: op_Equality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Equality(StringSegment, StringSegment)
  nameWithType: StringSegment.Equality(StringSegment, StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Equality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 187
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if two specified <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> have the same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(StringSegment left, StringSegment right)
    content.vb: Public Shared Operator =(left As StringSegment, right As StringSegment) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The first <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    - id: right
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The second <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the value of <em>left</em> is the same as the value of <em>right</em>; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  id: op_Inequality(Microsoft.Extensions.Primitives.StringSegment,Microsoft.Extensions.Primitives.StringSegment)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Inequality(StringSegment, StringSegment)
  nameWithType: StringSegment.Inequality(StringSegment, StringSegment)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Inequality(Microsoft.Extensions.Primitives.StringSegment, Microsoft.Extensions.Primitives.StringSegment)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 198
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if two specified <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringSegment left, StringSegment right)
    content.vb: Public Shared Operator <>(left As StringSegment, right As StringSegment) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The first <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    - id: right
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The second <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> to compare, or <pre><code>null</code></pre>.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if the value of <em>left</em> is different from the value of <em>right</em>; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String,System.StringComparison)
  id: StartsWith(System.String,System.StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: StartsWith(String, StringComparison)
  nameWithType: StringSegment.StartsWith(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.StartsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: StartsWith
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 209
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the beginning of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> matches the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> when compared using the specified <em>comparisonType</em>.\n"
  example: []
  syntax:
    content: public bool StartsWith(string text, StringComparison comparisonType)
    content.vb: Public Function StartsWith(text As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: text
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref>to compare.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if <em>text</em> matches the beginning of this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String,System.StringComparison)
  id: EndsWith(System.String,System.StringComparison)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: EndsWith(String, StringComparison)
  nameWithType: StringSegment.EndsWith(String, StringComparison)
  fullName: Microsoft.Extensions.Primitives.StringSegment.EndsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: EndsWith
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 231
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nChecks if the end of this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> matches the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> when compared using the specified <em>comparisonType</em>.\n"
  example: []
  syntax:
    content: public bool EndsWith(string text, StringComparison comparisonType)
    content.vb: Public Function EndsWith(text As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: text
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref>to compare.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that specifies the rules to use in the comparison.
    return:
      type: System.Boolean
      description: >-
        <pre>

        <code>true</code>

        </pre> if <em>text</em> matches the end of this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>; otherwise, <pre><code>false</code></pre>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32,System.Int32)
  id: Substring(System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Substring(Int32, Int32)
  nameWithType: StringSegment.Substring(Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Substring(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Substring
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 254
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRetrieves a substring from this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe substring starts at the position specified by <em>offset</em> and has the specified <em>length</em>.\n"
  example: []
  syntax:
    content: public string Substring(int offset, int length)
    content.vb: Public Function Substring(offset As Integer, length As Integer) As String
    parameters:
    - id: offset
      type: System.Int32
      description: The zero-based starting character position of a substring in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that is equivalent to the substring of length <em>length</em> that begins at <em>offset</em> in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32,System.Int32)
  id: Subsegment(System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Subsegment(Int32, Int32)
  nameWithType: StringSegment.Subsegment(Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.Subsegment(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Subsegment
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 281
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRetrieves a <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> that represents a substring from this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> starts at the position specified by <em>offset</em> and has the specified <em>length</em>.\n"
  example: []
  syntax:
    content: public StringSegment Subsegment(int offset, int length)
    content.vb: Public Function Subsegment(offset As Integer, length As Integer) As StringSegment
    parameters:
    - id: offset
      type: System.Int32
      description: The zero-based starting character position of a substring in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: A <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> that is equivalent to the substring of length <em>length</em> that begins at <em>offset</em> in this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32,System.Int32)
  id: IndexOf(System.Char,System.Int32,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32, Int32)
  nameWithType: StringSegment.IndexOf(Char, Int32, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 309
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <em>c</em> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe search starts at <em>start</em> and examines a specified number of <em>count</em> character positions.\n"
  example: []
  syntax:
    content: public int IndexOf(char c, int start, int count)
    content.vb: Public Function IndexOf(c As Char, start As Integer, count As Integer) As Integer
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    - id: start
      type: System.Int32
      description: 'The zero-based index position at which the search starts. '
    - id: count
      type: System.Int32
      description: The number of characters to examine.
    return:
      type: System.Int32
      description: The zero-based index position of <em>c</em> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char,System.Int32)
  id: IndexOf(System.Char,System.Int32)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32)
  nameWithType: StringSegment.IndexOf(Char, Int32)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 338
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <em>c</em> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\nThe search starts at <em>start</em>.\n"
  example: []
  syntax:
    content: public int IndexOf(char c, int start)
    content.vb: Public Function IndexOf(c As Char, start As Integer) As Integer
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    - id: start
      type: System.Int32
      description: 'The zero-based index position at which the search starts. '
    return:
      type: System.Int32
      description: The zero-based index position of <em>c</em> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  id: IndexOf(System.Char)
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: IndexOf(Char)
  nameWithType: StringSegment.IndexOf(Char)
  fullName: Microsoft.Extensions.Primitives.StringSegment.IndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IndexOf
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 348
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nGets the zero-based index of the first occurrence of the character <em>c</em> in this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int IndexOf(char c)
    content.vb: Public Function IndexOf(c As Char) As Integer
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to seek.
    return:
      type: System.Int32
      description: The zero-based index position of <em>c</em> from the beginning of the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> if that character is found, or -1 if it is not.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.Trim
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.Trim
  id: Trim
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: Trim()
  nameWithType: StringSegment.Trim()
  fullName: Microsoft.Extensions.Primitives.StringSegment.Trim()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Trim
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 357
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all leading and trailing whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment Trim()
    content.vb: Public Function Trim As StringSegment
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimStart
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.TrimStart
  id: TrimStart
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: TrimStart()
  nameWithType: StringSegment.TrimStart()
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimStart()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: TrimStart
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 366
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all leading whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment TrimStart()
    content.vb: Public Function TrimStart As StringSegment
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.TrimEnd
  id: TrimEnd
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: TrimEnd()
  nameWithType: StringSegment.TrimEnd()
  fullName: Microsoft.Extensions.Primitives.StringSegment.TrimEnd()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: TrimEnd
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 386
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRemoves all trailing whitespaces.\n"
  example: []
  syntax:
    content: public StringSegment TrimEnd()
    content.vb: Public Function TrimEnd As StringSegment
    return:
      type: Microsoft.Extensions.Primitives.StringSegment
      description: The trimmed <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringSegment.ToString
  commentId: M:Microsoft.Extensions.Primitives.StringSegment.ToString
  id: ToString
  parent: Microsoft.Extensions.Primitives.StringSegment
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringSegment.ToString()
  fullName: Microsoft.Extensions.Primitives.StringSegment.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringSegment.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: ToString
    path: src/Microsoft.Extensions.Primitives/StringSegment.cs
    startLine: 406
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nReturns the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> represented by this <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> or <pre><code>String.Empty</code></pre> if the <xref href=\"Microsoft.Extensions.Primitives.StringSegment\" data-throw-if-not-resolved=\"false\"></xref> does not contain a value.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> represented by this <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> or <pre><code>String.Empty</code></pre> if the <xref href="Microsoft.Extensions.Primitives.StringSegment" data-throw-if-not-resolved="false"></xref> does not contain a value.
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  commentId: T:System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<StringSegment>
  nameWithType: IEquatable<StringSegment>
  fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringSegment>
  nameWithType.vb: IEquatable(Of StringSegment)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.Primitives.StringSegment)
  name.vb: IEquatable(Of StringSegment)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.String}
  commentId: T:System.IEquatable{System.String}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<String>
  nameWithType: IEquatable<String>
  fullName: System.IEquatable<System.String>
  nameWithType.vb: IEquatable(Of String)
  fullname.vb: System.IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Primitives.StringSegment
  commentId: T:Microsoft.Extensions.Primitives.StringSegment
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: StringSegment
  nameWithType: StringSegment
  fullName: Microsoft.Extensions.Primitives.StringSegment
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}.Equals(Microsoft.Extensions.Primitives.StringSegment)
  commentId: M:System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}.Equals(Microsoft.Extensions.Primitives.StringSegment)
  parent: System.IEquatable{Microsoft.Extensions.Primitives.StringSegment}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(StringSegment)
  nameWithType: IEquatable<StringSegment>.Equals(StringSegment)
  fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringSegment>.Equals(Microsoft.Extensions.Primitives.StringSegment)
  nameWithType.vb: IEquatable(Of StringSegment).Equals(StringSegment)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.Primitives.StringSegment).Equals(Microsoft.Extensions.Primitives.StringSegment)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<StringSegment>.Equals
    fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringSegment>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of StringSegment).Equals
    fullName: System.IEquatable(Of Microsoft.Extensions.Primitives.StringSegment).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Primitives.StringSegment
    name: StringSegment
    nameWithType: StringSegment
    fullName: Microsoft.Extensions.Primitives.StringSegment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.IEquatable{System.String}.Equals(System.String)
  commentId: M:System.IEquatable{System.String}.Equals(System.String)
  parent: System.IEquatable{System.String}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(String)
  nameWithType: IEquatable<String>.Equals(String)
  fullName: System.IEquatable<System.String>.Equals(System.String)
  nameWithType.vb: IEquatable(Of String).Equals(String)
  fullname.vb: System.IEquatable(Of System.String).Equals(System.String)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<String>.Equals
    fullName: System.IEquatable<System.String>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of String).Equals
    fullName: System.IEquatable(Of System.String).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
