### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Primitives.StringValues
  commentId: T:Microsoft.Extensions.Primitives.StringValues
  id: StringValues
  parent: Microsoft.Extensions.Primitives
  children:
  - Microsoft.Extensions.Primitives.StringValues.#ctor(System.String)
  - Microsoft.Extensions.Primitives.StringValues.#ctor(System.String[])
  - Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.Count
  - Microsoft.Extensions.Primitives.StringValues.Empty
  - Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)
  - Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])
  - Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)
  - Microsoft.Extensions.Primitives.StringValues.Equals(System.String)
  - Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])
  - Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.GetEnumerator
  - Microsoft.Extensions.Primitives.StringValues.GetHashCode
  - Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.Item(System.Int32)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String
  - Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String[]
  - Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringValues
  - Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String[])~Microsoft.Extensions.Primitives.StringValues
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Add(System.String)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Clear
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Contains(System.String)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#IsReadOnly
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Remove(System.String)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#IndexOf(System.String)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Insert(System.Int32,System.String)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Item(System.Int32)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#RemoveAt(System.Int32)
  - Microsoft.Extensions.Primitives.StringValues.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Extensions.Primitives.StringValues.ToArray
  - Microsoft.Extensions.Primitives.StringValues.ToString
  langs:
  - csharp
  - vb
  name: StringValues
  nameWithType: StringValues
  fullName: Microsoft.Extensions.Primitives.StringValues
  type: Struct
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: StringValues
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  summary: "\nRepresents zero/null, one, or many strings in an efficient way.\n"
  example: []
  syntax:
    content: 'public struct StringValues : IList<string>, ICollection<string>, IReadOnlyList<string>, IReadOnlyCollection<string>, IEnumerable<string>, IEnumerable, IEquatable<StringValues>, IEquatable<string>, IEquatable<string[]>'
    content.vb: >-
      Public Structure StringValues
          Implements IList(Of String), ICollection(Of String), IReadOnlyList(Of String), IReadOnlyCollection(Of String), IEnumerable(Of String), IEnumerable, IEquatable(Of StringValues), IEquatable(Of String), IEquatable(Of String())
  implements:
  - System.Collections.Generic.IList{System.String}
  - System.Collections.Generic.ICollection{System.String}
  - System.Collections.Generic.IReadOnlyList{System.String}
  - System.Collections.Generic.IReadOnlyCollection{System.String}
  - System.Collections.Generic.IEnumerable{System.String}
  - System.Collections.IEnumerable
  - System.IEquatable{Microsoft.Extensions.Primitives.StringValues}
  - System.IEquatable{System.String}
  - System.IEquatable{System.String[]}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.Extensions.Primitives.StringValues.Empty
  commentId: F:Microsoft.Extensions.Primitives.StringValues.Empty
  id: Empty
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: StringValues.Empty
  fullName: Microsoft.Extensions.Primitives.StringValues.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Empty
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static readonly StringValues Empty
    content.vb: Public Shared ReadOnly Empty As StringValues
    return:
      type: Microsoft.Extensions.Primitives.StringValues
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringValues.#ctor(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: StringValues(String)
  nameWithType: StringValues.StringValues(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.StringValues(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public StringValues(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringValues.#ctor(System.String[])
  commentId: M:Microsoft.Extensions.Primitives.StringValues.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: StringValues(String[])
  nameWithType: StringValues.StringValues(String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.StringValues(System.String[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public StringValues(string[] values)
    content.vb: Public Sub New(values As String())
    parameters:
    - id: values
      type: System.String[]
  nameWithType.vb: StringValues.StringValues(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.StringValues(System.String())
  name.vb: StringValues(String())
- uid: Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringValues
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringValues
  id: op_Implicit(System.String)~Microsoft.Extensions.Primitives.StringValues
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(String to StringValues)
  nameWithType: StringValues.Implicit(String to StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Implicit(System.String to Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Implicit
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 33
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static implicit operator StringValues(string value)
    content.vb: Public Shared Widening Operator CType(value As String) As StringValues
    parameters:
    - id: value
      type: System.String
    return:
      type: Microsoft.Extensions.Primitives.StringValues
  nameWithType.vb: StringValues.Widening(String to StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Widening(System.String to Microsoft.Extensions.Primitives.StringValues)
  name.vb: Widening(String to StringValues)
- uid: Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String[])~Microsoft.Extensions.Primitives.StringValues
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(System.String[])~Microsoft.Extensions.Primitives.StringValues
  id: op_Implicit(System.String[])~Microsoft.Extensions.Primitives.StringValues
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(String[] to StringValues)
  nameWithType: StringValues.Implicit(String[] to StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Implicit(System.String[] to Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Implicit
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static implicit operator StringValues(string[] values)
    content.vb: Public Shared Widening Operator CType(values As String()) As StringValues
    parameters:
    - id: values
      type: System.String[]
    return:
      type: Microsoft.Extensions.Primitives.StringValues
  nameWithType.vb: StringValues.Widening(String() to StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Widening(System.String() to Microsoft.Extensions.Primitives.StringValues)
  name.vb: Widening(String() to StringValues)
- uid: Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String
  id: op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(StringValues to String)
  nameWithType: StringValues.Implicit(StringValues to String)
  fullName: Microsoft.Extensions.Primitives.StringValues.Implicit(Microsoft.Extensions.Primitives.StringValues to System.String)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Implicit
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 43
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static implicit operator string (StringValues values)
    content.vb: Public Shared Widening Operator CType(values As StringValues) As String
    parameters:
    - id: values
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.String
  nameWithType.vb: StringValues.Widening(StringValues to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Widening(Microsoft.Extensions.Primitives.StringValues to System.String)
  name.vb: Widening(StringValues to String)
- uid: Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String[]
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String[]
  id: op_Implicit(Microsoft.Extensions.Primitives.StringValues)~System.String[]
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(StringValues to String[])
  nameWithType: StringValues.Implicit(StringValues to String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.Implicit(Microsoft.Extensions.Primitives.StringValues to System.String[])
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Implicit
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 48
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static implicit operator string[](StringValues value)
    content.vb: Public Shared Widening Operator CType(value As StringValues) As String()
    parameters:
    - id: value
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.String[]
  nameWithType.vb: StringValues.Widening(StringValues to String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Widening(Microsoft.Extensions.Primitives.StringValues to System.String())
  name.vb: Widening(StringValues to String())
- uid: Microsoft.Extensions.Primitives.StringValues.Count
  commentId: P:Microsoft.Extensions.Primitives.StringValues.Count
  id: Count
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: StringValues.Count
  fullName: Microsoft.Extensions.Primitives.StringValues.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Count
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 53
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.String}.Count
  - System.Collections.Generic.IReadOnlyCollection{System.String}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#IsReadOnly
  commentId: P:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#String}#IsReadOnly
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.IsReadOnly
  nameWithType: StringValues.ICollection<String>.IsReadOnly
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.IsReadOnly
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 55
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: bool ICollection<string>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.String>.IsReadOnly As Boolean Implements ICollection(Of String).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.String}.IsReadOnly
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.Generic.ICollection<System.String>.IsReadOnly
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Item(System.Int32)
  commentId: P:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Item(System.Int32)
  id: System#Collections#Generic#IList{System#String}#Item(System.Int32)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IList<String>.Item[Int32]
  nameWithType: StringValues.IList<String>.Item[Int32]
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IList<System.String>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.IList<System.String>.this[]
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: string IList<string>.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<System.String>.Item(index As Integer) As String Implements IList(Of String).this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
  implements:
  - System.Collections.Generic.IList{System.String}.Item(System.Int32)
  nameWithType.vb: StringValues.System.Collections.Generic.IList<System.String>.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IList<System.String>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<System.String>.Item(Int32)
- uid: Microsoft.Extensions.Primitives.StringValues.Item(System.Int32)
  commentId: P:Microsoft.Extensions.Primitives.StringValues.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: StringValues.Item[Int32]
  fullName: Microsoft.Extensions.Primitives.StringValues.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: this[]
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 66
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public string this[int index] { get; }
    content.vb: Public ReadOnly Property Item(index As Integer) As String
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.String
  implements:
  - System.Collections.Generic.IReadOnlyList{System.String}.Item(System.Int32)
  nameWithType.vb: StringValues.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Extensions.Primitives.StringValues.ToString
  commentId: M:Microsoft.Extensions.Primitives.StringValues.ToString
  id: ToString
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringValues.ToString()
  fullName: Microsoft.Extensions.Primitives.StringValues.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: ToString
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 82
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringValues.ToArray
  commentId: M:Microsoft.Extensions.Primitives.StringValues.ToArray
  id: ToArray
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: StringValues.ToArray()
  fullName: Microsoft.Extensions.Primitives.StringValues.ToArray()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: ToArray
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 101
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public string[] ToArray()
    content.vb: Public Function ToArray As String()
    return:
      type: System.String[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#IndexOf(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#IndexOf(System.String)
  id: System#Collections#Generic#IList{System#String}#IndexOf(System.String)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IList<String>.IndexOf(String)
  nameWithType: StringValues.IList<String>.IndexOf(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IList<System.String>.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.IList<System.String>.IndexOf
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 115
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: int IList<string>.IndexOf(string item)
    content.vb: Function System.Collections.Generic.IList<System.String>.IndexOf(item As String) As Integer Implements IList(Of String).IndexOf
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  nameWithType.vb: StringValues.System.Collections.Generic.IList<System.String>.IndexOf(String)
  name.vb: System.Collections.Generic.IList<System.String>.IndexOf(String)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Contains(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Contains(System.String)
  id: System#Collections#Generic#ICollection{System#String}#Contains(System.String)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.Contains(String)
  nameWithType: StringValues.ICollection<String>.Contains(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.Contains
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 143
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: bool ICollection<string>.Contains(string item)
    content.vb: Function System.Collections.Generic.ICollection<System.String>.Contains(item As String) As Boolean Implements ICollection(Of String).Contains
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.Contains(String)
  name.vb: System.Collections.Generic.ICollection<System.String>.Contains(String)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)
  id: System#Collections#Generic#ICollection{System#String}#CopyTo(System.String[],System.Int32)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.CopyTo(String[], Int32)
  nameWithType: StringValues.ICollection<String>.CopyTo(String[], Int32)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.CopyTo(System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.CopyTo
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 148
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: void ICollection<string>.CopyTo(string[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<System.String>.CopyTo(array As String(), arrayIndex As Integer) Implements ICollection(Of String).CopyTo
    parameters:
    - id: array
      type: System.String[]
    - id: arrayIndex
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.CopyTo(String(), Int32)
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.CopyTo(System.String(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.String>.CopyTo(String(), Int32)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Add(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Add(System.String)
  id: System#Collections#Generic#ICollection{System#String}#Add(System.String)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.Add(String)
  nameWithType: StringValues.ICollection<String>.Add(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.Add(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.Add
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 181
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: void ICollection<string>.Add(string item)
    content.vb: Sub System.Collections.Generic.ICollection<System.String>.Add(item As String) Implements ICollection(Of String).Add
    parameters:
    - id: item
      type: System.String
  implements:
  - System.Collections.Generic.ICollection{System.String}.Add(System.String)
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.Add(String)
  name.vb: System.Collections.Generic.ICollection<System.String>.Add(String)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Insert(System.Int32,System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#Insert(System.Int32,System.String)
  id: System#Collections#Generic#IList{System#String}#Insert(System.Int32,System.String)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IList<String>.Insert(Int32, String)
  nameWithType: StringValues.IList<String>.Insert(Int32, String)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IList<System.String>.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.IList<System.String>.Insert
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 186
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: void IList<string>.Insert(int index, string item)
    content.vb: Sub System.Collections.Generic.IList<System.String>.Insert(index As Integer, item As String) Implements IList(Of String).Insert
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: System.String
  implements:
  - System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  nameWithType.vb: StringValues.System.Collections.Generic.IList<System.String>.Insert(Int32, String)
  name.vb: System.Collections.Generic.IList<System.String>.Insert(Int32, String)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Remove(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Remove(System.String)
  id: System#Collections#Generic#ICollection{System#String}#Remove(System.String)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.Remove(String)
  nameWithType: StringValues.ICollection<String>.Remove(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.Remove
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 191
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: bool ICollection<string>.Remove(string item)
    content.vb: Function System.Collections.Generic.ICollection<System.String>.Remove(item As String) As Boolean Implements ICollection(Of String).Remove
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.Remove(String)
  name.vb: System.Collections.Generic.ICollection<System.String>.Remove(String)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#RemoveAt(System.Int32)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IList{System#String}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{System#String}#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IList<String>.RemoveAt(Int32)
  nameWithType: StringValues.IList<String>.RemoveAt(Int32)
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IList<System.String>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.IList<System.String>.RemoveAt
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 196
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: void IList<string>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<System.String>.RemoveAt(index As Integer) Implements IList(Of String).RemoveAt
    parameters:
    - id: index
      type: System.Int32
  implements:
  - System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  nameWithType.vb: StringValues.System.Collections.Generic.IList<System.String>.RemoveAt(Int32)
  name.vb: System.Collections.Generic.IList<System.String>.RemoveAt(Int32)
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Clear
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#ICollection{System#String}#Clear
  id: System#Collections#Generic#ICollection{System#String}#Clear
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: ICollection<String>.Clear()
  nameWithType: StringValues.ICollection<String>.Clear()
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.ICollection<System.String>.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.ICollection<System.String>.Clear
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 201
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: void ICollection<string>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<System.String>.Clear Implements ICollection(Of String).Clear
  implements:
  - System.Collections.Generic.ICollection{System.String}.Clear
  nameWithType.vb: StringValues.System.Collections.Generic.ICollection<System.String>.Clear()
  name.vb: System.Collections.Generic.ICollection<System.String>.Clear()
- uid: Microsoft.Extensions.Primitives.StringValues.GetEnumerator
  commentId: M:Microsoft.Extensions.Primitives.StringValues.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: StringValues.GetEnumerator()
  fullName: Microsoft.Extensions.Primitives.StringValues.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: GetEnumerator
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 206
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public StringValues.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As StringValues.Enumerator
    return:
      type: Microsoft.Extensions.Primitives.StringValues.Enumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#String}#GetEnumerator
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IEnumerable<String>.GetEnumerator()
  nameWithType: StringValues.IEnumerable<String>.GetEnumerator()
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 211
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: IEnumerator<string> IEnumerable<string>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.String>.GetEnumerator As IEnumerator(Of String) Implements IEnumerable(Of String).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.String}
  implements:
  - System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  nameWithType.vb: StringValues.System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
- uid: Microsoft.Extensions.Primitives.StringValues.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Extensions.Primitives.StringValues.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: StringValues.IEnumerable.GetEnumerator()
  fullName: Microsoft.Extensions.Primitives.StringValues.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 216
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: StringValues.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
  id: IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(StringValues)
  nameWithType: StringValues.IsNullOrEmpty(StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.IsNullOrEmpty(Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: IsNullOrEmpty
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 221
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool IsNullOrEmpty(StringValues value)
    content.vb: Public Shared Function IsNullOrEmpty(value As StringValues) As Boolean
    parameters:
    - id: value
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  id: Concat(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Concat(StringValues, StringValues)
  nameWithType: StringValues.Concat(StringValues, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Concat(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Concat
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 235
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static StringValues Concat(StringValues values1, StringValues values2)
    content.vb: Public Shared Function Concat(values1 As StringValues, values2 As StringValues) As StringValues
    parameters:
    - id: values1
      type: Microsoft.Extensions.Primitives.StringValues
    - id: values2
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: Microsoft.Extensions.Primitives.StringValues
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  id: Equals(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, StringValues)
  nameWithType: StringValues.Equals(StringValues, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 256
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool Equals(StringValues left, StringValues right)
    content.vb: Public Shared Function Equals(left As StringValues, right As StringValues) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  id: op_Equality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, StringValues)
  nameWithType: StringValues.Equality(StringValues, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 276
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(StringValues left, StringValues right)
    content.vb: Public Shared Operator =(left As StringValues, right As StringValues) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  id: op_Inequality(Microsoft.Extensions.Primitives.StringValues,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, StringValues)
  nameWithType: StringValues.Inequality(StringValues, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(Microsoft.Extensions.Primitives.StringValues, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 281
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(StringValues left, StringValues right)
    content.vb: Public Shared Operator <>(left As StringValues, right As StringValues) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)
  id: Equals(Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues)
  nameWithType: StringValues.Equals(StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 286
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public bool Equals(StringValues other)
    content.vb: Public Function Equals(other As StringValues) As Boolean
    parameters:
    - id: other
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{Microsoft.Extensions.Primitives.StringValues}.Equals(Microsoft.Extensions.Primitives.StringValues)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String,Microsoft.Extensions.Primitives.StringValues)
  id: Equals(System.String,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String, StringValues)
  nameWithType: StringValues.Equals(String, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(System.String, Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 291
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool Equals(string left, StringValues right)
    content.vb: Public Shared Function Equals(left As String, right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String)
  id: Equals(Microsoft.Extensions.Primitives.StringValues,System.String)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, String)
  nameWithType: StringValues.Equals(StringValues, String)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 296
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool Equals(StringValues left, string right)
    content.vb: Public Shared Function Equals(left As StringValues, right As String) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String)
  id: Equals(System.String)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String)
  nameWithType: StringValues.Equals(String)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 301
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public bool Equals(string other)
    content.vb: Public Function Equals(other As String) As Boolean
    parameters:
    - id: other
      type: System.String
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{System.String}.Equals(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)
  id: Equals(System.String[],Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String[], StringValues)
  nameWithType: StringValues.Equals(String[], StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(System.String[], Microsoft.Extensions.Primitives.StringValues)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 306
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool Equals(string[] left, StringValues right)
    content.vb: Public Shared Function Equals(left As String(), right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String[]
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Equals(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Equals(System.String(), Microsoft.Extensions.Primitives.StringValues)
  name.vb: Equals(String(), StringValues)
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])
  id: Equals(Microsoft.Extensions.Primitives.StringValues,System.String[])
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, String[])
  nameWithType: StringValues.Equals(StringValues, String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues, System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 311
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool Equals(StringValues left, string[] right)
    content.vb: Public Shared Function Equals(left As StringValues, right As String()) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String[]
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Equals(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Equals(Microsoft.Extensions.Primitives.StringValues, System.String())
  name.vb: Equals(StringValues, String())
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])
  id: Equals(System.String[])
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String[])
  nameWithType: StringValues.Equals(String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 316
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public bool Equals(string[] other)
    content.vb: Public Function Equals(other As String()) As Boolean
    parameters:
    - id: other
      type: System.String[]
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{System.String[]}.Equals(System.String[])
  nameWithType.vb: StringValues.Equals(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Equals(System.String())
  name.vb: Equals(String())
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)
  id: op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, String)
  nameWithType: StringValues.Equality(StringValues, String)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(Microsoft.Extensions.Primitives.StringValues, System.String)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 321
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(StringValues left, string right)
    content.vb: Public Shared Operator =(left As StringValues, right As String) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)
  id: op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, String)
  nameWithType: StringValues.Inequality(StringValues, String)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(Microsoft.Extensions.Primitives.StringValues, System.String)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 326
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(StringValues left, string right)
    content.vb: Public Shared Operator <>(left As StringValues, right As String) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)
  id: op_Equality(System.String,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(String, StringValues)
  nameWithType: StringValues.Equality(String, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(System.String, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 331
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(string left, StringValues right)
    content.vb: Public Shared Operator =(left As String, right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)
  id: op_Inequality(System.String,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(String, StringValues)
  nameWithType: StringValues.Inequality(String, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(System.String, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 336
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(string left, StringValues right)
    content.vb: Public Shared Operator <>(left As String, right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  id: op_Equality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, String[])
  nameWithType: StringValues.Equality(StringValues, String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(Microsoft.Extensions.Primitives.StringValues, System.String[])
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 341
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(StringValues left, string[] right)
    content.vb: Public Shared Operator =(left As StringValues, right As String()) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String[]
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Equality(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Equality(Microsoft.Extensions.Primitives.StringValues, System.String())
  name.vb: Equality(StringValues, String())
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  id: op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.String[])
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, String[])
  nameWithType: StringValues.Inequality(StringValues, String[])
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(Microsoft.Extensions.Primitives.StringValues, System.String[])
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 346
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(StringValues left, string[] right)
    content.vb: Public Shared Operator <>(left As StringValues, right As String()) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.String[]
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Inequality(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Inequality(Microsoft.Extensions.Primitives.StringValues, System.String())
  name.vb: Inequality(StringValues, String())
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  id: op_Equality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(String[], StringValues)
  nameWithType: StringValues.Equality(String[], StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(System.String[], Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 351
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(string[] left, StringValues right)
    content.vb: Public Shared Operator =(left As String(), right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String[]
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Equality(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Equality(System.String(), Microsoft.Extensions.Primitives.StringValues)
  name.vb: Equality(String(), StringValues)
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  id: op_Inequality(System.String[],Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(String[], StringValues)
  nameWithType: StringValues.Inequality(String[], StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(System.String[], Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 356
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(string[] left, StringValues right)
    content.vb: Public Shared Operator <>(left As String(), right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.String[]
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  nameWithType.vb: StringValues.Inequality(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Primitives.StringValues.Inequality(System.String(), Microsoft.Extensions.Primitives.StringValues)
  name.vb: Inequality(String(), StringValues)
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  id: op_Equality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, Object)
  nameWithType: StringValues.Equality(StringValues, Object)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(Microsoft.Extensions.Primitives.StringValues, System.Object)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 361
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(StringValues left, object right)
    content.vb: Public Shared Operator =(left As StringValues, right As Object) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  id: op_Inequality(Microsoft.Extensions.Primitives.StringValues,System.Object)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, Object)
  nameWithType: StringValues.Inequality(StringValues, Object)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(Microsoft.Extensions.Primitives.StringValues, System.Object)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 366
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(StringValues left, object right)
    content.vb: Public Shared Operator <>(left As StringValues, right As Object) As Boolean
    parameters:
    - id: left
      type: Microsoft.Extensions.Primitives.StringValues
    - id: right
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  id: op_Equality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equality(Object, StringValues)
  nameWithType: StringValues.Equality(Object, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equality(System.Object, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Equality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 370
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator ==(object left, StringValues right)
    content.vb: Public Shared Operator =(left As Object, right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.Object
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  id: op_Inequality(System.Object,Microsoft.Extensions.Primitives.StringValues)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(Object, StringValues)
  nameWithType: StringValues.Inequality(Object, StringValues)
  fullName: Microsoft.Extensions.Primitives.StringValues.Inequality(System.Object, Microsoft.Extensions.Primitives.StringValues)
  type: Operator
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: op_Inequality
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 375
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public static bool operator !=(object left, StringValues right)
    content.vb: Public Shared Operator <>(left As Object, right As StringValues) As Boolean
    parameters:
    - id: left
      type: System.Object
    - id: right
      type: Microsoft.Extensions.Primitives.StringValues
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)
  commentId: M:Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: StringValues.Equals(Object)
  fullName: Microsoft.Extensions.Primitives.StringValues.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Equals
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 380
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.Primitives.StringValues.GetHashCode
  commentId: M:Microsoft.Extensions.Primitives.StringValues.GetHashCode
  id: GetHashCode
  parent: Microsoft.Extensions.Primitives.StringValues
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: StringValues.GetHashCode()
  fullName: Microsoft.Extensions.Primitives.StringValues.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Primitives/StringValues.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: GetHashCode
    path: src/Microsoft.Extensions.Primitives/StringValues.cs
    startLine: 405
  assemblies:
  - Microsoft.Extensions.Primitives
  namespace: Microsoft.Extensions.Primitives
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.IEquatable{Microsoft.Extensions.Primitives.StringValues}
  commentId: T:System.IEquatable{Microsoft.Extensions.Primitives.StringValues}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<StringValues>
  nameWithType: IEquatable<StringValues>
  fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringValues>
  nameWithType.vb: IEquatable(Of StringValues)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.Primitives.StringValues)
  name.vb: IEquatable(Of StringValues)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.String}
  commentId: T:System.IEquatable{System.String}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<String>
  nameWithType: IEquatable<String>
  fullName: System.IEquatable<System.String>
  nameWithType.vb: IEquatable(Of String)
  fullname.vb: System.IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.String[]}
  commentId: T:System.IEquatable{System.String[]}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<String[]>
  nameWithType: IEquatable<String[]>
  fullName: System.IEquatable<System.String[]>
  nameWithType.vb: IEquatable(Of String())
  fullname.vb: System.IEquatable(Of System.String())
  name.vb: IEquatable(Of String())
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Primitives.StringValues
  commentId: T:Microsoft.Extensions.Primitives.StringValues
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: StringValues
  nameWithType: StringValues
  fullName: Microsoft.Extensions.Primitives.StringValues
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection{System.String}.Count
  commentId: P:System.Collections.Generic.ICollection{System.String}.Count
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<String>.Count
  fullName: System.Collections.Generic.ICollection<System.String>.Count
  nameWithType.vb: ICollection(Of String).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).Count
- uid: System.Collections.Generic.IReadOnlyCollection{System.String}.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{System.String}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{System.String}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  nameWithType: IReadOnlyCollection<String>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<System.String>.Count
  nameWithType.vb: IReadOnlyCollection(Of String).Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.String).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: IReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{System.String}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.String}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<String>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.String>.IsReadOnly
  nameWithType.vb: ICollection(Of String).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IList{System.String}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.String}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<String>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.String>.Item[System.Int32]
  nameWithType.vb: IList(Of String).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.String).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<String>.Item
    fullName: System.Collections.Generic.IList<System.String>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of String).Item
    fullName: System.Collections.Generic.IList(Of System.String).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.String}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IReadOnlyList{System.String}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{System.String}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IReadOnlyList<String>.Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<System.String>.Item[System.Int32]
  nameWithType.vb: IReadOnlyList(Of String).Item(Int32)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.String).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList<String>.Item
    fullName: System.Collections.Generic.IReadOnlyList<System.String>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList(Of String).Item
    fullName: System.Collections.Generic.IReadOnlyList(Of System.String).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IReadOnlyList<T>.Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList<T>.Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    nameWithType: IReadOnlyList(Of T).Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  commentId: M:System.Collections.Generic.IList{System.String}.IndexOf(System.String)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(String)
  nameWithType: IList<String>.IndexOf(String)
  fullName: System.Collections.Generic.IList<System.String>.IndexOf(System.String)
  nameWithType.vb: IList(Of String).IndexOf(String)
  fullname.vb: System.Collections.Generic.IList(Of System.String).IndexOf(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<String>.IndexOf
    fullName: System.Collections.Generic.IList<System.String>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of String).IndexOf
    fullName: System.Collections.Generic.IList(Of System.String).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Contains(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(String)
  nameWithType: ICollection<String>.Contains(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Contains(System.String)
  nameWithType.vb: ICollection(Of String).Contains(String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).Contains(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<String>.Contains
    fullName: System.Collections.Generic.ICollection<System.String>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of String).Contains
    fullName: System.Collections.Generic.ICollection(Of System.String).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.String}.CopyTo(System.String[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(String[], Int32)
  nameWithType: ICollection<String>.CopyTo(String[], Int32)
  fullName: System.Collections.Generic.ICollection<System.String>.CopyTo(System.String[], System.Int32)
  nameWithType.vb: ICollection(Of String).CopyTo(String(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).CopyTo(System.String(), System.Int32)
  name.vb: CopyTo(String(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<String>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.String>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of String).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.String).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}.Add(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Add(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(String)
  nameWithType: ICollection<String>.Add(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Add(System.String)
  nameWithType.vb: ICollection(Of String).Add(String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).Add(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<String>.Add
    fullName: System.Collections.Generic.ICollection<System.String>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of String).Add
    fullName: System.Collections.Generic.ICollection(Of System.String).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  commentId: M:System.Collections.Generic.IList{System.String}.Insert(System.Int32,System.String)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, String)
  nameWithType: IList<String>.Insert(Int32, String)
  fullName: System.Collections.Generic.IList<System.String>.Insert(System.Int32, System.String)
  nameWithType.vb: IList(Of String).Insert(Int32, String)
  fullname.vb: System.Collections.Generic.IList(Of System.String).Insert(System.Int32, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<String>.Insert
    fullName: System.Collections.Generic.IList<System.String>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of String).Insert
    fullName: System.Collections.Generic.IList(Of System.String).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  commentId: M:System.Collections.Generic.ICollection{System.String}.Remove(System.String)
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(String)
  nameWithType: ICollection<String>.Remove(String)
  fullName: System.Collections.Generic.ICollection<System.String>.Remove(System.String)
  nameWithType.vb: ICollection(Of String).Remove(String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<String>.Remove
    fullName: System.Collections.Generic.ICollection<System.String>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of String).Remove
    fullName: System.Collections.Generic.ICollection(Of System.String).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.String}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.String}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<String>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.String>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of String).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.String).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<String>.RemoveAt
    fullName: System.Collections.Generic.IList<System.String>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of String).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.String).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.String}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.String}.Clear
  parent: System.Collections.Generic.ICollection{System.String}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<String>.Clear()
  fullName: System.Collections.Generic.ICollection<System.String>.Clear()
  nameWithType.vb: ICollection(Of String).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.String).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<String>.Clear
    fullName: System.Collections.Generic.ICollection<System.String>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of String).Clear
    fullName: System.Collections.Generic.ICollection(Of System.String).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Primitives.StringValues.Enumerator
  commentId: T:Microsoft.Extensions.Primitives.StringValues.Enumerator
  parent: Microsoft.Extensions.Primitives
  isExternal: false
  name: StringValues.Enumerator
  nameWithType: StringValues.Enumerator
  fullName: Microsoft.Extensions.Primitives.StringValues.Enumerator
- uid: System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.String}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.String}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<String>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of String).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<String>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.String>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of String).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.String).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.String}
  commentId: T:System.Collections.Generic.IEnumerator{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<String>
  nameWithType: IEnumerator<String>
  fullName: System.Collections.Generic.IEnumerator<System.String>
  nameWithType.vb: IEnumerator(Of String)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.String)
  name.vb: IEnumerator(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IEquatable{Microsoft.Extensions.Primitives.StringValues}.Equals(Microsoft.Extensions.Primitives.StringValues)
  commentId: M:System.IEquatable{Microsoft.Extensions.Primitives.StringValues}.Equals(Microsoft.Extensions.Primitives.StringValues)
  parent: System.IEquatable{Microsoft.Extensions.Primitives.StringValues}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(StringValues)
  nameWithType: IEquatable<StringValues>.Equals(StringValues)
  fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringValues>.Equals(Microsoft.Extensions.Primitives.StringValues)
  nameWithType.vb: IEquatable(Of StringValues).Equals(StringValues)
  fullname.vb: System.IEquatable(Of Microsoft.Extensions.Primitives.StringValues).Equals(Microsoft.Extensions.Primitives.StringValues)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<StringValues>.Equals
    fullName: System.IEquatable<Microsoft.Extensions.Primitives.StringValues>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of StringValues).Equals
    fullName: System.IEquatable(Of Microsoft.Extensions.Primitives.StringValues).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.String}.Equals(System.String)
  commentId: M:System.IEquatable{System.String}.Equals(System.String)
  parent: System.IEquatable{System.String}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(String)
  nameWithType: IEquatable<String>.Equals(String)
  fullName: System.IEquatable<System.String>.Equals(System.String)
  nameWithType.vb: IEquatable(Of String).Equals(String)
  fullname.vb: System.IEquatable(Of System.String).Equals(System.String)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<String>.Equals
    fullName: System.IEquatable<System.String>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of String).Equals
    fullName: System.IEquatable(Of System.String).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.String[]}.Equals(System.String[])
  commentId: M:System.IEquatable{System.String[]}.Equals(System.String[])
  parent: System.IEquatable{System.String[]}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(String[])
  nameWithType: IEquatable<String[]>.Equals(String[])
  fullName: System.IEquatable<System.String[]>.Equals(System.String[])
  nameWithType.vb: IEquatable(Of String()).Equals(String())
  fullname.vb: System.IEquatable(Of System.String()).Equals(System.String())
  name.vb: Equals(String())
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<String[]>.Equals
    fullName: System.IEquatable<System.String[]>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of String()).Equals
    fullName: System.IEquatable(Of System.String()).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
