### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument
  commentId: T:Microsoft.Extensions.CommandLineUtils.CommandArgument
  id: CommandArgument
  parent: Microsoft.Extensions.CommandLineUtils
  children:
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.#ctor
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.Description
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.MultipleValues
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.Name
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.Value
  - Microsoft.Extensions.CommandLineUtils.CommandArgument.Values
  langs:
  - csharp
  - vb
  name: CommandArgument
  nameWithType: CommandArgument
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: CommandArgument
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public class CommandArgument
    content.vb: Public Class CommandArgument
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.#ctor
  commentId: M:Microsoft.Extensions.CommandLineUtils.CommandArgument.#ctor
  id: '#ctor'
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: CommandArgument()
  nameWithType: CommandArgument.CommandArgument()
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.CommandArgument()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: .ctor
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public CommandArgument()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.Name
  commentId: P:Microsoft.Extensions.CommandLineUtils.CommandArgument.Name
  id: Name
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CommandArgument.Name
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Name
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.Description
  commentId: P:Microsoft.Extensions.CommandLineUtils.CommandArgument.Description
  id: Description
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: CommandArgument.Description
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.Description
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Description
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.Values
  commentId: P:Microsoft.Extensions.CommandLineUtils.CommandArgument.Values
  id: Values
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: CommandArgument.Values
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.Values
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Values
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public List<string> Values { get; }
    content.vb: Public ReadOnly Property Values As List(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.MultipleValues
  commentId: P:Microsoft.Extensions.CommandLineUtils.CommandArgument.MultipleValues
  id: MultipleValues
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: MultipleValues
  nameWithType: CommandArgument.MultipleValues
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.MultipleValues
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: MultipleValues
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public bool MultipleValues { get; set; }
    content.vb: Public Property MultipleValues As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.CommandLineUtils.CommandArgument.Value
  commentId: P:Microsoft.Extensions.CommandLineUtils.CommandArgument.Value
  id: Value
  parent: Microsoft.Extensions.CommandLineUtils.CommandArgument
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: CommandArgument.Value
  fullName: Microsoft.Extensions.CommandLineUtils.CommandArgument.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
      branch: master
      repo: https://github.com/aspnet/Common.git
    id: Value
    path: src/Microsoft.Extensions.CommandLineUtils/CommandLine/CommandArgument.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.CommandLineUtils
  namespace: Microsoft.Extensions.CommandLineUtils
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.CommandLineUtils
  commentId: N:Microsoft.Extensions.CommandLineUtils
  isExternal: false
  name: Microsoft.Extensions.CommandLineUtils
  nameWithType: Microsoft.Extensions.CommandLineUtils
  fullName: Microsoft.Extensions.CommandLineUtils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullname.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
