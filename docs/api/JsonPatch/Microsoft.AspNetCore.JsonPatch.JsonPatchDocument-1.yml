### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  commentId: T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  id: JsonPatchDocument`1
  parent: Microsoft.AspNetCore.JsonPatch
  children:
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor(System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{`0}},Newtonsoft.Json.Serialization.IContractResolver)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ContractResolver
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Microsoft#AspNetCore#JsonPatch#IJsonPatchDocument#GetOperations
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Operations
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  - Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  langs:
  - csharp
  - vb
  name: JsonPatchDocument<TModel>
  nameWithType: JsonPatchDocument<TModel>
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: JsonPatchDocument
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: >-
      [JsonConverter(typeof (TypedJsonPatchDocumentConverter))]

      public class JsonPatchDocument<TModel> : IJsonPatchDocument where TModel : class
    content.vb: >-
      <JsonConverter(GetType(TypedJsonPatchDocumentConverter))>

      Public Class JsonPatchDocument(Of TModel As Class)
          Implements IJsonPatchDocument
    typeParameters:
    - id: TModel
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Microsoft.AspNetCore.JsonPatch.Converters.TypedJsonPatchDocumentConverter
  nameWithType.vb: JsonPatchDocument(Of TModel)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel)
  name.vb: JsonPatchDocument(Of TModel)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Operations
  commentId: P:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Operations
  id: Operations
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Operations
  nameWithType: JsonPatchDocument<TModel>.Operations
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Operations
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Operations
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: public List<Operation<TModel>> Operations { get; }
    content.vb: Public ReadOnly Property Operations As List(Of Operation(Of TModel))
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{{TModel}}}
  nameWithType.vb: JsonPatchDocument(Of TModel).Operations
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Operations
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ContractResolver
  commentId: P:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ContractResolver
  id: ContractResolver
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: ContractResolver
  nameWithType: JsonPatchDocument<TModel>.ContractResolver
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.ContractResolver
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: ContractResolver
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: >-
      [JsonIgnore]

      public IContractResolver ContractResolver { get; set; }
    content.vb: >-
      <JsonIgnore>

      Public Property ContractResolver As IContractResolver
    parameters: []
    return:
      type: Newtonsoft.Json.Serialization.IContractResolver
  implements:
  - Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.ContractResolver
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  nameWithType.vb: JsonPatchDocument(Of TModel).ContractResolver
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).ContractResolver
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: JsonPatchDocument()
  nameWithType: JsonPatchDocument<TModel>.JsonPatchDocument()
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.JsonPatchDocument()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: .ctor
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: public JsonPatchDocument()
    content.vb: Public Sub New
  nameWithType.vb: JsonPatchDocument(Of TModel).JsonPatchDocument()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).JsonPatchDocument()
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor(System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{`0}},Newtonsoft.Json.Serialization.IContractResolver)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.#ctor(System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{`0}},Newtonsoft.Json.Serialization.IContractResolver)
  id: '#ctor(System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{`0}},Newtonsoft.Json.Serialization.IContractResolver)'
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: JsonPatchDocument(List<Operation<TModel>>, IContractResolver)
  nameWithType: JsonPatchDocument<TModel>.JsonPatchDocument(List<Operation<TModel>>, IContractResolver)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.JsonPatchDocument(System.Collections.Generic.List<Microsoft.AspNetCore.JsonPatch.Operations.Operation<TModel>>, Newtonsoft.Json.Serialization.IContractResolver)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: .ctor
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: public JsonPatchDocument(List<Operation<TModel>> operations, IContractResolver contractResolver)
    content.vb: Public Sub New(operations As List(Of Operation(Of TModel)), contractResolver As IContractResolver)
    parameters:
    - id: operations
      type: System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{{TModel}}}
    - id: contractResolver
      type: Newtonsoft.Json.Serialization.IContractResolver
  nameWithType.vb: JsonPatchDocument(Of TModel).JsonPatchDocument(List(Of Operation(Of TModel)), IContractResolver)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).JsonPatchDocument(System.Collections.Generic.List(Of Microsoft.AspNetCore.JsonPatch.Operations.Operation(Of TModel)), Newtonsoft.Json.Serialization.IContractResolver)
  name.vb: JsonPatchDocument(List(Of Operation(Of TModel)), IContractResolver)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  id: Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Add<TProp>(Expression<Func<TModel, TProp>>, TProp)
  nameWithType: JsonPatchDocument<TModel>.Add<TProp>(Expression<Func<TModel, TProp>>, TProp)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Add<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, TProp)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Add
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nAdd operation.  Will result in, for example,\n{ \"op\": \"add\", \"path\": \"/a/b/c\", \"value\": [ \"foo\", \"bar\" ] }\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Add<TProp>(Expression<Func<TModel, TProp>> path, TProp value)
    content.vb: Public Function Add(Of TProp)(path As Expression(Of Func(Of TModel, TProp)), value As TProp) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Add(Of TProp)(Expression(Of Func(Of TModel, TProp)), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Add(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), TProp)
  name.vb: Add(Of TProp)(Expression(Of Func(Of TModel, TProp)), TProp)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  id: Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Add<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp, Int32)
  nameWithType: JsonPatchDocument<TModel>.Add<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Add<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, TProp, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Add
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 82
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nAdd value to list at given position\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Add<TProp>(Expression<Func<TModel, IList<TProp>>> path, TProp value, int position)
    content.vb: Public Function Add(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp))), value As TProp, position As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    - id: position
      type: System.Int32
      description: position
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Add(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Add(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), TProp, System.Int32)
  name.vb: Add(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp, Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  id: Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Add<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp)
  nameWithType: JsonPatchDocument<TModel>.Add<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Add<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, TProp)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Add
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 108
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nAt value at end of list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Add<TProp>(Expression<Func<TModel, IList<TProp>>> path, TProp value)
    content.vb: Public Function Add(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp))), value As TProp) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Add(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Add(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), TProp)
  name.vb: Add(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Remove<TProp>(Expression<Func<TModel, TProp>>)
  nameWithType: JsonPatchDocument<TModel>.Remove<TProp>(Expression<Func<TModel, TProp>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Remove<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Remove
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 130
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nRemove value at target location.  Will result in, for example,\n{ \"op\": \"remove\", \"path\": \"/a/b/c\" }\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Remove<TProp>(Expression<Func<TModel, TProp>> path)
    content.vb: Public Function Remove(Of TProp)(path As Expression(Of Func(Of TModel, TProp))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    typeParameters:
    - id: TProp
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Remove(Of TProp)(Expression(Of Func(Of TModel, TProp)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Remove(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)))
  name.vb: Remove(Of TProp)(Expression(Of Func(Of TModel, TProp)))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  id: Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Remove<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32)
  nameWithType: JsonPatchDocument<TModel>.Remove<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Remove<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Remove
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 149
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nRemove value from list at given position\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Remove<TProp>(Expression<Func<TModel, IList<TProp>>> path, int position)
    content.vb: Public Function Remove(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp))), position As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: position
      type: System.Int32
      description: position
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Remove(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Remove(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32)
  name.vb: Remove(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  id: Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Remove<TProp>(Expression<Func<TModel, IList<TProp>>>)
  nameWithType: JsonPatchDocument<TModel>.Remove<TProp>(Expression<Func<TModel, IList<TProp>>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Remove<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Remove
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 170
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nRemove value from end of list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Remove<TProp>(Expression<Func<TModel, IList<TProp>>> path)
    content.vb: Public Function Remove(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp)))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Remove(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Remove(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))))
  name.vb: Remove(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  id: Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Replace<TProp>(Expression<Func<TModel, TProp>>, TProp)
  nameWithType: JsonPatchDocument<TModel>.Replace<TProp>(Expression<Func<TModel, TProp>>, TProp)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Replace<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, TProp)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Replace
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 192
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nReplace value.  Will result in, for example,\n{ \"op\": \"replace\", \"path\": \"/a/b/c\", \"value\": 42 }\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Replace<TProp>(Expression<Func<TModel, TProp>> path, TProp value)
    content.vb: Public Function Replace(Of TProp)(path As Expression(Of Func(Of TModel, TProp)), value As TProp) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    typeParameters:
    - id: TProp
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Replace(Of TProp)(Expression(Of Func(Of TModel, TProp)), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Replace(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), TProp)
  name.vb: Replace(Of TProp)(Expression(Of Func(Of TModel, TProp)), TProp)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  id: Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Replace<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp, Int32)
  nameWithType: JsonPatchDocument<TModel>.Replace<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Replace<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, TProp, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Replace
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 216
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nReplace value in a list at given position\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Replace<TProp>(Expression<Func<TModel, IList<TProp>>> path, TProp value, int position)
    content.vb: Public Function Replace(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp))), value As TProp, position As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    - id: position
      type: System.Int32
      description: position
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Replace(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Replace(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), TProp, System.Int32)
  name.vb: Replace(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp, Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  id: Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Replace<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp)
  nameWithType: JsonPatchDocument<TModel>.Replace<TProp>(Expression<Func<TModel, IList<TProp>>>, TProp)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Replace<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, TProp)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Replace
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 240
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nReplace value at end of a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Replace<TProp>(Expression<Func<TModel, IList<TProp>>> path, TProp value)
    content.vb: Public Function Replace(Of TProp)(path As Expression(Of Func(Of TModel, IList(Of TProp))), value As TProp) As JsonPatchDocument(Of TModel)
    parameters:
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: value
      type: '{TProp}'
      description: value
    typeParameters:
    - id: TProp
      description: value type
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Replace(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Replace(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), TProp)
  name.vb: Replace(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), TProp)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, TProp>>)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, TProp>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, TProp>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 263
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nRemoves value at specified location and add it to the target location.  Will result in, for example:\n{ \"op\": \"move\", \"from\": \"/a/b/c\", \"path\": \"/a/b/d\" }\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, TProp>> path)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, TProp))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    typeParameters:
    - id: TProp
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, TProp)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)))
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, TProp)))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, TProp>>)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, TProp>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, TProp>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 293
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nMove from a position in a list to a new location\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, TProp>> path)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, TProp))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, TProp)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)))
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, TProp)))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>, Int32)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 324
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nMove from a property to a location in a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, IList<TProp>>> path, int positionTo)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, IList(Of TProp))), positionTo As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: positionTo
      type: System.Int32
      description: position
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32)
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>, Int32)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 356
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nMove from a position in a list to another location in a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, IList<TProp>>> path, int positionTo)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, IList(Of TProp))), positionTo As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position (source)
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: positionTo
      type: System.Int32
      description: position (target)
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32)
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 388
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nMove from a position in a list to the end of another list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, IList<TProp>>> path)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, IList(Of TProp)))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))))
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  id: Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>)
  nameWithType: JsonPatchDocument<TModel>.Move<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Move<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Move
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 418
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nMove to the end of a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Move<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, IList<TProp>>> path)
    content.vb: Public Function Move(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, IList(Of TProp)))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Move(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))))
  name.vb: Move(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, TProp>>)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, TProp>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, TProp>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 447
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy the value at specified location to the target location.  Willr esult in, for example:\n{ \"op\": \"copy\", \"from\": \"/a/b/c\", \"path\": \"/a/b/e\" }\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, TProp>> path)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, TProp))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    typeParameters:
    - id: TProp
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, TProp)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)))
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, TProp)))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, TProp>>)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, TProp>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, TProp>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 477
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy from a position in a list to a new location\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, TProp>> path)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, TProp))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, TProp)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)))
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, TProp)))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>, Int32)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 508
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy from a property to a location in a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, IList<TProp>>> path, int positionTo)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, IList(Of TProp))), positionTo As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: positionTo
      type: System.Int32
      description: position
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32)
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>, Int32)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>, Int32)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 540
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy from a position in a list to a new location in a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, IList<TProp>>> path, int positionTo)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, IList(Of TProp))), positionTo As Integer) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position (source)
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    - id: positionTo
      type: System.Int32
      description: position (target)
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32)
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))), Int32)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, IList<TProp>>>, Int32, Expression<Func<TModel, IList<TProp>>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>, System.Int32, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 572
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy from a position in a list to the end of another list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, IList<TProp>>> from, int positionFrom, Expression<Func<TModel, IList<TProp>>> path)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, IList(Of TProp))), positionFrom As Integer, path As Expression(Of Func(Of TModel, IList(Of TProp)))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: source location
    - id: positionFrom
      type: System.Int32
      description: position
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))))
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, IList(Of TProp))), Int32, Expression(Of Func(Of TModel, IList(Of TProp))))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  id: Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>)
  nameWithType: JsonPatchDocument<TModel>.Copy<TProp>(Expression<Func<TModel, TProp>>, Expression<Func<TModel, IList<TProp>>>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Copy<TProp>(System.Linq.Expressions.Expression<System.Func<TModel, TProp>>, System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Copy
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 602
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nCopy to the end of a list\n"
  example: []
  syntax:
    content: public JsonPatchDocument<TModel> Copy<TProp>(Expression<Func<TModel, TProp>> from, Expression<Func<TModel, IList<TProp>>> path)
    content.vb: Public Function Copy(Of TProp)(from As Expression(Of Func(Of TModel, TProp)), path As Expression(Of Func(Of TModel, IList(Of TProp)))) As JsonPatchDocument(Of TModel)
    parameters:
    - id: from
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
      description: source location
    - id: path
      type: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
      description: target location
    typeParameters:
    - id: TProp
      description: ''
    return:
      type: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
      description: ''
  nameWithType.vb: JsonPatchDocument(Of TModel).Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Copy(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp)), System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp))))
  name.vb: Copy(Of TProp)(Expression(Of Func(Of TModel, TProp)), Expression(Of Func(Of TModel, IList(Of TProp))))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0)
  id: ApplyTo(`0)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: ApplyTo(TModel)
  nameWithType: JsonPatchDocument<TModel>.ApplyTo(TModel)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.ApplyTo(TModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: ApplyTo
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 628
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nApply this JsonPatchDocument \n"
  example: []
  syntax:
    content: public void ApplyTo(TModel objectToApplyTo)
    content.vb: Public Sub ApplyTo(objectToApplyTo As TModel)
    parameters:
    - id: objectToApplyTo
      type: '{TModel}'
      description: Object to apply the JsonPatchDocument to
  nameWithType.vb: JsonPatchDocument(Of TModel).ApplyTo(TModel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).ApplyTo(TModel)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})
  id: ApplyTo(`0,System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError})
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: ApplyTo(TModel, Action<JsonPatchError>)
  nameWithType: JsonPatchDocument<TModel>.ApplyTo(TModel, Action<JsonPatchError>)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.ApplyTo(TModel, System.Action<Microsoft.AspNetCore.JsonPatch.JsonPatchError>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: ApplyTo
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 643
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nApply this JsonPatchDocument \n"
  example: []
  syntax:
    content: public void ApplyTo(TModel objectToApplyTo, Action<JsonPatchError> logErrorAction)
    content.vb: Public Sub ApplyTo(objectToApplyTo As TModel, logErrorAction As Action(Of JsonPatchError))
    parameters:
    - id: objectToApplyTo
      type: '{TModel}'
      description: Object to apply the JsonPatchDocument to
    - id: logErrorAction
      type: System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError}
      description: Action to log errors
  nameWithType.vb: JsonPatchDocument(Of TModel).ApplyTo(TModel, Action(Of JsonPatchError))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).ApplyTo(TModel, System.Action(Of Microsoft.AspNetCore.JsonPatch.JsonPatchError))
  name.vb: ApplyTo(TModel, Action(Of JsonPatchError))
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
  id: ApplyTo(`0,Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: ApplyTo(TModel, IObjectAdapter)
  nameWithType: JsonPatchDocument<TModel>.ApplyTo(TModel, IObjectAdapter)
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.ApplyTo(TModel, Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: ApplyTo
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 658
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  summary: "\nApply this JsonPatchDocument  \n"
  example: []
  syntax:
    content: public void ApplyTo(TModel objectToApplyTo, IObjectAdapter adapter)
    content.vb: Public Sub ApplyTo(objectToApplyTo As TModel, adapter As IObjectAdapter)
    parameters:
    - id: objectToApplyTo
      type: '{TModel}'
      description: Object to apply the JsonPatchDocument to
    - id: adapter
      type: Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter
      description: IObjectAdapter instance to use when applying
  nameWithType.vb: JsonPatchDocument(Of TModel).ApplyTo(TModel, IObjectAdapter)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).ApplyTo(TModel, Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter)
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Microsoft#AspNetCore#JsonPatch#IJsonPatchDocument#GetOperations
  commentId: M:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1.Microsoft#AspNetCore#JsonPatch#IJsonPatchDocument#GetOperations
  id: Microsoft#AspNetCore#JsonPatch#IJsonPatchDocument#GetOperations
  isEii: true
  parent: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  langs:
  - csharp
  - vb
  name: IJsonPatchDocument.GetOperations()
  nameWithType: JsonPatchDocument<TModel>.IJsonPatchDocument.GetOperations()
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>.Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
      branch: master
      repo: https://github.com/aspnet/JsonPatch.git
    id: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
    path: src/Microsoft.AspNetCore.JsonPatch/JsonPatchDocumentOfT.cs
    startLine: 677
  assemblies:
  - Microsoft.AspNetCore.JsonPatch
  namespace: Microsoft.AspNetCore.JsonPatch
  syntax:
    content: IList<Operation> IJsonPatchDocument.GetOperations()
    content.vb: Function Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations As IList(Of Operation) Implements IJsonPatchDocument.GetOperations
    return:
      type: System.Collections.Generic.IList{Microsoft.AspNetCore.JsonPatch.Operations.Operation}
  implements:
  - Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
  nameWithType.vb: JsonPatchDocument(Of TModel).Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations()
  fullName.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel).Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations()
  name.vb: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations()
references:
- uid: Microsoft.AspNetCore.JsonPatch
  commentId: N:Microsoft.AspNetCore.JsonPatch
  isExternal: false
  name: Microsoft.AspNetCore.JsonPatch
  nameWithType: Microsoft.AspNetCore.JsonPatch
  fullName: Microsoft.AspNetCore.JsonPatch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
  commentId: T:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
  parent: Microsoft.AspNetCore.JsonPatch
  isExternal: false
  name: IJsonPatchDocument
  nameWithType: IJsonPatchDocument
  fullName: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{{TModel}}}
  commentId: T:System.Collections.Generic.List{Microsoft.AspNetCore.JsonPatch.Operations.Operation{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Operation<TModel>>
  nameWithType: List<Operation<TModel>>
  fullName: System.Collections.Generic.List<Microsoft.AspNetCore.JsonPatch.Operations.Operation<TModel>>
  nameWithType.vb: List(Of Operation(Of TModel))
  fullname.vb: System.Collections.Generic.List(Of Microsoft.AspNetCore.JsonPatch.Operations.Operation(Of TModel))
  name.vb: List(Of Operation(Of TModel))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.JsonPatch.Operations.Operation`1
    name: Operation
    nameWithType: Operation
    fullName: Microsoft.AspNetCore.JsonPatch.Operations.Operation
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.JsonPatch.Operations.Operation`1
    name: Operation
    nameWithType: Operation
    fullName: Microsoft.AspNetCore.JsonPatch.Operations.Operation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.ContractResolver
  commentId: P:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.ContractResolver
  parent: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
  isExternal: false
  name: ContractResolver
  nameWithType: IJsonPatchDocument.ContractResolver
  fullName: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.ContractResolver
- uid: Newtonsoft.Json.Serialization.IContractResolver
  commentId: T:Newtonsoft.Json.Serialization.IContractResolver
  parent: Newtonsoft.Json.Serialization
  isExternal: true
  name: IContractResolver
  nameWithType: IContractResolver
  fullName: Newtonsoft.Json.Serialization.IContractResolver
- uid: Newtonsoft.Json.Serialization
  commentId: N:Newtonsoft.Json.Serialization
  isExternal: false
  name: Newtonsoft.Json.Serialization
  nameWithType: Newtonsoft.Json.Serialization
  fullName: Newtonsoft.Json.Serialization
- uid: System.Linq.Expressions.Expression{System.Func{{TModel},{TProp}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModel, TProp>>
  nameWithType: Expression<Func<TModel, TProp>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModel, TProp>>
  nameWithType.vb: Expression(Of Func(Of TModel, TProp))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModel, TProp))
  name.vb: Expression(Of Func(Of TModel, TProp))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TProp}'
  commentId: '!:TProp'
  definition: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  commentId: T:Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
  parent: Microsoft.AspNetCore.JsonPatch
  isExternal: false
  name: JsonPatchDocument<TModel>
  nameWithType: JsonPatchDocument<TModel>
  fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TModel>
  nameWithType.vb: JsonPatchDocument(Of TModel)
  fullname.vb: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TModel)
  name.vb: JsonPatchDocument(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
    name: JsonPatchDocument
    nameWithType: JsonPatchDocument
    fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1
    name: JsonPatchDocument
    nameWithType: JsonPatchDocument
    fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchDocument
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: TProp
  isExternal: false
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: System.Linq.Expressions.Expression{System.Func{{TModel},System.Collections.Generic.IList{{TProp}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModel, IList<TProp>>>
  nameWithType: Expression<Func<TModel, IList<TProp>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModel, System.Collections.Generic.IList<TProp>>>
  nameWithType.vb: Expression(Of Func(Of TModel, IList(Of TProp)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModel, System.Collections.Generic.IList(Of TProp)))
  name.vb: Expression(Of Func(Of TModel, IList(Of TProp)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: TModel
  isExternal: false
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError}
  commentId: T:System.Action{Microsoft.AspNetCore.JsonPatch.JsonPatchError}
  parent: System
  definition: System.Action`1
  name: Action<JsonPatchError>
  nameWithType: Action<JsonPatchError>
  fullName: System.Action<Microsoft.AspNetCore.JsonPatch.JsonPatchError>
  nameWithType.vb: Action(Of JsonPatchError)
  fullname.vb: System.Action(Of Microsoft.AspNetCore.JsonPatch.JsonPatchError)
  name.vb: Action(Of JsonPatchError)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.JsonPatch.JsonPatchError
    name: JsonPatchError
    nameWithType: JsonPatchError
    fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.JsonPatch.JsonPatchError
    name: JsonPatchError
    nameWithType: JsonPatchError
    fullName: Microsoft.AspNetCore.JsonPatch.JsonPatchError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter
  commentId: T:Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter
  parent: Microsoft.AspNetCore.JsonPatch.Adapters
  isExternal: false
  name: IObjectAdapter
  nameWithType: IObjectAdapter
  fullName: Microsoft.AspNetCore.JsonPatch.Adapters.IObjectAdapter
- uid: Microsoft.AspNetCore.JsonPatch.Adapters
  commentId: N:Microsoft.AspNetCore.JsonPatch.Adapters
  isExternal: false
  name: Microsoft.AspNetCore.JsonPatch.Adapters
  nameWithType: Microsoft.AspNetCore.JsonPatch.Adapters
  fullName: Microsoft.AspNetCore.JsonPatch.Adapters
- uid: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
  commentId: M:Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
  parent: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument
  isExternal: false
  name: GetOperations()
  nameWithType: IJsonPatchDocument.GetOperations()
  fullName: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations()
  spec.csharp:
  - uid: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
    name: GetOperations
    nameWithType: IJsonPatchDocument.GetOperations
    fullName: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
    name: GetOperations
    nameWithType: IJsonPatchDocument.GetOperations
    fullName: Microsoft.AspNetCore.JsonPatch.IJsonPatchDocument.GetOperations
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{Microsoft.AspNetCore.JsonPatch.Operations.Operation}
  commentId: T:System.Collections.Generic.IList{Microsoft.AspNetCore.JsonPatch.Operations.Operation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Operation>
  nameWithType: IList<Operation>
  fullName: System.Collections.Generic.IList<Microsoft.AspNetCore.JsonPatch.Operations.Operation>
  nameWithType.vb: IList(Of Operation)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.AspNetCore.JsonPatch.Operations.Operation)
  name.vb: IList(Of Operation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.JsonPatch.Operations.Operation
    name: Operation
    nameWithType: Operation
    fullName: Microsoft.AspNetCore.JsonPatch.Operations.Operation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.JsonPatch.Operations.Operation
    name: Operation
    nameWithType: Operation
    fullName: Microsoft.AspNetCore.JsonPatch.Operations.Operation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
