### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  commentId: T:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  id: ScopeNode
  parent: Microsoft.AspNetCore.Diagnostics.Elm
  children:
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Children
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.EndTime
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Messages
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Name
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Parent
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.StartTime
  - Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.State
  langs:
  - csharp
  - vb
  name: ScopeNode
  nameWithType: ScopeNode
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: ScopeNode
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 5
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public class ScopeNode
    content.vb: Public Class ScopeNode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Parent
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Parent
  id: Parent
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ScopeNode.Parent
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Parent
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: Parent
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 7
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public ScopeNode Parent { get; set; }
    content.vb: Public Property Parent As ScopeNode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Children
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Children
  id: Children
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: ScopeNode.Children
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Children
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: Children
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 9
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public List<ScopeNode> Children { get; }
    content.vb: Public ReadOnly Property Children As List(Of ScopeNode)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Messages
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Messages
  id: Messages
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: Messages
  nameWithType: ScopeNode.Messages
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Messages
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: Messages
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public List<LogInfo> Messages { get; }
    content.vb: Public ReadOnly Property Messages As List(Of LogInfo)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.LogInfo}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.StartTime
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.StartTime
  id: StartTime
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: StartTime
  nameWithType: ScopeNode.StartTime
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.StartTime
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: StartTime
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public DateTimeOffset StartTime { get; set; }
    content.vb: Public Property StartTime As DateTimeOffset
    parameters: []
    return:
      type: System.DateTimeOffset
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.EndTime
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.EndTime
  id: EndTime
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: EndTime
  nameWithType: ScopeNode.EndTime
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.EndTime
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: EndTime
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public DateTimeOffset EndTime { get; set; }
    content.vb: Public Property EndTime As DateTimeOffset
    parameters: []
    return:
      type: System.DateTimeOffset
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.State
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.State
  id: State
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ScopeNode.State
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.State
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: State
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public object State { get; set; }
    content.vb: Public Property State As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Name
  commentId: P:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Name
  id: Name
  parent: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ScopeNode.Name
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
      branch: master
      repo: https://github.com/aspnet/Diagnostics.git
    id: Name
    path: src/Microsoft.AspNetCore.Diagnostics.Elm/ScopeNode.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Diagnostics.Elm
  namespace: Microsoft.AspNetCore.Diagnostics.Elm
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Diagnostics.Elm
  commentId: N:Microsoft.AspNetCore.Diagnostics.Elm
  isExternal: false
  name: Microsoft.AspNetCore.Diagnostics.Elm
  nameWithType: Microsoft.AspNetCore.Diagnostics.Elm
  fullName: Microsoft.AspNetCore.Diagnostics.Elm
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  commentId: T:Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  parent: Microsoft.AspNetCore.Diagnostics.Elm
  isExternal: false
  name: ScopeNode
  nameWithType: ScopeNode
  fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
- uid: System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode}
  commentId: T:System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ScopeNode>
  nameWithType: List<ScopeNode>
  fullName: System.Collections.Generic.List<Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode>
  nameWithType.vb: List(Of ScopeNode)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode)
  name.vb: List(Of ScopeNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
    name: ScopeNode
    nameWithType: ScopeNode
    fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
    name: ScopeNode
    nameWithType: ScopeNode
    fullName: Microsoft.AspNetCore.Diagnostics.Elm.ScopeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.LogInfo}
  commentId: T:System.Collections.Generic.List{Microsoft.AspNetCore.Diagnostics.Elm.LogInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<LogInfo>
  nameWithType: List<LogInfo>
  fullName: System.Collections.Generic.List<Microsoft.AspNetCore.Diagnostics.Elm.LogInfo>
  nameWithType.vb: List(Of LogInfo)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.AspNetCore.Diagnostics.Elm.LogInfo)
  name.vb: List(Of LogInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Diagnostics.Elm.LogInfo
    name: LogInfo
    nameWithType: LogInfo
    fullName: Microsoft.AspNetCore.Diagnostics.Elm.LogInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Diagnostics.Elm.LogInfo
    name: LogInfo
    nameWithType: LogInfo
    fullName: Microsoft.AspNetCore.Diagnostics.Elm.LogInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
