### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  commentId: T:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  id: HttpsConnectionFilterTests
  parent: Microsoft.AspNetCore.Server.KestrelTests
  children:
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.#ctor
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.AllowCertificateContinuesWhenNoCertificate
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CanReadAndWriteWithHttpsConnectionFilter
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContext
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContextIsNotDisposed
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ClientCertificateValidationGetsCalledWithNotNullParameters(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.Dispose
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.DoesNotSupportTls10
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.HttpsSchemePassedToRequestFeature
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RejectsConnectionOnSslPolicyErrorsWhenNoValidation(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RequireCertificateFailsWhenNoCertificate
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ThrowsWhenNoServerCertificateIsProvided
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.UsesProvidedServerCertificate
  - Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ValidationFailureRejectsConnection(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  langs:
  - csharp
  - vb
  name: HttpsConnectionFilterTests
  nameWithType: HttpsConnectionFilterTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: HttpsConnectionFilterTests
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: 'public class HttpsConnectionFilterTests : IDisposable'
    content.vb: >-
      Public Class HttpsConnectionFilterTests
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.#ctor
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: HttpsConnectionFilterTests()
  nameWithType: HttpsConnectionFilterTests.HttpsConnectionFilterTests()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.HttpsConnectionFilterTests()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: .ctor
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public HttpsConnectionFilterTests()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.Dispose
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: HttpsConnectionFilterTests.Dispose()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.Dispose()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Dispose
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CanReadAndWriteWithHttpsConnectionFilter
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CanReadAndWriteWithHttpsConnectionFilter
  id: CanReadAndWriteWithHttpsConnectionFilter
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: CanReadAndWriteWithHttpsConnectionFilter()
  nameWithType: HttpsConnectionFilterTests.CanReadAndWriteWithHttpsConnectionFilter()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CanReadAndWriteWithHttpsConnectionFilter()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: CanReadAndWriteWithHttpsConnectionFilter
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [ConditionalFact]

      [OSSkipCondition(OperatingSystems.Linux, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      [OSSkipCondition(OperatingSystems.MacOSX, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      public Task CanReadAndWriteWithHttpsConnectionFilter()
    content.vb: >-
      <ConditionalFact>

      <OSSkipCondition(OperatingSystems.Linux, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      <OSSkipCondition(OperatingSystems.MacOSX, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      Public Function CanReadAndWriteWithHttpsConnectionFilter As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RequireCertificateFailsWhenNoCertificate
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RequireCertificateFailsWhenNoCertificate
  id: RequireCertificateFailsWhenNoCertificate
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: RequireCertificateFailsWhenNoCertificate()
  nameWithType: HttpsConnectionFilterTests.RequireCertificateFailsWhenNoCertificate()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RequireCertificateFailsWhenNoCertificate()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RequireCertificateFailsWhenNoCertificate
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 81
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [ConditionalFact]

      [OSSkipCondition(OperatingSystems.Linux, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      [OSSkipCondition(OperatingSystems.MacOSX, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      public Task RequireCertificateFailsWhenNoCertificate()
    content.vb: >-
      <ConditionalFact>

      <OSSkipCondition(OperatingSystems.Linux, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      <OSSkipCondition(OperatingSystems.MacOSX, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      Public Function RequireCertificateFailsWhenNoCertificate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.AllowCertificateContinuesWhenNoCertificate
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.AllowCertificateContinuesWhenNoCertificate
  id: AllowCertificateContinuesWhenNoCertificate
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: AllowCertificateContinuesWhenNoCertificate()
  nameWithType: HttpsConnectionFilterTests.AllowCertificateContinuesWhenNoCertificate()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.AllowCertificateContinuesWhenNoCertificate()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AllowCertificateContinuesWhenNoCertificate
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 105
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [ConditionalFact]

      [OSSkipCondition(OperatingSystems.Linux, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      [OSSkipCondition(OperatingSystems.MacOSX, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      public Task AllowCertificateContinuesWhenNoCertificate()
    content.vb: >-
      <ConditionalFact>

      <OSSkipCondition(OperatingSystems.Linux, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      <OSSkipCondition(OperatingSystems.MacOSX, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      Public Function AllowCertificateContinuesWhenNoCertificate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ThrowsWhenNoServerCertificateIsProvided
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ThrowsWhenNoServerCertificateIsProvided
  id: ThrowsWhenNoServerCertificateIsProvided
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: ThrowsWhenNoServerCertificateIsProvided()
  nameWithType: HttpsConnectionFilterTests.ThrowsWhenNoServerCertificateIsProvided()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ThrowsWhenNoServerCertificateIsProvided()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ThrowsWhenNoServerCertificateIsProvided
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 135
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void ThrowsWhenNoServerCertificateIsProvided()
    content.vb: >-
      <Fact>

      Public Sub ThrowsWhenNoServerCertificateIsProvided
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.UsesProvidedServerCertificate
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.UsesProvidedServerCertificate
  id: UsesProvidedServerCertificate
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: UsesProvidedServerCertificate()
  nameWithType: HttpsConnectionFilterTests.UsesProvidedServerCertificate()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.UsesProvidedServerCertificate()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: UsesProvidedServerCertificate
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 144
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public Task UsesProvidedServerCertificate()
    content.vb: >-
      <Fact>

      Public Function UsesProvidedServerCertificate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContext
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContext
  id: CertificatePassedToHttpContext
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: CertificatePassedToHttpContext()
  nameWithType: HttpsConnectionFilterTests.CertificatePassedToHttpContext()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContext()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: CertificatePassedToHttpContext
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 170
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public Task CertificatePassedToHttpContext()
    content.vb: >-
      <Fact>

      Public Function CertificatePassedToHttpContext As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.HttpsSchemePassedToRequestFeature
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.HttpsSchemePassedToRequestFeature
  id: HttpsSchemePassedToRequestFeature
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: HttpsSchemePassedToRequestFeature()
  nameWithType: HttpsConnectionFilterTests.HttpsSchemePassedToRequestFeature()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.HttpsSchemePassedToRequestFeature()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: HttpsSchemePassedToRequestFeature
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 205
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [ConditionalFact]

      [OSSkipCondition(OperatingSystems.Linux, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      [OSSkipCondition(OperatingSystems.MacOSX, new string[]{}, SkipReason = "WinHttpHandler not available on non-Windows.")]

      public Task HttpsSchemePassedToRequestFeature()
    content.vb: >-
      <ConditionalFact>

      <OSSkipCondition(OperatingSystems.Linux, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      <OSSkipCondition(OperatingSystems.MacOSX, New String() {}, SkipReason:="WinHttpHandler not available on non-Windows.")>

      Public Function HttpsSchemePassedToRequestFeature As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.DoesNotSupportTls10
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.DoesNotSupportTls10
  id: DoesNotSupportTls10
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: DoesNotSupportTls10()
  nameWithType: HttpsConnectionFilterTests.DoesNotSupportTls10()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.DoesNotSupportTls10()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: DoesNotSupportTls10
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 230
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public Task DoesNotSupportTls10()
    content.vb: >-
      <Fact>

      Public Function DoesNotSupportTls10 As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ClientCertificateValidationGetsCalledWithNotNullParameters(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ClientCertificateValidationGetsCalledWithNotNullParameters(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  id: ClientCertificateValidationGetsCalledWithNotNullParameters(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: ClientCertificateValidationGetsCalledWithNotNullParameters(ClientCertificateMode)
  nameWithType: HttpsConnectionFilterTests.ClientCertificateValidationGetsCalledWithNotNullParameters(ClientCertificateMode)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ClientCertificateValidationGetsCalledWithNotNullParameters(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ClientCertificateValidationGetsCalledWithNotNullParameters
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 257
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{ClientCertificateMode.AllowCertificate})]

      [InlineData(new object[]{ClientCertificateMode.RequireCertificate})]

      public Task ClientCertificateValidationGetsCalledWithNotNullParameters(ClientCertificateMode mode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {ClientCertificateMode.AllowCertificate})>

      <InlineData(New Object() {ClientCertificateMode.RequireCertificate})>

      Public Function ClientCertificateValidationGetsCalledWithNotNullParameters(mode As ClientCertificateMode) As Task
    parameters:
    - id: mode
      type: Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ValidationFailureRejectsConnection(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ValidationFailureRejectsConnection(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  id: ValidationFailureRejectsConnection(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: ValidationFailureRejectsConnection(ClientCertificateMode)
  nameWithType: HttpsConnectionFilterTests.ValidationFailureRejectsConnection(ClientCertificateMode)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.ValidationFailureRejectsConnection(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ValidationFailureRejectsConnection
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 291
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{ClientCertificateMode.AllowCertificate})]

      [InlineData(new object[]{ClientCertificateMode.RequireCertificate})]

      public Task ValidationFailureRejectsConnection(ClientCertificateMode mode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {ClientCertificateMode.AllowCertificate})>

      <InlineData(New Object() {ClientCertificateMode.RequireCertificate})>

      Public Function ValidationFailureRejectsConnection(mode As ClientCertificateMode) As Task
    parameters:
    - id: mode
      type: Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RejectsConnectionOnSslPolicyErrorsWhenNoValidation(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RejectsConnectionOnSslPolicyErrorsWhenNoValidation(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  id: RejectsConnectionOnSslPolicyErrorsWhenNoValidation(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: RejectsConnectionOnSslPolicyErrorsWhenNoValidation(ClientCertificateMode)
  nameWithType: HttpsConnectionFilterTests.RejectsConnectionOnSslPolicyErrorsWhenNoValidation(ClientCertificateMode)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.RejectsConnectionOnSslPolicyErrorsWhenNoValidation(Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RejectsConnectionOnSslPolicyErrorsWhenNoValidation
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 317
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{ClientCertificateMode.AllowCertificate})]

      [InlineData(new object[]{ClientCertificateMode.RequireCertificate})]

      public Task RejectsConnectionOnSslPolicyErrorsWhenNoValidation(ClientCertificateMode mode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {ClientCertificateMode.AllowCertificate})>

      <InlineData(New Object() {ClientCertificateMode.RequireCertificate})>

      Public Function RejectsConnectionOnSslPolicyErrorsWhenNoValidation(mode As ClientCertificateMode) As Task
    parameters:
    - id: mode
      type: Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContextIsNotDisposed
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContextIsNotDisposed
  id: CertificatePassedToHttpContextIsNotDisposed
  parent: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests
  langs:
  - csharp
  - vb
  name: CertificatePassedToHttpContextIsNotDisposed()
  nameWithType: HttpsConnectionFilterTests.CertificatePassedToHttpContextIsNotDisposed()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.HttpsConnectionFilterTests.CertificatePassedToHttpContextIsNotDisposed()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: CertificatePassedToHttpContextIsNotDisposed
    path: test/Microsoft.AspNetCore.Server.KestrelTests/HttpsConnectionFilterTests.cs
    startLine: 342
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public Task CertificatePassedToHttpContextIsNotDisposed()
    content.vb: >-
      <Fact>

      Public Function CertificatePassedToHttpContextIsNotDisposed As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Server.KestrelTests
  commentId: N:Microsoft.AspNetCore.Server.KestrelTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.KestrelTests
  nameWithType: Microsoft.AspNetCore.Server.KestrelTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
  commentId: T:Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
  parent: Microsoft.AspNetCore.Server.Kestrel.Https
  isExternal: false
  name: ClientCertificateMode
  nameWithType: ClientCertificateMode
  fullName: Microsoft.AspNetCore.Server.Kestrel.Https.ClientCertificateMode
- uid: Microsoft.AspNetCore.Server.Kestrel.Https
  commentId: N:Microsoft.AspNetCore.Server.Kestrel.Https
  isExternal: false
  name: Microsoft.AspNetCore.Server.Kestrel.Https
  nameWithType: Microsoft.AspNetCore.Server.Kestrel.Https
  fullName: Microsoft.AspNetCore.Server.Kestrel.Https
