### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests
  commentId: T:Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests
  id: ChunkWriterTests
  parent: Microsoft.AspNetCore.Server.KestrelTests
  children:
  - Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests.ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(System.Int32,System.String)
  langs:
  - csharp
  - vb
  name: ChunkWriterTests
  nameWithType: ChunkWriterTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/ChunkWriterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ChunkWriterTests
    path: test/Microsoft.AspNetCore.Server.KestrelTests/ChunkWriterTests.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public class ChunkWriterTests
    content.vb: Public Class ChunkWriterTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests.ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(System.Int32,System.String)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests.ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(System.Int32,System.String)
  id: ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(System.Int32,System.String)
  parent: Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests
  langs:
  - csharp
  - vb
  name: ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(Int32, String)
  nameWithType: ChunkWriterTests.ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(Int32, String)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.ChunkWriterTests.ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/ChunkWriterTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros
    path: test/Microsoft.AspNetCore.Server.KestrelTests/ChunkWriterTests.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{1, "1\r\n"})]

      [InlineData(new object[]{10, "a\r\n"})]

      [InlineData(new object[]{8, "8\r\n"})]

      [InlineData(new object[]{16, "10\r\n"})]

      [InlineData(new object[]{128, "80\r\n"})]

      [InlineData(new object[]{256, "100\r\n"})]

      [InlineData(new object[]{2048, "800\r\n"})]

      [InlineData(new object[]{4096, "1000\r\n"})]

      [InlineData(new object[]{32768, "8000\r\n"})]

      [InlineData(new object[]{65536, "10000\r\n"})]

      [InlineData(new object[]{524288, "80000\r\n"})]

      [InlineData(new object[]{1048576, "100000\r\n"})]

      [InlineData(new object[]{8388608, "800000\r\n"})]

      [InlineData(new object[]{16777216, "1000000\r\n"})]

      [InlineData(new object[]{134217728, "8000000\r\n"})]

      [InlineData(new object[]{268435456, "10000000\r\n"})]

      [InlineData(new object[]{2147483647L, "7fffffff\r\n"})]

      public void ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(int dataCount, string expected)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {1, "1" & vbCrLf})>

      <InlineData(New Object() {10, "a" & vbCrLf})>

      <InlineData(New Object() {8, "8" & vbCrLf})>

      <InlineData(New Object() {16, "10" & vbCrLf})>

      <InlineData(New Object() {128, "80" & vbCrLf})>

      <InlineData(New Object() {256, "100" & vbCrLf})>

      <InlineData(New Object() {2048, "800" & vbCrLf})>

      <InlineData(New Object() {4096, "1000" & vbCrLf})>

      <InlineData(New Object() {32768, "8000" & vbCrLf})>

      <InlineData(New Object() {65536, "10000" & vbCrLf})>

      <InlineData(New Object() {524288, "80000" & vbCrLf})>

      <InlineData(New Object() {1048576, "100000" & vbCrLf})>

      <InlineData(New Object() {8388608, "800000" & vbCrLf})>

      <InlineData(New Object() {16777216, "1000000" & vbCrLf})>

      <InlineData(New Object() {134217728, "8000000" & vbCrLf})>

      <InlineData(New Object() {268435456, "10000000" & vbCrLf})>

      <InlineData(New Object() {2147483647L, "7fffffff" & vbCrLf})>

      Public Sub ChunkedPrefixMustBeHexCrLfWithoutLeadingZeros(dataCount As Integer, expected As String)
    parameters:
    - id: dataCount
      type: System.Int32
    - id: expected
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Server.KestrelTests
  commentId: N:Microsoft.AspNetCore.Server.KestrelTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.KestrelTests
  nameWithType: Microsoft.AspNetCore.Server.KestrelTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
