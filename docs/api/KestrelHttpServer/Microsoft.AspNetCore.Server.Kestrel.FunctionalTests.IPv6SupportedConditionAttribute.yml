### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute
  commentId: T:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute
  id: IPv6SupportedConditionAttribute
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  children:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.IsMet
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.SkipReason
  langs:
  - csharp
  - vb
  name: IPv6SupportedConditionAttribute
  nameWithType: IPv6SupportedConditionAttribute
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: IPv6SupportedConditionAttribute
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]

      public class IPv6SupportedConditionAttribute : Attribute, ITestCondition
    content.vb: >-
      <AttributeUsage(AttributeTargets.Method, AllowMultiple:=False)>

      Public Class IPv6SupportedConditionAttribute
          Inherits Attribute
          Implements ITestCondition
  inheritance:
  - System.Object
  - System.Attribute
  implements:
  - Microsoft.AspNetCore.Testing.xunit.ITestCondition
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 64
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.IsMet
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.IsMet
  id: IsMet
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute
  langs:
  - csharp
  - vb
  name: IsMet
  nameWithType: IPv6SupportedConditionAttribute.IsMet
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.IsMet
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: IsMet
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public bool IsMet { get; }
    content.vb: Public ReadOnly Property IsMet As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.AspNetCore.Testing.xunit.ITestCondition.IsMet
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.SkipReason
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.SkipReason
  id: SkipReason
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute
  langs:
  - csharp
  - vb
  name: SkipReason
  nameWithType: IPv6SupportedConditionAttribute.SkipReason
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.IPv6SupportedConditionAttribute.SkipReason
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: SkipReason
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/IPv6SupportedConditionAttribute.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public string SkipReason { get; }
    content.vb: Public ReadOnly Property SkipReason As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.AspNetCore.Testing.xunit.ITestCondition.SkipReason
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  commentId: N:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  nameWithType: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: Microsoft.AspNetCore.Testing.xunit.ITestCondition
  commentId: T:Microsoft.AspNetCore.Testing.xunit.ITestCondition
  parent: Microsoft.AspNetCore.Testing.xunit
  isExternal: true
  name: ITestCondition
  nameWithType: ITestCondition
  fullName: Microsoft.AspNetCore.Testing.xunit.ITestCondition
- uid: System.Attribute.Equals(System.Object)
  commentId: M:System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetHashCode
  commentId: M:System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: true
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Testing.xunit
  commentId: N:Microsoft.AspNetCore.Testing.xunit
  isExternal: false
  name: Microsoft.AspNetCore.Testing.xunit
  nameWithType: Microsoft.AspNetCore.Testing.xunit
  fullName: Microsoft.AspNetCore.Testing.xunit
- uid: Microsoft.AspNetCore.Testing.xunit.ITestCondition.IsMet
  commentId: P:Microsoft.AspNetCore.Testing.xunit.ITestCondition.IsMet
  parent: Microsoft.AspNetCore.Testing.xunit.ITestCondition
  isExternal: true
  name: IsMet
  nameWithType: ITestCondition.IsMet
  fullName: Microsoft.AspNetCore.Testing.xunit.ITestCondition.IsMet
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Testing.xunit.ITestCondition.SkipReason
  commentId: P:Microsoft.AspNetCore.Testing.xunit.ITestCondition.SkipReason
  parent: Microsoft.AspNetCore.Testing.xunit.ITestCondition
  isExternal: true
  name: SkipReason
  nameWithType: ITestCondition.SkipReason
  fullName: Microsoft.AspNetCore.Testing.xunit.ITestCondition.SkipReason
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
