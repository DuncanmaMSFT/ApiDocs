### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  commentId: T:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  id: MemoryPoolIteratorTests
  parent: Microsoft.AspNetCore.Server.KestrelTests
  children:
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.#ctor
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Dispose
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByte
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByteSlow
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownMethod(System.String,System.Char,System.Boolean,System.String)
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownVersion(System.String,System.Char,System.Boolean,System.String)
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.MemorySeek(System.String,System.String,System.Char,System.Int32)
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLong
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLongAtBlockBoundary(System.Int32)
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Put
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipAtBlockBoundary(System.Int32)
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
  - Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
  langs:
  - csharp
  - vb
  name: MemoryPoolIteratorTests
  nameWithType: MemoryPoolIteratorTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: MemoryPoolIteratorTests
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 8
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: 'public class MemoryPoolIteratorTests : IDisposable'
    content.vb: >-
      Public Class MemoryPoolIteratorTests
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.#ctor
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: MemoryPoolIteratorTests()
  nameWithType: MemoryPoolIteratorTests.MemoryPoolIteratorTests()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.MemoryPoolIteratorTests()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: .ctor
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public MemoryPoolIteratorTests()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Dispose
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MemoryPoolIteratorTests.Dispose()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Dispose()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Dispose
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByte
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByte
  id: FindFirstEqualByte
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: FindFirstEqualByte()
  nameWithType: MemoryPoolIteratorTests.FindFirstEqualByte()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByte()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: FindFirstEqualByte
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void FindFirstEqualByte()
    content.vb: >-
      <Fact>

      Public Sub FindFirstEqualByte
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByteSlow
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByteSlow
  id: FindFirstEqualByteSlow
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: FindFirstEqualByteSlow()
  nameWithType: MemoryPoolIteratorTests.FindFirstEqualByteSlow()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.FindFirstEqualByteSlow()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: FindFirstEqualByteSlow
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 42
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void FindFirstEqualByteSlow()
    content.vb: >-
      <Fact>

      Public Sub FindFirstEqualByteSlow
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.MemorySeek(System.String,System.String,System.Char,System.Int32)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.MemorySeek(System.String,System.String,System.Char,System.Int32)
  id: MemorySeek(System.String,System.String,System.Char,System.Int32)
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: MemorySeek(String, String, Char, Int32)
  nameWithType: MemoryPoolIteratorTests.MemorySeek(String, String, Char, Int32)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.MemorySeek(System.String, System.String, System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: MemorySeek
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"a", "a", 'a', 0})]

      [InlineData(new object[]{"ab", "a", 'a', 0})]

      [InlineData(new object[]{"aab", "a", 'a', 0})]

      [InlineData(new object[]{"acab", "a", 'a', 0})]

      [InlineData(new object[]{"acab", "c", 'c', 1})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "lo", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "ol", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "ll", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "lmr", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "rml", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyz", "mlr", 'l', 11})]

      [InlineData(new object[]{"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", 'l', 11})]

      [InlineData(new object[]{"aaaaaaaaaaalmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", 'l', 11})]

      [InlineData(new object[]{"aaaaaaaaaaacmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", 'm', 12})]

      [InlineData(new object[]{"aaaaaaaaaaarmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", 'r', 11})]

      [InlineData(new object[]{"/localhost:5000/PATH/%2FPATH2/ HTTP/1.1", " %?", '%', 21})]

      [InlineData(new object[]{"/localhost:5000/PATH/%2FPATH2/?key=value HTTP/1.1", " %?", '%', 21})]

      [InlineData(new object[]{"/localhost:5000/PATH/PATH2/?key=value HTTP/1.1", " %?", '?', 27})]

      [InlineData(new object[]{"/localhost:5000/PATH/PATH2/ HTTP/1.1", " %?", ' ', 27})]

      public void MemorySeek(string raw, string search, char expectResult, int expectIndex)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"a", "a", "a"c, 0})>

      <InlineData(New Object() {"ab", "a", "a"c, 0})>

      <InlineData(New Object() {"aab", "a", "a"c, 0})>

      <InlineData(New Object() {"acab", "a", "a"c, 0})>

      <InlineData(New Object() {"acab", "c", "c"c, 1})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "lo", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "ol", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "ll", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "lmr", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "rml", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyz", "mlr", "l"c, 11})>

      <InlineData(New Object() {"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", "l"c, 11})>

      <InlineData(New Object() {"aaaaaaaaaaalmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", "l"c, 11})>

      <InlineData(New Object() {"aaaaaaaaaaacmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", "m"c, 12})>

      <InlineData(New Object() {"aaaaaaaaaaarmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "lmr", "r"c, 11})>

      <InlineData(New Object() {"/localhost:5000/PATH/%2FPATH2/ HTTP/1.1", " %?", "%"c, 21})>

      <InlineData(New Object() {"/localhost:5000/PATH/%2FPATH2/?key=value HTTP/1.1", " %?", "%"c, 21})>

      <InlineData(New Object() {"/localhost:5000/PATH/PATH2/?key=value HTTP/1.1", " %?", "?"c, 27})>

      <InlineData(New Object() {"/localhost:5000/PATH/PATH2/ HTTP/1.1", " %?", " "c, 27})>

      Public Sub MemorySeek(raw As String, search As String, expectResult As Char, expectIndex As Integer)
    parameters:
    - id: raw
      type: System.String
    - id: search
      type: System.String
    - id: expectResult
      type: System.Char
    - id: expectIndex
      type: System.Int32
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Put
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Put
  id: Put
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: Put()
  nameWithType: MemoryPoolIteratorTests.Put()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.Put()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Put
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 122
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void Put()
    content.vb: >-
      <Fact>

      Public Sub Put
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLong
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLong
  id: PeekLong
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: PeekLong()
  nameWithType: MemoryPoolIteratorTests.PeekLong()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLong()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: PeekLong
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 185
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void PeekLong()
    content.vb: >-
      <Fact>

      Public Sub PeekLong
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLongAtBlockBoundary(System.Int32)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLongAtBlockBoundary(System.Int32)
  id: PeekLongAtBlockBoundary(System.Int32)
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: PeekLongAtBlockBoundary(Int32)
  nameWithType: MemoryPoolIteratorTests.PeekLongAtBlockBoundary(Int32)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.PeekLongAtBlockBoundary(System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: PeekLongAtBlockBoundary
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 206
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{1})]

      [InlineData(new object[]{2})]

      [InlineData(new object[]{3})]

      [InlineData(new object[]{4})]

      [InlineData(new object[]{5})]

      [InlineData(new object[]{6})]

      [InlineData(new object[]{7})]

      public void PeekLongAtBlockBoundary(int blockBytes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {1})>

      <InlineData(New Object() {2})>

      <InlineData(New Object() {3})>

      <InlineData(New Object() {4})>

      <InlineData(New Object() {5})>

      <InlineData(New Object() {6})>

      <InlineData(New Object() {7})>

      Public Sub PeekLongAtBlockBoundary(blockBytes As Integer)
    parameters:
    - id: blockBytes
      type: System.Int32
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipAtBlockBoundary(System.Int32)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipAtBlockBoundary(System.Int32)
  id: SkipAtBlockBoundary(System.Int32)
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: SkipAtBlockBoundary(Int32)
  nameWithType: MemoryPoolIteratorTests.SkipAtBlockBoundary(Int32)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipAtBlockBoundary(System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: SkipAtBlockBoundary
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 245
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{1})]

      [InlineData(new object[]{2})]

      [InlineData(new object[]{3})]

      [InlineData(new object[]{4})]

      [InlineData(new object[]{5})]

      [InlineData(new object[]{6})]

      [InlineData(new object[]{7})]

      [InlineData(new object[]{8})]

      [InlineData(new object[]{9})]

      public void SkipAtBlockBoundary(int blockBytes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {1})>

      <InlineData(New Object() {2})>

      <InlineData(New Object() {3})>

      <InlineData(New Object() {4})>

      <InlineData(New Object() {5})>

      <InlineData(New Object() {6})>

      <InlineData(New Object() {7})>

      <InlineData(New Object() {8})>

      <InlineData(New Object() {9})>

      Public Sub SkipAtBlockBoundary(blockBytes As Integer)
    parameters:
    - id: blockBytes
      type: System.Int32
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
  id: SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock()
  nameWithType: MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 287
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock()
    content.vb: >-
      <Fact>

      Public Sub SkipThrowsWhenSkippingMoreBytesThanAvailableInSingleBlock
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
  id: SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks()
  nameWithType: MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks()
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 302
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Fact]

      public void SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks()
    content.vb: >-
      <Fact>

      Public Sub SkipThrowsWhenSkippingMoreBytesThanAvailableInMultipleBlocks
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownMethod(System.String,System.Char,System.Boolean,System.String)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownMethod(System.String,System.Char,System.Boolean,System.String)
  id: GetsKnownMethod(System.String,System.Char,System.Boolean,System.String)
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: GetsKnownMethod(String, Char, Boolean, String)
  nameWithType: MemoryPoolIteratorTests.GetsKnownMethod(String, Char, Boolean, String)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownMethod(System.String, System.Char, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: GetsKnownMethod
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 321
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"CONNECT / HTTP/1.1", ' ', true, "CONNECT"})]

      [InlineData(new object[]{"DELETE / HTTP/1.1", ' ', true, "DELETE"})]

      [InlineData(new object[]{"GET / HTTP/1.1", ' ', true, "GET"})]

      [InlineData(new object[]{"HEAD / HTTP/1.1", ' ', true, "HEAD"})]

      [InlineData(new object[]{"PATCH / HTTP/1.1", ' ', true, "PATCH"})]

      [InlineData(new object[]{"POST / HTTP/1.1", ' ', true, "POST"})]

      [InlineData(new object[]{"PUT / HTTP/1.1", ' ', true, "PUT"})]

      [InlineData(new object[]{"OPTIONS / HTTP/1.1", ' ', true, "OPTIONS"})]

      [InlineData(new object[]{"TRACE / HTTP/1.1", ' ', true, "TRACE"})]

      [InlineData(new object[]{"GET/ HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"get / HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"GOT / HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"ABC / HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"PO / HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"PO ST / HTTP/1.1", ' ', false, null})]

      [InlineData(new object[]{"short ", ' ', false, null})]

      public void GetsKnownMethod(string input, char endChar, bool expectedResult, string expectedKnownString)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"CONNECT / HTTP/1.1", " "c, True, "CONNECT"})>

      <InlineData(New Object() {"DELETE / HTTP/1.1", " "c, True, "DELETE"})>

      <InlineData(New Object() {"GET / HTTP/1.1", " "c, True, "GET"})>

      <InlineData(New Object() {"HEAD / HTTP/1.1", " "c, True, "HEAD"})>

      <InlineData(New Object() {"PATCH / HTTP/1.1", " "c, True, "PATCH"})>

      <InlineData(New Object() {"POST / HTTP/1.1", " "c, True, "POST"})>

      <InlineData(New Object() {"PUT / HTTP/1.1", " "c, True, "PUT"})>

      <InlineData(New Object() {"OPTIONS / HTTP/1.1", " "c, True, "OPTIONS"})>

      <InlineData(New Object() {"TRACE / HTTP/1.1", " "c, True, "TRACE"})>

      <InlineData(New Object() {"GET/ HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"get / HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"GOT / HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"ABC / HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"PO / HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"PO ST / HTTP/1.1", " "c, False, Nothing})>

      <InlineData(New Object() {"short ", " "c, False, Nothing})>

      Public Sub GetsKnownMethod(input As String, endChar As Char, expectedResult As Boolean, expectedKnownString As String)
    parameters:
    - id: input
      type: System.String
    - id: endChar
      type: System.Char
    - id: expectedResult
      type: System.Boolean
    - id: expectedKnownString
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownVersion(System.String,System.Char,System.Boolean,System.String)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownVersion(System.String,System.Char,System.Boolean,System.String)
  id: GetsKnownVersion(System.String,System.Char,System.Boolean,System.String)
  parent: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests
  langs:
  - csharp
  - vb
  name: GetsKnownVersion(String, Char, Boolean, String)
  nameWithType: MemoryPoolIteratorTests.GetsKnownVersion(String, Char, Boolean, String)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.MemoryPoolIteratorTests.GetsKnownVersion(System.String, System.Char, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: GetsKnownVersion
    path: test/Microsoft.AspNetCore.Server.KestrelTests/MemoryPoolIteratorTests.cs
    startLine: 358
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"HTTP/1.0\r", '\r', true, "HTTP/1.0"})]

      [InlineData(new object[]{"HTTP/1.1\r", '\r', true, "HTTP/1.1"})]

      [InlineData(new object[]{"HTTP/3.0\r", '\r', false, null})]

      [InlineData(new object[]{"http/1.0\r", '\r', false, null})]

      [InlineData(new object[]{"http/1.1\r", '\r', false, null})]

      [InlineData(new object[]{"short ", ' ', false, null})]

      public void GetsKnownVersion(string input, char endChar, bool expectedResult, string expectedKnownString)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"HTTP/1.0" & vbCr, vbCr, True, "HTTP/1.0"})>

      <InlineData(New Object() {"HTTP/1.1" & vbCr, vbCr, True, "HTTP/1.1"})>

      <InlineData(New Object() {"HTTP/3.0" & vbCr, vbCr, False, Nothing})>

      <InlineData(New Object() {"http/1.0" & vbCr, vbCr, False, Nothing})>

      <InlineData(New Object() {"http/1.1" & vbCr, vbCr, False, Nothing})>

      <InlineData(New Object() {"short ", " "c, False, Nothing})>

      Public Sub GetsKnownVersion(input As String, endChar As Char, expectedResult As Boolean, expectedKnownString As String)
    parameters:
    - id: input
      type: System.String
    - id: endChar
      type: System.Char
    - id: expectedResult
      type: System.Boolean
    - id: expectedKnownString
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Server.KestrelTests
  commentId: N:Microsoft.AspNetCore.Server.KestrelTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.KestrelTests
  nameWithType: Microsoft.AspNetCore.Server.KestrelTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
