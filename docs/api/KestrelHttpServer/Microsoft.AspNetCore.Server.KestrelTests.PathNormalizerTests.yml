### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests
  commentId: T:Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests
  id: PathNormalizerTests
  parent: Microsoft.AspNetCore.Server.KestrelTests
  children:
  - Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests.RemovesDotSegments(System.String,System.String)
  langs:
  - csharp
  - vb
  name: PathNormalizerTests
  nameWithType: PathNormalizerTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/PathNormalizerTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: PathNormalizerTests
    path: test/Microsoft.AspNetCore.Server.KestrelTests/PathNormalizerTests.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: public class PathNormalizerTests
    content.vb: Public Class PathNormalizerTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests.RemovesDotSegments(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests.RemovesDotSegments(System.String,System.String)
  id: RemovesDotSegments(System.String,System.String)
  parent: Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests
  langs:
  - csharp
  - vb
  name: RemovesDotSegments(String, String)
  nameWithType: PathNormalizerTests.RemovesDotSegments(String, String)
  fullName: Microsoft.AspNetCore.Server.KestrelTests.PathNormalizerTests.RemovesDotSegments(System.String, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.KestrelTests/PathNormalizerTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RemovesDotSegments
    path: test/Microsoft.AspNetCore.Server.KestrelTests/PathNormalizerTests.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Server.KestrelTests
  namespace: Microsoft.AspNetCore.Server.KestrelTests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"/a", "/a"})]

      [InlineData(new object[]{"/a/", "/a/"})]

      [InlineData(new object[]{"/a/b", "/a/b"})]

      [InlineData(new object[]{"/a/b/", "/a/b/"})]

      [InlineData(new object[]{"/a", "/./a"})]

      [InlineData(new object[]{"/a", "/././a"})]

      [InlineData(new object[]{"/a", "/../a"})]

      [InlineData(new object[]{"/a", "/../../a"})]

      [InlineData(new object[]{"/a/b", "/a/./b"})]

      [InlineData(new object[]{"/b", "/a/../b"})]

      [InlineData(new object[]{"/a/", "/a/./"})]

      [InlineData(new object[]{"/a", "/a/."})]

      [InlineData(new object[]{"/", "/a/../b/../"})]

      [InlineData(new object[]{"/", "/a/../b/.."})]

      [InlineData(new object[]{"/b", "/a/../../b"})]

      [InlineData(new object[]{"/b/", "/a/../../b/"})]

      [InlineData(new object[]{"/b", "/a/.././../b"})]

      [InlineData(new object[]{"/b/", "/a/.././../b/"})]

      [InlineData(new object[]{"/a/d", "/a/b/c/./../../d"})]

      [InlineData(new object[]{"/a/d", "/./a/b/c/./../../d"})]

      [InlineData(new object[]{"/a/d", "/../a/b/c/./../../d"})]

      [InlineData(new object[]{"/a/d", "/./../a/b/c/./../../d"})]

      [InlineData(new object[]{"/a/d", "/.././a/b/c/./../../d"})]

      [InlineData(new object[]{"/.a", "/.a"})]

      [InlineData(new object[]{"/..a", "/..a"})]

      [InlineData(new object[]{"/...", "/..."})]

      [InlineData(new object[]{"/a/.../b", "/a/.../b"})]

      [InlineData(new object[]{"/b", "/a/../.../../b"})]

      [InlineData(new object[]{"/a/.b", "/a/.b"})]

      [InlineData(new object[]{"/a/..b", "/a/..b"})]

      [InlineData(new object[]{"/a/b.", "/a/b."})]

      [InlineData(new object[]{"/a/b..", "/a/b.."})]

      [InlineData(new object[]{"a/b", "a/b"})]

      [InlineData(new object[]{"a/c", "a/b/../c"})]

      [InlineData(new object[]{"*", "*"})]

      public void RemovesDotSegments(string expected, string input)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"/a", "/a"})>

      <InlineData(New Object() {"/a/", "/a/"})>

      <InlineData(New Object() {"/a/b", "/a/b"})>

      <InlineData(New Object() {"/a/b/", "/a/b/"})>

      <InlineData(New Object() {"/a", "/./a"})>

      <InlineData(New Object() {"/a", "/././a"})>

      <InlineData(New Object() {"/a", "/../a"})>

      <InlineData(New Object() {"/a", "/../../a"})>

      <InlineData(New Object() {"/a/b", "/a/./b"})>

      <InlineData(New Object() {"/b", "/a/../b"})>

      <InlineData(New Object() {"/a/", "/a/./"})>

      <InlineData(New Object() {"/a", "/a/."})>

      <InlineData(New Object() {"/", "/a/../b/../"})>

      <InlineData(New Object() {"/", "/a/../b/.."})>

      <InlineData(New Object() {"/b", "/a/../../b"})>

      <InlineData(New Object() {"/b/", "/a/../../b/"})>

      <InlineData(New Object() {"/b", "/a/.././../b"})>

      <InlineData(New Object() {"/b/", "/a/.././../b/"})>

      <InlineData(New Object() {"/a/d", "/a/b/c/./../../d"})>

      <InlineData(New Object() {"/a/d", "/./a/b/c/./../../d"})>

      <InlineData(New Object() {"/a/d", "/../a/b/c/./../../d"})>

      <InlineData(New Object() {"/a/d", "/./../a/b/c/./../../d"})>

      <InlineData(New Object() {"/a/d", "/.././a/b/c/./../../d"})>

      <InlineData(New Object() {"/.a", "/.a"})>

      <InlineData(New Object() {"/..a", "/..a"})>

      <InlineData(New Object() {"/...", "/..."})>

      <InlineData(New Object() {"/a/.../b", "/a/.../b"})>

      <InlineData(New Object() {"/b", "/a/../.../../b"})>

      <InlineData(New Object() {"/a/.b", "/a/.b"})>

      <InlineData(New Object() {"/a/..b", "/a/..b"})>

      <InlineData(New Object() {"/a/b.", "/a/b."})>

      <InlineData(New Object() {"/a/b..", "/a/b.."})>

      <InlineData(New Object() {"a/b", "a/b"})>

      <InlineData(New Object() {"a/c", "a/b/../c"})>

      <InlineData(New Object() {"*", "*"})>

      Public Sub RemovesDotSegments(expected As String, input As String)
    parameters:
    - id: expected
      type: System.String
    - id: input
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Server.KestrelTests
  commentId: N:Microsoft.AspNetCore.Server.KestrelTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.KestrelTests
  nameWithType: Microsoft.AspNetCore.Server.KestrelTests
  fullName: Microsoft.AspNetCore.Server.KestrelTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
