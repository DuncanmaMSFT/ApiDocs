### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  commentId: T:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  id: AddressRegistrationTests
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  children:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4Port80
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6Port80
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6ScopeId
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToDynamicPort
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv4AddressInUse
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv6AddressInUse
  langs:
  - csharp
  - vb
  name: AddressRegistrationTests
  nameWithType: AddressRegistrationTests
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationTests
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public class AddressRegistrationTests
    content.vb: Public Class AddressRegistrationTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  id: RegisterAddresses_IPv4_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisterAddresses_IPv4_Success(String, Func<IServerAddressesFeature, String[]>)
  nameWithType: AddressRegistrationTests.RegisterAddresses_IPv4_Success(String, Func<IServerAddressesFeature, String[]>)
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RegisterAddresses_IPv4_Success
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [Theory]

      [MemberData("AddressRegistrationDataIPv4", new object[]{})]

      public Task RegisterAddresses_IPv4_Success(string addressInput, Func<IServerAddressesFeature, string[]> testUrls)
    content.vb: >-
      <Theory>

      <MemberData("AddressRegistrationDataIPv4", New Object() {})>

      Public Function RegisterAddresses_IPv4_Success(addressInput As String, testUrls As Func(Of IServerAddressesFeature, String())) As Task
    parameters:
    - id: addressInput
      type: System.String
    - id: testUrls
      type: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: AddressRegistrationTests.RegisterAddresses_IPv4_Success(String, Func(Of IServerAddressesFeature, String()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: RegisterAddresses_IPv4_Success(String, Func(Of IServerAddressesFeature, String()))
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  id: RegisterAddresses_IPv4Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisterAddresses_IPv4Port80_Success(String, Func<IServerAddressesFeature, String[]>)
  nameWithType: AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(String, Func<IServerAddressesFeature, String[]>)
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RegisterAddresses_IPv4Port80_Success
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [ConditionalTheory]

      [MemberData("AddressRegistrationDataIPv4Port80", new object[]{})]

      public Task RegisterAddresses_IPv4Port80_Success(string addressInput, Func<IServerAddressesFeature, string[]> testUrls)
    content.vb: >-
      <ConditionalTheory>

      <MemberData("AddressRegistrationDataIPv4Port80", New Object() {})>

      Public Function RegisterAddresses_IPv4Port80_Success(addressInput As String, testUrls As Func(Of IServerAddressesFeature, String())) As Task
    parameters:
    - id: addressInput
      type: System.String
    - id: testUrls
      type: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(String, Func(Of IServerAddressesFeature, String()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4Port80_Success(System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: RegisterAddresses_IPv4Port80_Success(String, Func(Of IServerAddressesFeature, String()))
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  id: RegisterAddresses_IPv6_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisterAddresses_IPv6_Success(String, Func<IServerAddressesFeature, String[]>)
  nameWithType: AddressRegistrationTests.RegisterAddresses_IPv6_Success(String, Func<IServerAddressesFeature, String[]>)
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6_Success(System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RegisterAddresses_IPv6_Success
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [ConditionalTheory]

      [MemberData("AddressRegistrationDataIPv6", new object[]{})]

      public Task RegisterAddresses_IPv6_Success(string addressInput, Func<IServerAddressesFeature, string[]> testUrls)
    content.vb: >-
      <ConditionalTheory>

      <MemberData("AddressRegistrationDataIPv6", New Object() {})>

      Public Function RegisterAddresses_IPv6_Success(addressInput As String, testUrls As Func(Of IServerAddressesFeature, String())) As Task
    parameters:
    - id: addressInput
      type: System.String
    - id: testUrls
      type: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: AddressRegistrationTests.RegisterAddresses_IPv6_Success(String, Func(Of IServerAddressesFeature, String()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6_Success(System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: RegisterAddresses_IPv6_Success(String, Func(Of IServerAddressesFeature, String()))
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  id: RegisterAddresses_IPv6Port80_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisterAddresses_IPv6Port80_Success(String, Func<IServerAddressesFeature, String[]>)
  nameWithType: AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(String, Func<IServerAddressesFeature, String[]>)
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RegisterAddresses_IPv6Port80_Success
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [ConditionalTheory]

      [MemberData("AddressRegistrationDataIPv6Port80", new object[]{})]

      public Task RegisterAddresses_IPv6Port80_Success(string addressInput, Func<IServerAddressesFeature, string[]> testUrls)
    content.vb: >-
      <ConditionalTheory>

      <MemberData("AddressRegistrationDataIPv6Port80", New Object() {})>

      Public Function RegisterAddresses_IPv6Port80_Success(addressInput As String, testUrls As Func(Of IServerAddressesFeature, String())) As Task
    parameters:
    - id: addressInput
      type: System.String
    - id: testUrls
      type: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(String, Func(Of IServerAddressesFeature, String()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6Port80_Success(System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: RegisterAddresses_IPv6Port80_Success(String, Func(Of IServerAddressesFeature, String()))
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  id: RegisterAddresses_IPv6ScopeId_Success(System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]})
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisterAddresses_IPv6ScopeId_Success(String, Func<IServerAddressesFeature, String[]>)
  nameWithType: AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(String, Func<IServerAddressesFeature, String[]>)
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: RegisterAddresses_IPv6ScopeId_Success
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [ConditionalTheory]

      [MemberData("AddressRegistrationDataIPv6ScopeId", new object[]{})]

      [OSSkipCondition(OperatingSystems.Linux, new string[]{}, SkipReason = "HttpClient does not support IPv6 with scope ID on Linux (https://github.com/dotnet/corefx/issues/8235).")]

      [OSSkipCondition(OperatingSystems.MacOSX, new string[]{}, SkipReason = "HttpClient does not support IPv6 with scope ID on Mac (https://github.com/dotnet/corefx/issues/8235).")]

      public Task RegisterAddresses_IPv6ScopeId_Success(string addressInput, Func<IServerAddressesFeature, string[]> testUrls)
    content.vb: >-
      <ConditionalTheory>

      <MemberData("AddressRegistrationDataIPv6ScopeId", New Object() {})>

      <OSSkipCondition(OperatingSystems.Linux, New String() {}, SkipReason:="HttpClient does not support IPv6 with scope ID on Linux (https://github.com/dotnet/corefx/issues/8235).")>

      <OSSkipCondition(OperatingSystems.MacOSX, New String() {}, SkipReason:="HttpClient does not support IPv6 with scope ID on Mac (https://github.com/dotnet/corefx/issues/8235).")>

      Public Function RegisterAddresses_IPv6ScopeId_Success(addressInput As String, testUrls As Func(Of IServerAddressesFeature, String())) As Task
    parameters:
    - id: addressInput
      type: System.String
    - id: testUrls
      type: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(String, Func(Of IServerAddressesFeature, String()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv6ScopeId_Success(System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: RegisterAddresses_IPv6ScopeId_Success(String, Func(Of IServerAddressesFeature, String()))
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv4AddressInUse
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv4AddressInUse
  id: ThrowsWhenBindingLocalhostToIPv4AddressInUse
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: ThrowsWhenBindingLocalhostToIPv4AddressInUse()
  nameWithType: AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv4AddressInUse()
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv4AddressInUse()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ThrowsWhenBindingLocalhostToIPv4AddressInUse
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 87
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void ThrowsWhenBindingLocalhostToIPv4AddressInUse()
    content.vb: >-
      <Fact>

      Public Sub ThrowsWhenBindingLocalhostToIPv4AddressInUse
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv6AddressInUse
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv6AddressInUse
  id: ThrowsWhenBindingLocalhostToIPv6AddressInUse
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: ThrowsWhenBindingLocalhostToIPv6AddressInUse()
  nameWithType: AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv6AddressInUse()
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToIPv6AddressInUse()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ThrowsWhenBindingLocalhostToIPv6AddressInUse
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 93
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [ConditionalFact]

      public void ThrowsWhenBindingLocalhostToIPv6AddressInUse()
    content.vb: >-
      <ConditionalFact>

      Public Sub ThrowsWhenBindingLocalhostToIPv6AddressInUse
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToDynamicPort
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToDynamicPort
  id: ThrowsWhenBindingLocalhostToDynamicPort
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: ThrowsWhenBindingLocalhostToDynamicPort()
  nameWithType: AddressRegistrationTests.ThrowsWhenBindingLocalhostToDynamicPort()
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.ThrowsWhenBindingLocalhostToDynamicPort()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: ThrowsWhenBindingLocalhostToDynamicPort
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 100
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void ThrowsWhenBindingLocalhostToDynamicPort()
    content.vb: >-
      <Fact>

      Public Sub ThrowsWhenBindingLocalhostToDynamicPort
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4
  id: AddressRegistrationDataIPv4
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: AddressRegistrationDataIPv4
  nameWithType: AddressRegistrationTests.AddressRegistrationDataIPv4
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationDataIPv4
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 134
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public static TheoryData<string, Func<IServerAddressesFeature, string[]>> AddressRegistrationDataIPv4 { get; }
    content.vb: Public Shared ReadOnly Property AddressRegistrationDataIPv4 As TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4Port80
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4Port80
  id: AddressRegistrationDataIPv4Port80
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: AddressRegistrationDataIPv4Port80
  nameWithType: AddressRegistrationTests.AddressRegistrationDataIPv4Port80
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv4Port80
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationDataIPv4Port80
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 179
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public static TheoryData<string, Func<IServerAddressesFeature, string[]>> AddressRegistrationDataIPv4Port80 { get; }
    content.vb: Public Shared ReadOnly Property AddressRegistrationDataIPv4Port80 As TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6
  id: AddressRegistrationDataIPv6
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: AddressRegistrationDataIPv6
  nameWithType: AddressRegistrationTests.AddressRegistrationDataIPv6
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationDataIPv6
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 194
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public static TheoryData<string, Func<IServerAddressesFeature, string[]>> AddressRegistrationDataIPv6 { get; }
    content.vb: Public Shared ReadOnly Property AddressRegistrationDataIPv6 As TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6Port80
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6Port80
  id: AddressRegistrationDataIPv6Port80
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: AddressRegistrationDataIPv6Port80
  nameWithType: AddressRegistrationTests.AddressRegistrationDataIPv6Port80
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6Port80
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationDataIPv6Port80
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 238
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public static TheoryData<string, Func<IServerAddressesFeature, string[]>> AddressRegistrationDataIPv6Port80 { get; }
    content.vb: Public Shared ReadOnly Property AddressRegistrationDataIPv6Port80 As TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6ScopeId
  commentId: P:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6ScopeId
  id: AddressRegistrationDataIPv6ScopeId
  parent: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests
  langs:
  - csharp
  - vb
  name: AddressRegistrationDataIPv6ScopeId
  nameWithType: AddressRegistrationTests.AddressRegistrationDataIPv6ScopeId
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.AddressRegistrationDataIPv6ScopeId
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: AddressRegistrationDataIPv6ScopeId
    path: test/Microsoft.AspNetCore.Server.Kestrel.FunctionalTests/AddressRegistrationTests.cs
    startLine: 253
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  namespace: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  syntax:
    content: public static TheoryData<string, Func<IServerAddressesFeature, string[]>> AddressRegistrationDataIPv6ScopeId { get; }
    content.vb: Public Shared ReadOnly Property AddressRegistrationDataIPv6ScopeId As TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  commentId: N:Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  isExternal: false
  name: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  nameWithType: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
  fullName: Microsoft.AspNetCore.Server.Kestrel.FunctionalTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
  commentId: T:System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}
  parent: System
  definition: System.Func`2
  name: Func<IServerAddressesFeature, String[]>
  nameWithType: Func<IServerAddressesFeature, String[]>
  fullName: System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>
  nameWithType.vb: Func(Of IServerAddressesFeature, String())
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String())
  name.vb: Func(Of IServerAddressesFeature, String())
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    name: IServerAddressesFeature
    nameWithType: IServerAddressesFeature
    fullName: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    name: IServerAddressesFeature
    nameWithType: IServerAddressesFeature
    fullName: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  commentId: T:Xunit.TheoryData{System.String,System.Func{Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature,System.String[]}}
  parent: Xunit
  definition: Xunit.TheoryData`2
  name: TheoryData<String, Func<IServerAddressesFeature, String[]>>
  nameWithType: TheoryData<String, Func<IServerAddressesFeature, String[]>>
  fullName: Xunit.TheoryData<System.String, System.Func<Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String[]>>
  nameWithType.vb: TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
  fullname.vb: Xunit.TheoryData(Of System.String, System.Func(Of Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature, System.String()))
  name.vb: TheoryData(Of String, Func(Of IServerAddressesFeature, String()))
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    name: IServerAddressesFeature
    nameWithType: IServerAddressesFeature
    fullName: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    name: IServerAddressesFeature
    nameWithType: IServerAddressesFeature
    fullName: Microsoft.AspNetCore.Hosting.Server.Features.IServerAddressesFeature
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit.TheoryData`2
  commentId: T:Xunit.TheoryData`2
  isExternal: true
  name: TheoryData<T1, T2>
  nameWithType: TheoryData<T1, T2>
  fullName: Xunit.TheoryData<T1, T2>
  nameWithType.vb: TheoryData(Of T1, T2)
  fullname.vb: Xunit.TheoryData(Of T1, T2)
  name.vb: TheoryData(Of T1, T2)
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
