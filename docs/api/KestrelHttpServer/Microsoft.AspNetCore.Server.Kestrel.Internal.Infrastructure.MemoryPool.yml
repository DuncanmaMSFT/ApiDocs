### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  commentId: T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  id: MemoryPool
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  children:
  - Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose
  - Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose(System.Boolean)
  - Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Lease
  - Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.MaxPooledBlockLength
  - Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Return(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock)
  langs:
  - csharp
  - vb
  name: MemoryPool
  nameWithType: MemoryPool
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: MemoryPool
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 9
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  summary: "\nUsed to allocate and distribute re-usable blocks of memory.\n"
  example: []
  syntax:
    content: 'public class MemoryPool : IDisposable'
    content.vb: >-
      Public Class MemoryPool
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.MaxPooledBlockLength
  commentId: F:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.MaxPooledBlockLength
  id: MaxPooledBlockLength
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  langs:
  - csharp
  - vb
  name: MaxPooledBlockLength
  nameWithType: MemoryPool.MaxPooledBlockLength
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.MaxPooledBlockLength
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: MaxPooledBlockLength
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  summary: "\nMax allocation block size for pooled blocks, \nlarger values can be leased but they will be disposed after use rather than returned to the pool.\n"
  example: []
  syntax:
    content: public const int MaxPooledBlockLength = 4032
    content.vb: Public Const MaxPooledBlockLength As Integer = 4032
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Lease
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Lease
  id: Lease
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  langs:
  - csharp
  - vb
  name: Lease()
  nameWithType: MemoryPool.Lease()
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Lease()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Lease
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  summary: "\nCalled to take a block from the pool.\n"
  example: []
  syntax:
    content: public MemoryPoolBlock Lease()
    content.vb: Public Function Lease As MemoryPoolBlock
    return:
      type: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock
      description: The block that is reserved for the called. It must be passed to Return when it is no longer being used.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Return(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock)
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Return(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock)
  id: Return(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock)
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  langs:
  - csharp
  - vb
  name: Return(MemoryPoolBlock)
  nameWithType: MemoryPool.Return(MemoryPoolBlock)
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Return(Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Return
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 123
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  summary: "\nCalled to return a block to the pool. Once Return has been called the memory no longer belongs to the caller, and\nVery Bad Things will happen if the memory is read of modified subsequently. If a caller fails to call Return and the\nblock tracking object is garbage collected, the block tracking object's finalizer will automatically re-create and return\na new tracking object into the pool. This will only happen if there is a bug in the server, however it is necessary to avoid\nleaving \"dead zones\" in the slab due to lost block tracking objects.\n"
  example: []
  syntax:
    content: public void Return(MemoryPoolBlock block)
    content.vb: Public Sub Return(block As MemoryPoolBlock)
    parameters:
    - id: block
      type: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock
      description: The block to return. It must have been acquired by calling Lease on the same memory pool instance.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: MemoryPool.Dispose(Boolean)
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 134
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose
  commentId: M:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MemoryPool.Dispose()
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPool.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
      branch: master
      repo: https://github.com/aspnet/KestrelHttpServer.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Server.Kestrel/Internal/Infrastructure/MemoryPool.cs
    startLine: 168
  assemblies:
  - Microsoft.AspNetCore.Server.Kestrel
  namespace: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  commentId: N:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  isExternal: false
  name: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  nameWithType: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock
  commentId: T:Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock
  parent: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure
  isExternal: false
  name: MemoryPoolBlock
  nameWithType: MemoryPoolBlock
  fullName: Microsoft.AspNetCore.Server.Kestrel.Internal.Infrastructure.MemoryPoolBlock
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
