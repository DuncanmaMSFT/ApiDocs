### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  commentId: T:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  id: FileExtensionContentTypeProvider
  parent: Microsoft.AspNetCore.StaticFiles
  children:
  - Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor
  - Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
  - Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.Mappings
  - Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)
  langs:
  - csharp
  - vb
  name: FileExtensionContentTypeProvider
  nameWithType: FileExtensionContentTypeProvider
  fullName: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
      branch: master
      repo: https://github.com/aspnet/StaticFiles.git
    id: FileExtensionContentTypeProvider
    path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.StaticFiles
  namespace: Microsoft.AspNetCore.StaticFiles
  summary: "\nProvides a mapping between file extensions and MIME types.\n"
  example: []
  syntax:
    content: 'public class FileExtensionContentTypeProvider : IContentTypeProvider'
    content.vb: >-
      Public Class FileExtensionContentTypeProvider
          Implements IContentTypeProvider
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor
  commentId: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  langs:
  - csharp
  - vb
  name: FileExtensionContentTypeProvider()
  nameWithType: FileExtensionContentTypeProvider.FileExtensionContentTypeProvider()
  fullName: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.FileExtensionContentTypeProvider()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
      branch: master
      repo: https://github.com/aspnet/StaticFiles.git
    id: .ctor
    path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.StaticFiles
  namespace: Microsoft.AspNetCore.StaticFiles
  summary: "\nCreates a new provider with a set of default mappings.\n"
  example: []
  syntax:
    content: public FileExtensionContentTypeProvider()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.String})'
  parent: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  langs:
  - csharp
  - vb
  name: FileExtensionContentTypeProvider(IDictionary<String, String>)
  nameWithType: FileExtensionContentTypeProvider.FileExtensionContentTypeProvider(IDictionary<String, String>)
  fullName: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.FileExtensionContentTypeProvider(System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
      branch: master
      repo: https://github.com/aspnet/StaticFiles.git
    id: .ctor
    path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
    startLine: 407
  assemblies:
  - Microsoft.AspNetCore.StaticFiles
  namespace: Microsoft.AspNetCore.StaticFiles
  summary: "\nCreates a lookup engine using the provided mapping.\nIt is recommended that the IDictionary instance use StringComparer.OrdinalIgnoreCase.\n"
  example: []
  syntax:
    content: public FileExtensionContentTypeProvider(IDictionary<string, string> mapping)
    content.vb: Public Sub New(mapping As IDictionary(Of String, String))
    parameters:
    - id: mapping
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: ''
  nameWithType.vb: FileExtensionContentTypeProvider.FileExtensionContentTypeProvider(IDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.FileExtensionContentTypeProvider(System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: FileExtensionContentTypeProvider(IDictionary(Of String, String))
- uid: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.Mappings
  commentId: P:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.Mappings
  id: Mappings
  parent: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  langs:
  - csharp
  - vb
  name: Mappings
  nameWithType: FileExtensionContentTypeProvider.Mappings
  fullName: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.Mappings
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
      branch: master
      repo: https://github.com/aspnet/StaticFiles.git
    id: Mappings
    path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
    startLine: 419
  assemblies:
  - Microsoft.AspNetCore.StaticFiles
  namespace: Microsoft.AspNetCore.StaticFiles
  summary: "\nThe cross reference table of file extensions and content-types.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> Mappings { get; }
    content.vb: Public ReadOnly Property Mappings As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)
  commentId: M:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String,System.String@)
  id: TryGetContentType(System.String,System.String@)
  parent: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider
  langs:
  - csharp
  - vb
  name: TryGetContentType(String, out String)
  nameWithType: FileExtensionContentTypeProvider.TryGetContentType(String, out String)
  fullName: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String, out System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
      branch: master
      repo: https://github.com/aspnet/StaticFiles.git
    id: TryGetContentType
    path: src/Microsoft.AspNetCore.StaticFiles/FileExtensionContentTypeProvider.cs
    startLine: 427
  assemblies:
  - Microsoft.AspNetCore.StaticFiles
  namespace: Microsoft.AspNetCore.StaticFiles
  summary: "\nGiven a file path, determine the MIME type\n"
  example: []
  syntax:
    content: public bool TryGetContentType(string subpath, out string contentType)
    content.vb: Public Function TryGetContentType(subpath As String, ByRef contentType As String) As Boolean
    parameters:
    - id: subpath
      type: System.String
      description: A file path
    - id: contentType
      type: System.String
      description: The resulting MIME type
    return:
      type: System.Boolean
      description: True if MIME type could be determined
  implements:
  - Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
  nameWithType.vb: FileExtensionContentTypeProvider.TryGetContentType(String, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider.TryGetContentType(System.String, ByRef System.String)
  name.vb: TryGetContentType(String, ByRef String)
references:
- uid: Microsoft.AspNetCore.StaticFiles
  commentId: N:Microsoft.AspNetCore.StaticFiles
  isExternal: false
  name: Microsoft.AspNetCore.StaticFiles
  nameWithType: Microsoft.AspNetCore.StaticFiles
  fullName: Microsoft.AspNetCore.StaticFiles
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
  commentId: T:Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
  parent: Microsoft.AspNetCore.StaticFiles
  isExternal: false
  name: IContentTypeProvider
  nameWithType: IContentTypeProvider
  fullName: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
  commentId: M:Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
  parent: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider
  isExternal: true
  name: TryGetContentType(String, String)
  nameWithType: IContentTypeProvider.TryGetContentType(String, String)
  fullName: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
    name: TryGetContentType
    nameWithType: IContentTypeProvider.TryGetContentType
    fullName: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)
    name: TryGetContentType
    nameWithType: IContentTypeProvider.TryGetContentType
    fullName: Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
