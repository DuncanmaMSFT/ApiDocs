### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest
  commentId: T:Microsoft.Extensions.Configuration.JsonConfigurationTest
  id: JsonConfigurationTest
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Throws_On_Missing_Configuration_File
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadKeyValuePairsFromValidJson
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadMethodCanHandleEmptyValue
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.NonObjectRootIsInvalid
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.SupportAndIgnoreComments
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingEmptyStringAsFilePath
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingNullAsFilePath
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
  - Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowFormatExceptionWhenFileIsEmpty
  langs:
  - csharp
  - vb
  name: JsonConfigurationTest
  nameWithType: JsonConfigurationTest
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: JsonConfigurationTest
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: public class JsonConfigurationTest
    content.vb: Public Class JsonConfigurationTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadKeyValuePairsFromValidJson
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadKeyValuePairsFromValidJson
  id: LoadKeyValuePairsFromValidJson
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: LoadKeyValuePairsFromValidJson()
  nameWithType: JsonConfigurationTest.LoadKeyValuePairsFromValidJson()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadKeyValuePairsFromValidJson()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: LoadKeyValuePairsFromValidJson
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void LoadKeyValuePairsFromValidJson()
    content.vb: >-
      <Fact>

      Public Sub LoadKeyValuePairsFromValidJson
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadMethodCanHandleEmptyValue
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadMethodCanHandleEmptyValue
  id: LoadMethodCanHandleEmptyValue
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: LoadMethodCanHandleEmptyValue()
  nameWithType: JsonConfigurationTest.LoadMethodCanHandleEmptyValue()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.LoadMethodCanHandleEmptyValue()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: LoadMethodCanHandleEmptyValue
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 41
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void LoadMethodCanHandleEmptyValue()
    content.vb: >-
      <Fact>

      Public Sub LoadMethodCanHandleEmptyValue
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.NonObjectRootIsInvalid
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.NonObjectRootIsInvalid
  id: NonObjectRootIsInvalid
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: NonObjectRootIsInvalid()
  nameWithType: JsonConfigurationTest.NonObjectRootIsInvalid()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.NonObjectRootIsInvalid()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: NonObjectRootIsInvalid
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 52
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void NonObjectRootIsInvalid()
    content.vb: >-
      <Fact>

      Public Sub NonObjectRootIsInvalid
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.SupportAndIgnoreComments
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.SupportAndIgnoreComments
  id: SupportAndIgnoreComments
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: SupportAndIgnoreComments()
  nameWithType: JsonConfigurationTest.SupportAndIgnoreComments()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.SupportAndIgnoreComments()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: SupportAndIgnoreComments
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 63
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void SupportAndIgnoreComments()
    content.vb: >-
      <Fact>

      Public Sub SupportAndIgnoreComments
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
  id: ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing()
  nameWithType: JsonConfigurationTest.ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 80
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing()
    content.vb: >-
      <Fact>

      Public Sub ThrowExceptionWhenUnexpectedEndFoundBeforeFinishParsing
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingNullAsFilePath
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingNullAsFilePath
  id: ThrowExceptionWhenPassingNullAsFilePath
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: ThrowExceptionWhenPassingNullAsFilePath()
  nameWithType: JsonConfigurationTest.ThrowExceptionWhenPassingNullAsFilePath()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingNullAsFilePath()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ThrowExceptionWhenPassingNullAsFilePath
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 94
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void ThrowExceptionWhenPassingNullAsFilePath()
    content.vb: >-
      <Fact>

      Public Sub ThrowExceptionWhenPassingNullAsFilePath
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingEmptyStringAsFilePath
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingEmptyStringAsFilePath
  id: ThrowExceptionWhenPassingEmptyStringAsFilePath
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: ThrowExceptionWhenPassingEmptyStringAsFilePath()
  nameWithType: JsonConfigurationTest.ThrowExceptionWhenPassingEmptyStringAsFilePath()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowExceptionWhenPassingEmptyStringAsFilePath()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ThrowExceptionWhenPassingEmptyStringAsFilePath
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 104
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void ThrowExceptionWhenPassingEmptyStringAsFilePath()
    content.vb: >-
      <Fact>

      Public Sub ThrowExceptionWhenPassingEmptyStringAsFilePath
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Throws_On_Missing_Configuration_File
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Throws_On_Missing_Configuration_File
  id: JsonConfiguration_Throws_On_Missing_Configuration_File
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: JsonConfiguration_Throws_On_Missing_Configuration_File()
  nameWithType: JsonConfigurationTest.JsonConfiguration_Throws_On_Missing_Configuration_File()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Throws_On_Missing_Configuration_File()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: JsonConfiguration_Throws_On_Missing_Configuration_File
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 114
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void JsonConfiguration_Throws_On_Missing_Configuration_File()
    content.vb: >-
      <Fact>

      Public Sub JsonConfiguration_Throws_On_Missing_Configuration_File
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
  id: JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: JsonConfiguration_Does_Not_Throw_On_Optional_Configuration()
  nameWithType: JsonConfigurationTest.JsonConfiguration_Does_Not_Throw_On_Optional_Configuration()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.JsonConfiguration_Does_Not_Throw_On_Optional_Configuration()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 124
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void JsonConfiguration_Does_Not_Throw_On_Optional_Configuration()
    content.vb: >-
      <Fact>

      Public Sub JsonConfiguration_Does_Not_Throw_On_Optional_Configuration
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowFormatExceptionWhenFileIsEmpty
  commentId: M:Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowFormatExceptionWhenFileIsEmpty
  id: ThrowFormatExceptionWhenFileIsEmpty
  parent: Microsoft.Extensions.Configuration.JsonConfigurationTest
  langs:
  - csharp
  - vb
  name: ThrowFormatExceptionWhenFileIsEmpty()
  nameWithType: JsonConfigurationTest.ThrowFormatExceptionWhenFileIsEmpty()
  fullName: Microsoft.Extensions.Configuration.JsonConfigurationTest.ThrowFormatExceptionWhenFileIsEmpty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ThrowFormatExceptionWhenFileIsEmpty
    path: test/Microsoft.Extensions.Configuration.Json.Test/JsonConfigurationTest.cs
    startLine: 130
  assemblies:
  - Microsoft.Extensions.Configuration.Json.Test
  namespace: Microsoft.Extensions.Configuration
  syntax:
    content: >-
      [Fact]

      public void ThrowFormatExceptionWhenFileIsEmpty()
    content.vb: >-
      <Fact>

      Public Sub ThrowFormatExceptionWhenFileIsEmpty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
