### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.ConfigurationPath
  commentId: T:Microsoft.Extensions.Configuration.ConfigurationPath
  id: ConfigurationPath
  parent: Microsoft.Extensions.Configuration
  children:
  - Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  - Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  - Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  langs:
  - csharp
  - vb
  name: ConfigurationPath
  nameWithType: ConfigurationPath
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationPath
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nUtility methods and constants for manipulating Configuration paths\n"
  example: []
  syntax:
    content: public static class ConfigurationPath
    content.vb: Public Module ConfigurationPath
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  commentId: F:Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  id: KeyDelimiter
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: KeyDelimiter
  nameWithType: ConfigurationPath.KeyDelimiter
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.KeyDelimiter
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: KeyDelimiter
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nThe delimiter \":\" used to separate individual keys in a path.\n"
  example: []
  syntax:
    content: public static readonly string KeyDelimiter
    content.vb: Public Shared ReadOnly KeyDelimiter As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  id: Combine(System.String[])
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: Combine(String[])
  nameWithType: ConfigurationPath.Combine(String[])
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Combine
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nCombines path segments into one path.\n"
  example: []
  syntax:
    content: public static string Combine(params string[] pathSegments)
    content.vb: Public Shared Function Combine(ParamArray pathSegments As String()) As String
    parameters:
    - id: pathSegments
      type: System.String[]
      description: The path segments to combine.
    return:
      type: System.String
      description: The combined path.
  nameWithType.vb: ConfigurationPath.Combine(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.String())
  name.vb: Combine(String())
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable{System.String})
  id: Combine(System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: Combine(IEnumerable<String>)
  nameWithType: ConfigurationPath.Combine(IEnumerable<String>)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: Combine
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nCombines path segments into one path.\n"
  example: []
  syntax:
    content: public static string Combine(IEnumerable<string> pathSegments)
    content.vb: Public Shared Function Combine(pathSegments As IEnumerable(Of String)) As String
    parameters:
    - id: pathSegments
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The path segments to combine.
    return:
      type: System.String
      description: The combined path.
  nameWithType.vb: ConfigurationPath.Combine(IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Configuration.ConfigurationPath.Combine(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Combine(IEnumerable(Of String))
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  id: GetSectionKey(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: GetSectionKey(String)
  nameWithType: ConfigurationPath.GetSectionKey(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetSectionKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetSectionKey
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 51
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the last path segment from the path.\n"
  example: []
  syntax:
    content: public static string GetSectionKey(string path)
    content.vb: Public Shared Function GetSectionKey(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The last path segment of the path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  commentId: M:Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  id: GetParentPath(System.String)
  parent: Microsoft.Extensions.Configuration.ConfigurationPath
  langs:
  - csharp
  - vb
  name: GetParentPath(String)
  nameWithType: ConfigurationPath.GetParentPath(String)
  fullName: Microsoft.Extensions.Configuration.ConfigurationPath.GetParentPath(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetParentPath
    path: src/Microsoft.Extensions.Configuration.Abstractions/ConfigurationPath.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Configuration.Abstractions
  namespace: Microsoft.Extensions.Configuration
  summary: "\nExtracts the path corresponding to the parent node for a given path.\n"
  example: []
  syntax:
    content: public static string GetParentPath(string path)
    content.vb: Public Shared Function GetParentPath(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The original path minus the last individual segment found in it. Null if the original path corresponds to a top level node.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
