### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  commentId: T:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  id: ConfigurationBinderTests
  parent: Microsoft.Extensions.Configuration.Binder.Test
  children:
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadComplexProperties
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadInheritedProperties
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadStaticProperty
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BinderIgnoresIndexerProperties
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindIgnoresTests(System.String)
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSection
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSectionWithDerivedOptionsSection
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanReadAllSupportedTypes(System.String,System.Type)
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ConsistentExceptionOnFailedBinding(System.Type)
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionIncludesKeyOfFailedBinding
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToInterface
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToTypeThrowsWhenActivated
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadComplexProperties
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadInheritedProperties
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadStaticProperty
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetDefaultsWhenDataDoesNotExist
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetIgnoresTests(System.String)
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetNullValue
  - Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetScalarNullable
  langs:
  - csharp
  - vb
  name: ConfigurationBinderTests
  nameWithType: ConfigurationBinderTests
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConfigurationBinderTests
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: public class ConfigurationBinderTests
    content.vb: Public Class ConfigurationBinderTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSection
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSection
  id: CanBindIConfigurationSection
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: CanBindIConfigurationSection()
  nameWithType: ConfigurationBinderTests.CanBindIConfigurationSection()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSection()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: CanBindIConfigurationSection
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 85
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void CanBindIConfigurationSection()
    content.vb: >-
      <Fact>

      Public Sub CanBindIConfigurationSection
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSectionWithDerivedOptionsSection
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSectionWithDerivedOptionsSection
  id: CanBindIConfigurationSectionWithDerivedOptionsSection
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: CanBindIConfigurationSectionWithDerivedOptionsSection()
  nameWithType: ConfigurationBinderTests.CanBindIConfigurationSectionWithDerivedOptionsSection()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanBindIConfigurationSectionWithDerivedOptionsSection()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: CanBindIConfigurationSectionWithDerivedOptionsSection
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 115
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void CanBindIConfigurationSectionWithDerivedOptionsSection()
    content.vb: >-
      <Fact>

      Public Sub CanBindIConfigurationSectionWithDerivedOptionsSection
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetScalarNullable
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetScalarNullable
  id: GetScalarNullable
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetScalarNullable()
  nameWithType: ConfigurationBinderTests.GetScalarNullable()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetScalarNullable()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetScalarNullable
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 155
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetScalarNullable()
    content.vb: >-
      <Fact>

      Public Sub GetScalarNullable
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetNullValue
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetNullValue
  id: GetNullValue
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetNullValue()
  nameWithType: ConfigurationBinderTests.GetNullValue()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetNullValue()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetNullValue
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 173
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetNullValue()
    content.vb: >-
      <Fact>

      Public Sub GetNullValue
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetDefaultsWhenDataDoesNotExist
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetDefaultsWhenDataDoesNotExist
  id: GetDefaultsWhenDataDoesNotExist
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetDefaultsWhenDataDoesNotExist()
  nameWithType: ConfigurationBinderTests.GetDefaultsWhenDataDoesNotExist()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetDefaultsWhenDataDoesNotExist()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetDefaultsWhenDataDoesNotExist
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 193
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetDefaultsWhenDataDoesNotExist()
    content.vb: >-
      <Fact>

      Public Sub GetDefaultsWhenDataDoesNotExist
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanReadAllSupportedTypes(System.String,System.Type)
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanReadAllSupportedTypes(System.String,System.Type)
  id: CanReadAllSupportedTypes(System.String,System.Type)
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: CanReadAllSupportedTypes(String, Type)
  nameWithType: ConfigurationBinderTests.CanReadAllSupportedTypes(String, Type)
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.CanReadAllSupportedTypes(System.String, System.Type)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: CanReadAllSupportedTypes
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 232
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"2147483647", typeof (int)})]

      [InlineData(new object[]{"4294967295", typeof (uint)})]

      [InlineData(new object[]{"32767", typeof (short)})]

      [InlineData(new object[]{"65535", typeof (ushort)})]

      [InlineData(new object[]{"-9223372036854775808", typeof (long)})]

      [InlineData(new object[]{"18446744073709551615", typeof (ulong)})]

      [InlineData(new object[]{"trUE", typeof (bool)})]

      [InlineData(new object[]{"255", typeof (byte)})]

      [InlineData(new object[]{"127", typeof (sbyte)})]

      [InlineData(new object[]{"\uffff", typeof (char)})]

      [InlineData(new object[]{"79228162514264337593543950335", typeof (decimal)})]

      [InlineData(new object[]{"1.79769e+308", typeof (double)})]

      [InlineData(new object[]{"3.40282347E+38", typeof (float)})]

      [InlineData(new object[]{"2015-12-24T07:34:42-5:00", typeof (DateTime)})]

      [InlineData(new object[]{"12/24/2015 13:44:55 +4", typeof (DateTimeOffset)})]

      [InlineData(new object[]{"99.22:22:22.1234567", typeof (TimeSpan)})]

      [InlineData(new object[]{"Constructor", typeof (AttributeTargets)})]

      [InlineData(new object[]{"CA761232-ED42-11CE-BACD-00AA0057B223", typeof (Guid)})]

      public void CanReadAllSupportedTypes(string value, Type type)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"2147483647", GetType(Integer)})>

      <InlineData(New Object() {"4294967295", GetType(UInteger)})>

      <InlineData(New Object() {"32767", GetType(Short)})>

      <InlineData(New Object() {"65535", GetType(UShort)})>

      <InlineData(New Object() {"-9223372036854775808", GetType(Long)})>

      <InlineData(New Object() {"18446744073709551615", GetType(ULong)})>

      <InlineData(New Object() {"trUE", GetType(Boolean)})>

      <InlineData(New Object() {"255", GetType(Byte)})>

      <InlineData(New Object() {"127", GetType(SByte)})>

      <InlineData(New Object() {ChrW(65535), GetType(Char)})>

      <InlineData(New Object() {"79228162514264337593543950335", GetType(Decimal)})>

      <InlineData(New Object() {"1.79769e+308", GetType(Double)})>

      <InlineData(New Object() {"3.40282347E+38", GetType(Single)})>

      <InlineData(New Object() {"2015-12-24T07:34:42-5:00", GetType(Date)})>

      <InlineData(New Object() {"12/24/2015 13:44:55 +4", GetType(DateTimeOffset)})>

      <InlineData(New Object() {"99.22:22:22.1234567", GetType(TimeSpan)})>

      <InlineData(New Object() {"Constructor", GetType(AttributeTargets)})>

      <InlineData(New Object() {"CA761232-ED42-11CE-BACD-00AA0057B223", GetType(Guid)})>

      Public Sub CanReadAllSupportedTypes(value As String, type As Type)
    parameters:
    - id: value
      type: System.String
    - id: type
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ConsistentExceptionOnFailedBinding(System.Type)
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ConsistentExceptionOnFailedBinding(System.Type)
  id: ConsistentExceptionOnFailedBinding(System.Type)
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: ConsistentExceptionOnFailedBinding(Type)
  nameWithType: ConfigurationBinderTests.ConsistentExceptionOnFailedBinding(Type)
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ConsistentExceptionOnFailedBinding(System.Type)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ConsistentExceptionOnFailedBinding
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 280
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{typeof (int)})]

      [InlineData(new object[]{typeof (uint)})]

      [InlineData(new object[]{typeof (short)})]

      [InlineData(new object[]{typeof (ushort)})]

      [InlineData(new object[]{typeof (long)})]

      [InlineData(new object[]{typeof (ulong)})]

      [InlineData(new object[]{typeof (bool)})]

      [InlineData(new object[]{typeof (byte)})]

      [InlineData(new object[]{typeof (sbyte)})]

      [InlineData(new object[]{typeof (char)})]

      [InlineData(new object[]{typeof (decimal)})]

      [InlineData(new object[]{typeof (double)})]

      [InlineData(new object[]{typeof (float)})]

      [InlineData(new object[]{typeof (DateTime)})]

      [InlineData(new object[]{typeof (DateTimeOffset)})]

      [InlineData(new object[]{typeof (TimeSpan)})]

      [InlineData(new object[]{typeof (AttributeTargets)})]

      [InlineData(new object[]{typeof (Guid)})]

      public void ConsistentExceptionOnFailedBinding(Type type)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {GetType(Integer)})>

      <InlineData(New Object() {GetType(UInteger)})>

      <InlineData(New Object() {GetType(Short)})>

      <InlineData(New Object() {GetType(UShort)})>

      <InlineData(New Object() {GetType(Long)})>

      <InlineData(New Object() {GetType(ULong)})>

      <InlineData(New Object() {GetType(Boolean)})>

      <InlineData(New Object() {GetType(Byte)})>

      <InlineData(New Object() {GetType(SByte)})>

      <InlineData(New Object() {GetType(Char)})>

      <InlineData(New Object() {GetType(Decimal)})>

      <InlineData(New Object() {GetType(Double)})>

      <InlineData(New Object() {GetType(Single)})>

      <InlineData(New Object() {GetType(Date)})>

      <InlineData(New Object() {GetType(DateTimeOffset)})>

      <InlineData(New Object() {GetType(TimeSpan)})>

      <InlineData(New Object() {GetType(AttributeTargets)})>

      <InlineData(New Object() {GetType(Guid)})>

      Public Sub ConsistentExceptionOnFailedBinding(type As Type)
    parameters:
    - id: type
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BinderIgnoresIndexerProperties
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BinderIgnoresIndexerProperties
  id: BinderIgnoresIndexerProperties
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: BinderIgnoresIndexerProperties()
  nameWithType: ConfigurationBinderTests.BinderIgnoresIndexerProperties()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BinderIgnoresIndexerProperties()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: BinderIgnoresIndexerProperties
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 332
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void BinderIgnoresIndexerProperties()
    content.vb: >-
      <Fact>

      Public Sub BinderIgnoresIndexerProperties
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadComplexProperties
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadComplexProperties
  id: BindCanReadComplexProperties
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: BindCanReadComplexProperties()
  nameWithType: ConfigurationBinderTests.BindCanReadComplexProperties()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadComplexProperties()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: BindCanReadComplexProperties
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 340
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void BindCanReadComplexProperties()
    content.vb: >-
      <Fact>

      Public Sub BindCanReadComplexProperties
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadComplexProperties
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadComplexProperties
  id: GetCanReadComplexProperties
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetCanReadComplexProperties()
  nameWithType: ConfigurationBinderTests.GetCanReadComplexProperties()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadComplexProperties()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetCanReadComplexProperties
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 361
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetCanReadComplexProperties()
    content.vb: >-
      <Fact>

      Public Sub GetCanReadComplexProperties
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadInheritedProperties
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadInheritedProperties
  id: BindCanReadInheritedProperties
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: BindCanReadInheritedProperties()
  nameWithType: ConfigurationBinderTests.BindCanReadInheritedProperties()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadInheritedProperties()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: BindCanReadInheritedProperties
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 382
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void BindCanReadInheritedProperties()
    content.vb: >-
      <Fact>

      Public Sub BindCanReadInheritedProperties
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadInheritedProperties
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadInheritedProperties
  id: GetCanReadInheritedProperties
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetCanReadInheritedProperties()
  nameWithType: ConfigurationBinderTests.GetCanReadInheritedProperties()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadInheritedProperties()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetCanReadInheritedProperties
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 405
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetCanReadInheritedProperties()
    content.vb: >-
      <Fact>

      Public Sub GetCanReadInheritedProperties
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadStaticProperty
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadStaticProperty
  id: GetCanReadStaticProperty
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetCanReadStaticProperty()
  nameWithType: ConfigurationBinderTests.GetCanReadStaticProperty()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetCanReadStaticProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetCanReadStaticProperty
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 428
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void GetCanReadStaticProperty()
    content.vb: >-
      <Fact>

      Public Sub GetCanReadStaticProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadStaticProperty
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadStaticProperty
  id: BindCanReadStaticProperty
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: BindCanReadStaticProperty()
  nameWithType: ConfigurationBinderTests.BindCanReadStaticProperty()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindCanReadStaticProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: BindCanReadStaticProperty
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 444
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void BindCanReadStaticProperty()
    content.vb: >-
      <Fact>

      Public Sub BindCanReadStaticProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetIgnoresTests(System.String)
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetIgnoresTests(System.String)
  id: GetIgnoresTests(System.String)
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: GetIgnoresTests(String)
  nameWithType: ConfigurationBinderTests.GetIgnoresTests(String)
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.GetIgnoresTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: GetIgnoresTests
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 461
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"ReadOnly"})]

      [InlineData(new object[]{"PrivateSetter"})]

      [InlineData(new object[]{"ProtectedSetter"})]

      [InlineData(new object[]{"InternalSetter"})]

      public void GetIgnoresTests(string property)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"ReadOnly"})>

      <InlineData(New Object() {"PrivateSetter"})>

      <InlineData(New Object() {"ProtectedSetter"})>

      <InlineData(New Object() {"InternalSetter"})>

      Public Sub GetIgnoresTests(property As String)
    parameters:
    - id: property
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindIgnoresTests(System.String)
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindIgnoresTests(System.String)
  id: BindIgnoresTests(System.String)
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: BindIgnoresTests(String)
  nameWithType: ConfigurationBinderTests.BindIgnoresTests(String)
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.BindIgnoresTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: BindIgnoresTests
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 481
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"ReadOnly"})]

      [InlineData(new object[]{"PrivateSetter"})]

      [InlineData(new object[]{"ProtectedSetter"})]

      [InlineData(new object[]{"InternalSetter"})]

      public void BindIgnoresTests(string property)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"ReadOnly"})>

      <InlineData(New Object() {"PrivateSetter"})>

      <InlineData(New Object() {"ProtectedSetter"})>

      <InlineData(New Object() {"InternalSetter"})>

      Public Sub BindIgnoresTests(property As String)
    parameters:
    - id: property
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToInterface
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToInterface
  id: ExceptionWhenTryingToBindToInterface
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: ExceptionWhenTryingToBindToInterface()
  nameWithType: ConfigurationBinderTests.ExceptionWhenTryingToBindToInterface()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToInterface()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ExceptionWhenTryingToBindToInterface
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 502
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void ExceptionWhenTryingToBindToInterface()
    content.vb: >-
      <Fact>

      Public Sub ExceptionWhenTryingToBindToInterface
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
  id: ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: ExceptionWhenTryingToBindClassWithoutParameterlessConstructor()
  nameWithType: ConfigurationBinderTests.ExceptionWhenTryingToBindClassWithoutParameterlessConstructor()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindClassWithoutParameterlessConstructor()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 521
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void ExceptionWhenTryingToBindClassWithoutParameterlessConstructor()
    content.vb: >-
      <Fact>

      Public Sub ExceptionWhenTryingToBindClassWithoutParameterlessConstructor
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToTypeThrowsWhenActivated
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToTypeThrowsWhenActivated
  id: ExceptionWhenTryingToBindToTypeThrowsWhenActivated
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: ExceptionWhenTryingToBindToTypeThrowsWhenActivated()
  nameWithType: ConfigurationBinderTests.ExceptionWhenTryingToBindToTypeThrowsWhenActivated()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionWhenTryingToBindToTypeThrowsWhenActivated()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ExceptionWhenTryingToBindToTypeThrowsWhenActivated
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 540
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void ExceptionWhenTryingToBindToTypeThrowsWhenActivated()
    content.vb: >-
      <Fact>

      Public Sub ExceptionWhenTryingToBindToTypeThrowsWhenActivated
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionIncludesKeyOfFailedBinding
  commentId: M:Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionIncludesKeyOfFailedBinding
  id: ExceptionIncludesKeyOfFailedBinding
  parent: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests
  langs:
  - csharp
  - vb
  name: ExceptionIncludesKeyOfFailedBinding()
  nameWithType: ConfigurationBinderTests.ExceptionIncludesKeyOfFailedBinding()
  fullName: Microsoft.Extensions.Configuration.Binder.Test.ConfigurationBinderTests.ExceptionIncludesKeyOfFailedBinding()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
      branch: master
      repo: https://github.com/aspnet/Configuration.git
    id: ExceptionIncludesKeyOfFailedBinding
    path: test/Microsoft.Extensions.Configuration.Binder.Test/ConfigurationBinderTests.cs
    startLine: 560
  assemblies:
  - Microsoft.Extensions.Configuration.Binder.Test
  namespace: Microsoft.Extensions.Configuration.Binder.Test
  syntax:
    content: >-
      [Fact]

      public void ExceptionIncludesKeyOfFailedBinding()
    content.vb: >-
      <Fact>

      Public Sub ExceptionIncludesKeyOfFailedBinding
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Configuration.Binder.Test
  commentId: N:Microsoft.Extensions.Configuration.Binder.Test
  isExternal: false
  name: Microsoft.Extensions.Configuration.Binder.Test
  nameWithType: Microsoft.Extensions.Configuration.Binder.Test
  fullName: Microsoft.Extensions.Configuration.Binder.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
