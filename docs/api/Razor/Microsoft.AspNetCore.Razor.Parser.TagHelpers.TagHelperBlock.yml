### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  id: TagHelperBlock
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  children:
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.#ctor(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder)
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Descriptors
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Flatten
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.GetHashCode
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Length
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceEndTag
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceStartTag
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Start
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagMode
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
  - Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.ToString
  langs:
  - csharp
  - vb
  name: TagHelperBlock
  nameWithType: TagHelperBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagHelperBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nA <xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block\" data-throw-if-not-resolved=\"false\"></xref> that reprents a special HTML element.\n"
  example: []
  syntax:
    content: 'public class TagHelperBlock : Block, IEquatable<TagHelperBlock>'
    content.vb: >-
      Public Class TagHelperBlock
          Inherits Block
          Implements IEquatable(Of TagHelperBlock)
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}
  inheritedMembers:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.#ctor(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.#ctor(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder)
  id: '#ctor(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder)'
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: TagHelperBlock(TagHelperBlockBuilder)
  nameWithType: TagHelperBlock.TagHelperBlock(TagHelperBlockBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagHelperBlock(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nInstantiates a new instance of a <xref href=\"Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TagHelperBlock(TagHelperBlockBuilder source)
    content.vb: Public Sub New(source As TagHelperBlockBuilder)
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder
      description: >-
        A <xref href="Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder" data-throw-if-not-resolved="false"></xref> used to construct a valid

        <xref href="Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceStartTag
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceStartTag
  id: SourceStartTag
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: SourceStartTag
  nameWithType: TagHelperBlock.SourceStartTag
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceStartTag
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SourceStartTag
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nGets the unrewritten source start tag.\n"
  remarks: This is used by design time to properly format <xref href="Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock" data-throw-if-not-resolved="false"></xref>s.
  example: []
  syntax:
    content: public Block SourceStartTag { get; }
    content.vb: Public ReadOnly Property SourceStartTag As Block
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceEndTag
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceEndTag
  id: SourceEndTag
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: SourceEndTag
  nameWithType: TagHelperBlock.SourceEndTag
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.SourceEndTag
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SourceEndTag
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nGets the unrewritten source end tag.\n"
  remarks: This is used by design time to properly format <xref href="Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock" data-throw-if-not-resolved="false"></xref>s.
  example: []
  syntax:
    content: public Block SourceEndTag { get; }
    content.vb: Public ReadOnly Property SourceEndTag As Block
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagMode
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagMode
  id: TagMode
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: TagMode
  nameWithType: TagHelperBlock.TagMode
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagMode
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagMode
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nGets the HTML syntax of the element in the Razor source.\n"
  example: []
  syntax:
    content: public TagMode TagMode { get; }
    content.vb: Public ReadOnly Property TagMode As TagMode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.TagHelpers.TagMode
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Descriptors
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Descriptors
  id: Descriptors
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Descriptors
  nameWithType: TagHelperBlock.Descriptors
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Descriptors
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Descriptors
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 68
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\n<xref href=\"Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor\" data-throw-if-not-resolved=\"false\"></xref>s for the HTML element.\n"
  example: []
  syntax:
    content: public IEnumerable<TagHelperDescriptor> Descriptors { get; }
    content.vb: Public ReadOnly Property Descriptors As IEnumerable(Of TagHelperDescriptor)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
  id: Attributes
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: TagHelperBlock.Attributes
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Attributes
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 73
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nThe HTML attributes.\n"
  example: []
  syntax:
    content: public IList<TagHelperAttributeNode> Attributes { get; }
    content.vb: Public ReadOnly Property Attributes As IList(Of TagHelperAttributeNode)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Start
  id: Start
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: TagHelperBlock.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Start
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Start
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  example: []
  syntax:
    content: public override SourceLocation Start { get; }
    content.vb: Public Overrides ReadOnly Property Start As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
  id: TagName
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: TagName
  nameWithType: TagHelperBlock.TagName
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagName
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 87
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nThe HTML tag name.\n"
  example: []
  syntax:
    content: public string TagName { get; }
    content.vb: Public ReadOnly Property TagName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Length
  id: Length
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: TagHelperBlock.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Length
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 89
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  syntax:
    content: public override int Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Flatten
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Flatten
  id: Flatten
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Flatten()
  nameWithType: TagHelperBlock.Flatten()
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Flatten()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Flatten
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 101
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  syntax:
    content: public override IEnumerable<Span> Flatten()
    content.vb: Public Overrides Function Flatten As IEnumerable(Of Span)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.ToString
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TagHelperBlock.ToString()
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ToString
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 126
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  id: Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: Equals(TagHelperBlock)
  nameWithType: TagHelperBlock.Equals(TagHelperBlock)
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Equals
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 143
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  summary: "\nDetermines whether two <xref href=\"Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock\" data-throw-if-not-resolved=\"false\"></xref>s are equal by comparing the <xref href=\"Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Equals(TagHelperBlock other)
    content.vb: Public Function Equals(other As TagHelperBlock) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
      description: The <xref href="Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock" data-throw-if-not-resolved="false"></xref> to check equality against.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the current <xref href=\"Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock\" data-throw-if-not-resolved=\"false\"></xref> is equivalent to the given\n<em>other</em>, <code>false</code> otherwise.\n"
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.GetHashCode
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TagHelperBlock.GetHashCode()
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Razor/Parser/TagHelpers/TagHelperBlock.cs
    startLine: 151
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Block
  nameWithType: Block
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.Parser.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SyntaxTreeNode
  nameWithType: SyntaxTreeNode
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
- uid: System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TagHelperBlock>
  nameWithType: IEquatable<TagHelperBlock>
  fullName: System.IEquatable<Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock>
  nameWithType.vb: IEquatable(Of TagHelperBlock)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  name.vb: IEquatable(Of TagHelperBlock)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
    name: TagHelperBlock
    nameWithType: TagHelperBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
    name: TagHelperBlock
    nameWithType: TagHelperBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Type
  nameWithType: Block.Type
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Children
  nameWithType: Block.Children
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: ChunkGenerator
  nameWithType: Block.ChunkGenerator
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: IsBlock
  nameWithType: Block.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: FindFirstDescendentSpan()
  nameWithType: Block.FindFirstDescendentSpan()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
    name: FindFirstDescendentSpan
    nameWithType: Block.FindFirstDescendentSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
    name: FindFirstDescendentSpan
    nameWithType: Block.FindFirstDescendentSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: FindLastDescendentSpan()
  nameWithType: Block.FindLastDescendentSpan()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
    name: FindLastDescendentSpan
    nameWithType: Block.FindLastDescendentSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
    name: FindLastDescendentSpan
    nameWithType: Block.FindLastDescendentSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Accept(ParserVisitor)
  nameWithType: Block.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: Block.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: Block.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: true
  name: Equals(Object)
  nameWithType: Block.Equals(Object)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
    name: Equals
    nameWithType: Block.Equals
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
    name: Equals
    nameWithType: Block.Equals
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: LocateOwner(TextChange)
  nameWithType: Block.LocateOwner(TextChange)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
    name: LocateOwner
    nameWithType: Block.LocateOwner
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Text.TextChange
    name: TextChange
    nameWithType: TextChange
    fullName: Microsoft.AspNetCore.Razor.Text.TextChange
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
    name: LocateOwner
    nameWithType: Block.LocateOwner
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Text.TextChange
    name: TextChange
    nameWithType: TextChange
    fullName: Microsoft.AspNetCore.Razor.Text.TextChange
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: Block.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: Block.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: Block.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: GetEquivalenceHash()
  nameWithType: Block.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: Block.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: Block.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Parent
  nameWithType: SyntaxTreeNode.Parent
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  isExternal: false
  name: TagHelperBlock
  nameWithType: TagHelperBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.TagHelpers
  isExternal: false
  name: TagHelperBlockBuilder
  nameWithType: TagHelperBlockBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlockBuilder
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagMode
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.TagMode
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: TagMode
  nameWithType: TagMode
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagMode
- uid: Microsoft.AspNetCore.Razor.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.TagHelpers
- uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  commentId: T:Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  parent: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  isExternal: false
  name: TagHelperDescriptor
  nameWithType: TagHelperDescriptor
  fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TagHelperDescriptor>
  nameWithType: IEnumerable<TagHelperDescriptor>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor>
  nameWithType.vb: IEnumerable(Of TagHelperDescriptor)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor)
  name.vb: IEnumerable(Of TagHelperDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode}
  commentId: T:System.Collections.Generic.IList{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TagHelperAttributeNode>
  nameWithType: IList<TagHelperAttributeNode>
  fullName: System.Collections.Generic.IList<Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode>
  nameWithType.vb: IList(Of TagHelperAttributeNode)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode)
  name.vb: IList(Of TagHelperAttributeNode)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode
    name: TagHelperAttributeNode
    nameWithType: TagHelperAttributeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode
    name: TagHelperAttributeNode
    nameWithType: TagHelperAttributeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperAttributeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Start
  nameWithType: Block.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Length
  nameWithType: Block.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: Flatten()
  nameWithType: Block.Flatten()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
    name: Flatten
    nameWithType: Block.Flatten
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
    name: Flatten
    nameWithType: Block.Flatten
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Span>
  nameWithType: IEnumerable<Span>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span>
  nameWithType.vb: IEnumerable(Of Span)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span)
  name.vb: IEnumerable(Of Span)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
    name: Span
    nameWithType: Span
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
    name: Span
    nameWithType: Span
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: ToString()
  nameWithType: Block.ToString()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
    name: ToString
    nameWithType: Block.ToString
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
    name: ToString
    nameWithType: Block.ToString
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.TagName
- uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock.Attributes
- uid: System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  parent: System.IEquatable{Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TagHelperBlock)
  nameWithType: IEquatable<TagHelperBlock>.Equals(TagHelperBlock)
  fullName: System.IEquatable<Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock>.Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  nameWithType.vb: IEquatable(Of TagHelperBlock).Equals(TagHelperBlock)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock).Equals(Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TagHelperBlock>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
    name: TagHelperBlock
    nameWithType: TagHelperBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TagHelperBlock).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
    name: TagHelperBlock
    nameWithType: TagHelperBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.TagHelpers.TagHelperBlock
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  isExternal: false
  name: GetHashCode()
  nameWithType: Block.GetHashCode()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
    name: GetHashCode
    nameWithType: Block.GetHashCode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
    name: GetHashCode
    nameWithType: Block.GetHashCode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
