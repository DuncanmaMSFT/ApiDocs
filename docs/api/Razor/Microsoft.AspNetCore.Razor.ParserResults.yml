### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.ParserResults
  commentId: T:Microsoft.AspNetCore.Razor.ParserResults
  id: ParserResults
  parent: Microsoft.AspNetCore.Razor
  children:
  - Microsoft.AspNetCore.Razor.ParserResults.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  - Microsoft.AspNetCore.Razor.ParserResults.#ctor(System.Boolean,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  - Microsoft.AspNetCore.Razor.ParserResults.Document
  - Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  - Microsoft.AspNetCore.Razor.ParserResults.ParserErrors
  - Microsoft.AspNetCore.Razor.ParserResults.Prefix
  - Microsoft.AspNetCore.Razor.ParserResults.Success
  - Microsoft.AspNetCore.Razor.ParserResults.TagHelperDescriptors
  langs:
  - csharp
  - vb
  name: ParserResults
  nameWithType: ParserResults
  fullName: Microsoft.AspNetCore.Razor.ParserResults
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParserResults
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nRepresents the results of parsing a Razor document\n"
  example: []
  syntax:
    content: public class ParserResults
    content.vb: Public Class ParserResults
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.ParserResults.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  commentId: M:Microsoft.AspNetCore.Razor.ParserResults.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  id: '#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)'
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: ParserResults(Block, IEnumerable<TagHelperDescriptor>, ErrorSink)
  nameWithType: ParserResults.ParserResults(Block, IEnumerable<TagHelperDescriptor>, ErrorSink)
  fullName: Microsoft.AspNetCore.Razor.ParserResults.ParserResults(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor>, Microsoft.AspNetCore.Razor.ErrorSink)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nInstantiates a new <xref href=\"Microsoft.AspNetCore.Razor.ParserResults\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public ParserResults(Block document, IEnumerable<TagHelperDescriptor> tagHelperDescriptors, ErrorSink errorSink)
    content.vb: Public Sub New(document As Block, tagHelperDescriptors As IEnumerable(Of TagHelperDescriptor), errorSink As ErrorSink)
    parameters:
    - id: document
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
      description: The <xref href="Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block" data-throw-if-not-resolved="false"></xref> for the syntax tree.
    - id: tagHelperDescriptors
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
      description: "\nThe <xref href=\"Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor\" data-throw-if-not-resolved=\"false\"></xref>s that apply to the current Razor document.\n"
    - id: errorSink
      type: Microsoft.AspNetCore.Razor.ErrorSink
      description: "\nThe <xref href=\"Microsoft.AspNetCore.Razor.ParserResults.ErrorSink\" data-throw-if-not-resolved=\"false\"></xref> used to collect <xref href=\"Microsoft.AspNetCore.Razor.RazorError\" data-throw-if-not-resolved=\"false\"></xref>s encountered when parsing the\ncurrent Razor document.\n"
  nameWithType.vb: ParserResults.ParserResults(Block, IEnumerable(Of TagHelperDescriptor), ErrorSink)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.ParserResults.ParserResults(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block, System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor), Microsoft.AspNetCore.Razor.ErrorSink)
  name.vb: ParserResults(Block, IEnumerable(Of TagHelperDescriptor), ErrorSink)
- uid: Microsoft.AspNetCore.Razor.ParserResults.#ctor(System.Boolean,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  commentId: M:Microsoft.AspNetCore.Razor.ParserResults.#ctor(System.Boolean,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)
  id: '#ctor(System.Boolean,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block,System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor},Microsoft.AspNetCore.Razor.ErrorSink)'
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: ParserResults(Boolean, Block, IEnumerable<TagHelperDescriptor>, ErrorSink)
  nameWithType: ParserResults.ParserResults(Boolean, Block, IEnumerable<TagHelperDescriptor>, ErrorSink)
  fullName: Microsoft.AspNetCore.Razor.ParserResults.ParserResults(System.Boolean, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor>, Microsoft.AspNetCore.Razor.ErrorSink)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 60
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nInstantiates a new <xref href=\"Microsoft.AspNetCore.Razor.ParserResults\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: protected ParserResults(bool success, Block document, IEnumerable<TagHelperDescriptor> tagHelperDescriptors, ErrorSink errorSink)
    content.vb: Protected Sub New(success As Boolean, document As Block, tagHelperDescriptors As IEnumerable(Of TagHelperDescriptor), errorSink As ErrorSink)
    parameters:
    - id: success
      type: System.Boolean
      description: <code>true</code> if parsing was successful, <code>false</code> otherwise.
    - id: document
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
      description: The <xref href="Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block" data-throw-if-not-resolved="false"></xref> for the syntax tree.
    - id: tagHelperDescriptors
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
      description: "\nThe <xref href=\"Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor\" data-throw-if-not-resolved=\"false\"></xref>s that apply to the current Razor document.\n"
    - id: errorSink
      type: Microsoft.AspNetCore.Razor.ErrorSink
      description: "\nThe <xref href=\"Microsoft.AspNetCore.Razor.ParserResults.ErrorSink\" data-throw-if-not-resolved=\"false\"></xref> used to collect <xref href=\"Microsoft.AspNetCore.Razor.RazorError\" data-throw-if-not-resolved=\"false\"></xref>s encountered when parsing the\ncurrent Razor document.\n"
  nameWithType.vb: ParserResults.ParserResults(Boolean, Block, IEnumerable(Of TagHelperDescriptor), ErrorSink)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.ParserResults.ParserResults(System.Boolean, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block, System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor), Microsoft.AspNetCore.Razor.ErrorSink)
  name.vb: ParserResults(Boolean, Block, IEnumerable(Of TagHelperDescriptor), ErrorSink)
- uid: Microsoft.AspNetCore.Razor.ParserResults.Success
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.Success
  id: Success
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: ParserResults.Success
  fullName: Microsoft.AspNetCore.Razor.ParserResults.Success
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Success
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nIndicates if parsing was successful (no errors).\n"
  example: []
  syntax:
    content: public bool Success { get; }
    content.vb: Public ReadOnly Property Success As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if parsing was successful, <code>false</code> otherwise.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.ParserResults.Document
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.Document
  id: Document
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: Document
  nameWithType: ParserResults.Document
  fullName: Microsoft.AspNetCore.Razor.ParserResults.Document
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Document
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nThe root node in the document's syntax tree.\n"
  example: []
  syntax:
    content: public Block Document { get; }
    content.vb: Public ReadOnly Property Document As Block
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  id: ErrorSink
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: ErrorSink
  nameWithType: ParserResults.ErrorSink
  fullName: Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ErrorSink
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nUsed to aggregate <xref href=\"Microsoft.AspNetCore.Razor.RazorError\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public ErrorSink ErrorSink { get; }
    content.vb: Public ReadOnly Property ErrorSink As ErrorSink
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.ErrorSink
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.ParserResults.ParserErrors
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.ParserErrors
  id: ParserErrors
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: ParserErrors
  nameWithType: ParserResults.ParserErrors
  fullName: Microsoft.AspNetCore.Razor.ParserResults.ParserErrors
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParserErrors
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nThe list of errors which occurred during parsing.\n"
  example: []
  syntax:
    content: public IEnumerable<RazorError> ParserErrors { get; }
    content.vb: Public ReadOnly Property ParserErrors As IEnumerable(Of RazorError)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.RazorError}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.ParserResults.TagHelperDescriptors
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.TagHelperDescriptors
  id: TagHelperDescriptors
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: TagHelperDescriptors
  nameWithType: ParserResults.TagHelperDescriptors
  fullName: Microsoft.AspNetCore.Razor.ParserResults.TagHelperDescriptors
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagHelperDescriptors
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nThe <xref href=\"Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor\" data-throw-if-not-resolved=\"false\"></xref>s found for the current Razor document.\n"
  example: []
  syntax:
    content: public IEnumerable<TagHelperDescriptor> TagHelperDescriptors { get; }
    content.vb: Public ReadOnly Property TagHelperDescriptors As IEnumerable(Of TagHelperDescriptor)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.ParserResults.Prefix
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.Prefix
  id: Prefix
  parent: Microsoft.AspNetCore.Razor.ParserResults
  langs:
  - csharp
  - vb
  name: Prefix
  nameWithType: ParserResults.Prefix
  fullName: Microsoft.AspNetCore.Razor.ParserResults.Prefix
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Prefix
    path: src/Microsoft.AspNetCore.Razor/ParserResults.cs
    startLine: 117
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor
  summary: "\nText used as a required prefix when matching HTML.\n"
  example: []
  syntax:
    content: public string Prefix { get; }
    content.vb: Public ReadOnly Property Prefix As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.ParserResults
  commentId: T:Microsoft.AspNetCore.Razor.ParserResults
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: ParserResults
  nameWithType: ParserResults
  fullName: Microsoft.AspNetCore.Razor.ParserResults
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Block
  nameWithType: Block
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
- uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  commentId: T:Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  parent: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  isExternal: false
  name: TagHelperDescriptor
  nameWithType: TagHelperDescriptor
  fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
- uid: Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  commentId: P:Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
  parent: Microsoft.AspNetCore.Razor.ParserResults
  isExternal: false
  name: ErrorSink
  nameWithType: ParserResults.ErrorSink
  fullName: Microsoft.AspNetCore.Razor.ParserResults.ErrorSink
- uid: Microsoft.AspNetCore.Razor.RazorError
  commentId: T:Microsoft.AspNetCore.Razor.RazorError
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: RazorError
  nameWithType: RazorError
  fullName: Microsoft.AspNetCore.Razor.RazorError
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TagHelperDescriptor>
  nameWithType: IEnumerable<TagHelperDescriptor>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor>
  nameWithType.vb: IEnumerable(Of TagHelperDescriptor)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor)
  name.vb: IEnumerable(Of TagHelperDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
    name: TagHelperDescriptor
    nameWithType: TagHelperDescriptor
    fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers.TagHelperDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.ErrorSink
  commentId: T:Microsoft.AspNetCore.Razor.ErrorSink
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: ErrorSink
  nameWithType: ErrorSink
  fullName: Microsoft.AspNetCore.Razor.ErrorSink
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.Compilation.TagHelpers
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.RazorError}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.RazorError}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RazorError>
  nameWithType: IEnumerable<RazorError>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.RazorError>
  nameWithType.vb: IEnumerable(Of RazorError)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.RazorError)
  name.vb: IEnumerable(Of RazorError)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
