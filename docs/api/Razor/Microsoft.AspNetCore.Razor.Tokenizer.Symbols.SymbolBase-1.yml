### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  id: SymbolBase`1
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  children:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.#ctor(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`0,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Content
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Equals(System.Object)
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Errors
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.GetHashCode
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Start
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ToString
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Type
  langs:
  - csharp
  - vb
  name: SymbolBase<TType>
  nameWithType: SymbolBase<TType>
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SymbolBase
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: 'public abstract class SymbolBase<TType> : ISymbol where TType : struct'
    content.vb: >-
      Public MustInherit Class SymbolBase(Of TType As Structure)
          Implements ISymbol
    typeParameters:
    - id: TType
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  nameWithType.vb: SymbolBase(Of TType)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType)
  name.vb: SymbolBase(Of TType)
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.#ctor(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`0,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.#ctor(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`0,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  id: '#ctor(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`0,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})'
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: SymbolBase(SourceLocation, String, TType, IReadOnlyList<RazorError>)
  nameWithType: SymbolBase<TType>.SymbolBase(SourceLocation, String, TType, IReadOnlyList<RazorError>)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.SymbolBase(Microsoft.AspNetCore.Razor.SourceLocation, System.String, TType, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.RazorError>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: protected SymbolBase(SourceLocation start, string content, TType type, IReadOnlyList<RazorError> errors)
    content.vb: Protected Sub New(start As SourceLocation, content As String, type As TType, errors As IReadOnlyList(Of RazorError))
    parameters:
    - id: start
      type: Microsoft.AspNetCore.Razor.SourceLocation
    - id: content
      type: System.String
    - id: type
      type: '{TType}'
    - id: errors
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  nameWithType.vb: SymbolBase(Of TType).SymbolBase(SourceLocation, String, TType, IReadOnlyList(Of RazorError))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).SymbolBase(Microsoft.AspNetCore.Razor.SourceLocation, System.String, TType, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.RazorError))
  name.vb: SymbolBase(SourceLocation, String, TType, IReadOnlyList(Of RazorError))
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Start
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Start
  id: Start
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: SymbolBase<TType>.Start
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.Start
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Start
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public SourceLocation Start { get; }
    content.vb: Public ReadOnly Property Start As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  implements:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Start
  nameWithType.vb: SymbolBase(Of TType).Start
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).Start
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Content
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Content
  id: Content
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: SymbolBase<TType>.Content
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.Content
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Content
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 32
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public string Content { get; }
    content.vb: Public ReadOnly Property Content As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Content
  nameWithType.vb: SymbolBase(Of TType).Content
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).Content
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Errors
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Errors
  id: Errors
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: SymbolBase<TType>.Errors
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.Errors
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Errors
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public IReadOnlyList<RazorError> Errors { get; }
    content.vb: Public ReadOnly Property Errors As IReadOnlyList(Of RazorError)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  nameWithType.vb: SymbolBase(Of TType).Errors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).Errors
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Type
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Type
  id: Type
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: SymbolBase<TType>.Type
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.Type
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Type
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public TType Type { get; }
    content.vb: Public ReadOnly Property Type As TType
    parameters: []
    return:
      type: '{TType}'
  nameWithType.vb: SymbolBase(Of TType).Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).Type
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SymbolBase<TType>.Equals(Object)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Equals
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  nameWithType.vb: SymbolBase(Of TType).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).Equals(System.Object)
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.GetHashCode
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SymbolBase<TType>.GetHashCode()
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 47
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  nameWithType.vb: SymbolBase(Of TType).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).GetHashCode()
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ToString
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SymbolBase<TType>.ToString()
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ToString
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  nameWithType.vb: SymbolBase(Of TType).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).ToString()
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  id: OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: OffsetStart(SourceLocation)
  nameWithType: SymbolBase<TType>.OffsetStart(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: OffsetStart
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public void OffsetStart(SourceLocation documentStart)
    content.vb: Public Sub OffsetStart(documentStart As SourceLocation)
    parameters:
    - id: documentStart
      type: Microsoft.AspNetCore.Razor.SourceLocation
  implements:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: SymbolBase(Of TType).OffsetStart(SourceLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  id: ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase`1
  langs:
  - csharp
  - vb
  name: ChangeStart(SourceLocation)
  nameWithType: SymbolBase<TType>.ChangeStart(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase<TType>.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ChangeStart
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolBase.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public void ChangeStart(SourceLocation newStart)
    content.vb: Public Sub ChangeStart(newStart As SourceLocation)
    parameters:
    - id: newStart
      type: Microsoft.AspNetCore.Razor.SourceLocation
  implements:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: SymbolBase(Of TType).ChangeStart(SourceLocation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolBase(Of TType).ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
references:
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: ISymbol
  nameWithType: ISymbol
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  definition: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  name: GetContent()
  nameWithType: SymbolExtensions.GetContent()
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
    name: GetContent
    nameWithType: SymbolExtensions.GetContent
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
    name: GetContent
    nameWithType: SymbolExtensions.GetContent
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  isExternal: false
  name: GetContent(ISymbol)
  nameWithType: SymbolExtensions.GetContent(ISymbol)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
    name: GetContent
    nameWithType: SymbolExtensions.GetContent
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
    name: GetContent
    nameWithType: SymbolExtensions.GetContent
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: SymbolExtensions
  nameWithType: SymbolExtensions
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TType}'
  commentId: '!:TType'
  definition: TType
  name: TType
  nameWithType: TType
  fullName: TType
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<RazorError>
  nameWithType: IReadOnlyList<RazorError>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.RazorError>
  nameWithType.vb: IReadOnlyList(Of RazorError)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.RazorError)
  name.vb: IReadOnlyList(Of RazorError)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: TType
  isExternal: false
  name: TType
  nameWithType: TType
  fullName: TType
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Start
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Start
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  isExternal: false
  name: Start
  nameWithType: ISymbol.Start
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Start
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Content
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Content
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  isExternal: false
  name: Content
  nameWithType: ISymbol.Content
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.Content
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  isExternal: false
  name: OffsetStart(SourceLocation)
  nameWithType: ISymbol.OffsetStart(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
    name: OffsetStart
    nameWithType: ISymbol.OffsetStart
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart(Microsoft.AspNetCore.Razor.SourceLocation)
    name: OffsetStart
    nameWithType: ISymbol.OffsetStart
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.OffsetStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  isExternal: false
  name: ChangeStart(SourceLocation)
  nameWithType: ISymbol.ChangeStart(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
    name: ChangeStart
    nameWithType: ISymbol.ChangeStart
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
    name: ChangeStart
    nameWithType: ISymbol.ChangeStart
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol.ChangeStart
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
