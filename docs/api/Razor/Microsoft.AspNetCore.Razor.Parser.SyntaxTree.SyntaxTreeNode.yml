### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  id: SyntaxTreeNode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  children:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  langs:
  - csharp
  - vb
  name: SyntaxTreeNode
  nameWithType: SyntaxTreeNode
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SyntaxTreeNode
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 5
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public abstract class SyntaxTreeNode
    content.vb: Public MustInherit Class SyntaxTreeNode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  id: Parent
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: SyntaxTreeNode.Parent
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Parent
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 7
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Block Parent { get; }
    content.vb: Public ReadOnly Property Parent As Block
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  id: IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: IsBlock
  nameWithType: SyntaxTreeNode.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nReturns true if this element is a block (to avoid casting)\n"
  example: []
  syntax:
    content: public abstract bool IsBlock { get; }
    content.vb: Public MustOverride ReadOnly Property IsBlock As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  id: Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: SyntaxTreeNode.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Length
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nThe length of all the content contained in this node\n"
  example: []
  syntax:
    content: public abstract int Length { get; }
    content.vb: Public MustOverride ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  id: Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: SyntaxTreeNode.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Start
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nThe start point of this node\n"
  example: []
  syntax:
    content: public abstract SourceLocation Start { get; }
    content.vb: Public MustOverride ReadOnly Property Start As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  id: Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: Accept(ParserVisitor)
  nameWithType: SyntaxTreeNode.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Accept
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nAccepts a parser visitor, calling the appropriate visit method and passing in this instance\n"
  example: []
  syntax:
    content: public abstract void Accept(ParserVisitor visitor)
    content.vb: Public MustOverride Sub Accept(visitor As ParserVisitor)
    parameters:
    - id: visitor
      type: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
      description: The visitor to accept
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  id: EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: SyntaxTreeNode.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EquivalentTo
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nDetermines if the specified node is equivalent to this node\n"
  example: []
  syntax:
    content: public abstract bool EquivalentTo(SyntaxTreeNode node)
    content.vb: Public MustOverride Function EquivalentTo(node As SyntaxTreeNode) As Boolean
    parameters:
    - id: node
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
      description: The node to compare this node with
    return:
      type: System.Boolean
      description: "\ntrue if the provided node has all the same content and metadata, though the specific quantity and type of\nsymbols may be different.\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  id: GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  langs:
  - csharp
  - vb
  name: GetEquivalenceHash()
  nameWithType: SyntaxTreeNode.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetEquivalenceHash
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/SyntaxTreeNode.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nDetermines a hash code for the <xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode\" data-throw-if-not-resolved=\"false\"></xref> using only information relevant in\n<xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)\" data-throw-if-not-resolved=\"false\"></xref> comparisons.\n"
  example: []
  syntax:
    content: public abstract int GetEquivalenceHash()
    content.vb: Public MustOverride Function GetEquivalenceHash As Integer
    return:
      type: System.Int32
      description: "\nA hash code for the <xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode\" data-throw-if-not-resolved=\"false\"></xref> using only information relevant in\n<xref href=\"Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)\" data-throw-if-not-resolved=\"false\"></xref> comparisons.\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Block
  nameWithType: Block
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserVisitor
  nameWithType: ParserVisitor
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SyntaxTreeNode
  nameWithType: SyntaxTreeNode
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: SyntaxTreeNode.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
