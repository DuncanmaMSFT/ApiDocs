### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  id: TagHelperContext
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  children:
  - Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.#ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  - Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.AllAttributes
  - Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Items
  - Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  - Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.UniqueId
  langs:
  - csharp
  - vb
  name: TagHelperContext
  nameWithType: TagHelperContext
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagHelperContext
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nContains information related to the execution of <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: public class TagHelperContext
    content.vb: Public Class TagHelperContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.#ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  commentId: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.#ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  id: '#ctor(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)'
  parent: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  langs:
  - csharp
  - vb
  name: TagHelperContext(TagHelperAttributeList, IDictionary<Object, Object>, String)
  nameWithType: TagHelperContext.TagHelperContext(TagHelperAttributeList, IDictionary<Object, Object>, String)
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.TagHelperContext(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList, System.Collections.Generic.IDictionary<System.Object, System.Object>, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nInstantiates a new <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TagHelperContext(TagHelperAttributeList allAttributes, IDictionary<object, object> items, string uniqueId)
    content.vb: Public Sub New(allAttributes As TagHelperAttributeList, items As IDictionary(Of Object, Object), uniqueId As String)
    parameters:
    - id: allAttributes
      type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList
      description: Every attribute associated with the current HTML element.
    - id: items
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
      description: Collection of items used to communicate with other <xref href="Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" data-throw-if-not-resolved="false"></xref>s.
    - id: uniqueId
      type: System.String
      description: >-
        The unique identifier for the source element this <xref href="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" data-throw-if-not-resolved="false"></xref>

        applies to.
  nameWithType.vb: TagHelperContext.TagHelperContext(TagHelperAttributeList, IDictionary(Of Object, Object), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.TagHelperContext(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList, System.Collections.Generic.IDictionary(Of System.Object, System.Object), System.String)
  name.vb: TagHelperContext(TagHelperAttributeList, IDictionary(Of Object, Object), String)
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.AllAttributes
  commentId: P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.AllAttributes
  id: AllAttributes
  parent: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  langs:
  - csharp
  - vb
  name: AllAttributes
  nameWithType: TagHelperContext.AllAttributes
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.AllAttributes
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AllAttributes
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 50
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nEvery attribute associated with the current HTML element.\n"
  example: []
  syntax:
    content: public ReadOnlyTagHelperAttributeList AllAttributes { get; }
    content.vb: Public ReadOnly Property AllAttributes As ReadOnlyTagHelperAttributeList
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Items
  commentId: P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Items
  id: Items
  parent: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: TagHelperContext.Items
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Items
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Items
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nGets the collection of items used to communicate with other <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  remarks: "\nThis <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> is copy-on-write in order to ensure items added to this\ncollection are visible only to other <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" data-throw-if-not-resolved=\"false\"></xref>s targeting child elements.\n"
  example: []
  syntax:
    content: public IDictionary<object, object> Items { get; }
    content.vb: Public ReadOnly Property Items As IDictionary(Of Object, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.UniqueId
  commentId: P:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.UniqueId
  id: UniqueId
  parent: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  langs:
  - csharp
  - vb
  name: UniqueId
  nameWithType: TagHelperContext.UniqueId
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.UniqueId
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: UniqueId
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nAn identifier unique to the HTML element this context is for.\n"
  example: []
  syntax:
    content: public string UniqueId { get; }
    content.vb: Public ReadOnly Property UniqueId As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  commentId: M:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  id: Reinitialize(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)
  parent: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  langs:
  - csharp
  - vb
  name: Reinitialize(IDictionary<Object, Object>, String)
  nameWithType: TagHelperContext.Reinitialize(IDictionary<Object, Object>, String)
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary<System.Object, System.Object>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Reinitialize
    path: src/Microsoft.AspNetCore.Razor.Runtime/TagHelpers/TagHelperContext.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Razor.Runtime
  namespace: Microsoft.AspNetCore.Razor.TagHelpers
  summary: "\nClears the <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext\" data-throw-if-not-resolved=\"false\"></xref> and updates its state with the provided values.\n"
  example: []
  syntax:
    content: public void Reinitialize(IDictionary<object, object> items, string uniqueId)
    content.vb: Public Sub Reinitialize(items As IDictionary(Of Object, Object), uniqueId As String)
    parameters:
    - id: items
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
      description: The <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref> to use.
    - id: uniqueId
      type: System.String
      description: The unique id to use.
  nameWithType.vb: TagHelperContext.Reinitialize(IDictionary(Of Object, Object), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext.Reinitialize(System.Collections.Generic.IDictionary(Of System.Object, System.Object), System.String)
  name.vb: Reinitialize(IDictionary(Of Object, Object), String)
references:
- uid: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: ITagHelper
  nameWithType: ITagHelper
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
- uid: Microsoft.AspNetCore.Razor.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.TagHelpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: TagHelperContext
  nameWithType: TagHelperContext
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: TagHelperAttributeList
  nameWithType: TagHelperAttributeList
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttributeList
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Object, Object>
  nameWithType: IDictionary<Object, Object>
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>
  nameWithType.vb: IDictionary(Of Object, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object)
  name.vb: IDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: ReadOnlyTagHelperAttributeList
  nameWithType: ReadOnlyTagHelperAttributeList
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.ReadOnlyTagHelperAttributeList
