### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  id: SymbolExtensions
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  children:
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  - Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)
  langs:
  - csharp
  - vb
  name: SymbolExtensions
  nameWithType: SymbolExtensions
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SymbolExtensions
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public static class SymbolExtensions
    content.vb: Public Module SymbolExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  id: GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetContent(SpanBuilder)
  nameWithType: SymbolExtensions.GetContent(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetContent
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public static LocationTagged<string> GetContent(this SpanBuilder span)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContent(span As SpanBuilder) As LocationTagged(Of String)
    parameters:
    - id: span
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    return:
      type: Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})
  id: GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}})
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetContent(SpanBuilder, Func<IEnumerable<ISymbol>, IEnumerable<ISymbol>>)
  nameWithType: SymbolExtensions.GetContent(SpanBuilder, Func<IEnumerable<ISymbol>, IEnumerable<ISymbol>>)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Func<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetContent
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public static LocationTagged<string> GetContent(this SpanBuilder span, Func<IEnumerable<ISymbol>, IEnumerable<ISymbol>> filter)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContent(span As SpanBuilder, filter As Func(Of IEnumerable(Of ISymbol), IEnumerable(Of ISymbol))) As LocationTagged(Of String)
    parameters:
    - id: span
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    - id: filter
      type: System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}}
    return:
      type: Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  nameWithType.vb: SymbolExtensions.GetContent(SpanBuilder, Func(Of IEnumerable(Of ISymbol), IEnumerable(Of ISymbol)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Func(Of System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol), System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)))
  name.vb: GetContent(SpanBuilder, Func(Of IEnumerable(Of ISymbol), IEnumerable(Of ISymbol)))
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)
  id: GetContent(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},Microsoft.AspNetCore.Razor.SourceLocation)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetContent(IEnumerable<ISymbol>, SourceLocation)
  nameWithType: SymbolExtensions.GetContent(IEnumerable<ISymbol>, SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>, Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetContent
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public static LocationTagged<string> GetContent(this IEnumerable<ISymbol> symbols, SourceLocation spanStart)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContent(symbols As IEnumerable(Of ISymbol), spanStart As SourceLocation) As LocationTagged(Of String)
    parameters:
    - id: symbols
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
    - id: spanStart
      type: Microsoft.AspNetCore.Razor.SourceLocation
    return:
      type: Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  nameWithType.vb: SymbolExtensions.GetContent(IEnumerable(Of ISymbol), SourceLocation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol), Microsoft.AspNetCore.Razor.SourceLocation)
  name.vb: GetContent(IEnumerable(Of ISymbol), SourceLocation)
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  id: GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions
  langs:
  - csharp
  - vb
  name: GetContent(ISymbol)
  nameWithType: SymbolExtensions.GetContent(ISymbol)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.SymbolExtensions.GetContent(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetContent
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Symbols/SymbolExtensions.cs
    startLine: 35
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  syntax:
    content: public static LocationTagged<string> GetContent(this ISymbol symbol)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContent(symbol As ISymbol) As LocationTagged(Of String)
    parameters:
    - id: symbol
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    return:
      type: Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanBuilder
  nameWithType: SpanBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
- uid: Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  commentId: T:Microsoft.AspNetCore.Razor.Text.LocationTagged{System.String}
  parent: Microsoft.AspNetCore.Razor.Text
  definition: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
  name: LocationTagged<String>
  nameWithType: LocationTagged<String>
  fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged<System.String>
  nameWithType.vb: LocationTagged(Of String)
  fullname.vb: Microsoft.AspNetCore.Razor.Text.LocationTagged(Of System.String)
  name.vb: LocationTagged(Of String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
    name: LocationTagged
    nameWithType: LocationTagged
    fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
    name: LocationTagged
    nameWithType: LocationTagged
    fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
  commentId: T:Microsoft.AspNetCore.Razor.Text.LocationTagged`1
  parent: Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: LocationTagged<TValue>
  nameWithType: LocationTagged<TValue>
  fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged<TValue>
  nameWithType.vb: LocationTagged(Of TValue)
  fullname.vb: Microsoft.AspNetCore.Razor.Text.LocationTagged(Of TValue)
  name.vb: LocationTagged(Of TValue)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
    name: LocationTagged
    nameWithType: LocationTagged
    fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Text.LocationTagged`1
    name: LocationTagged
    nameWithType: LocationTagged
    fullName: Microsoft.AspNetCore.Razor.Text.LocationTagged
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Text
  commentId: N:Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Text
  nameWithType: Microsoft.AspNetCore.Razor.Text
  fullName: Microsoft.AspNetCore.Razor.Text
- uid: System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<ISymbol>, IEnumerable<ISymbol>>
  nameWithType: Func<IEnumerable<ISymbol>, IEnumerable<ISymbol>>
  fullName: System.Func<System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>>
  nameWithType.vb: Func(Of IEnumerable(Of ISymbol), IEnumerable(Of ISymbol))
  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol), System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol))
  name.vb: Func(Of IEnumerable(Of ISymbol), IEnumerable(Of ISymbol))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISymbol>
  nameWithType: IEnumerable<ISymbol>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>
  nameWithType.vb: IEnumerable(Of ISymbol)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  name.vb: IEnumerable(Of ISymbol)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: ISymbol
  nameWithType: ISymbol
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
