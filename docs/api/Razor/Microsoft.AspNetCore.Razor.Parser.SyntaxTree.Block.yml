### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  id: Block
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  children:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType},System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode},Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  langs:
  - csharp
  - vb
  name: Block
  nameWithType: Block
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Block
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: 'public class Block : SyntaxTreeNode'
    content.vb: >-
      Public Class Block
          Inherits SyntaxTreeNode
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  inheritedMembers:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder)
  id: '#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder)'
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Block(BlockBuilder)
  nameWithType: Block.Block(BlockBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Block(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Block(BlockBuilder source)
    content.vb: Public Sub New(source As BlockBuilder)
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType},System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode},Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.#ctor(System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType},System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode},Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)
  id: '#ctor(System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType},System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode},Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)'
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Block(Nullable<BlockType>, IReadOnlyList<SyntaxTreeNode>, IParentChunkGenerator)
  nameWithType: Block.Block(Nullable<BlockType>, IReadOnlyList<SyntaxTreeNode>, IParentChunkGenerator)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Block(System.Nullable<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType>, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode>, Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: protected Block(BlockType? type, IReadOnlyList<SyntaxTreeNode> contents, IParentChunkGenerator generator)
    content.vb: Protected Sub New(type As BlockType?, contents As IReadOnlyList(Of SyntaxTreeNode), generator As IParentChunkGenerator)
    parameters:
    - id: type
      type: System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType}
    - id: contents
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode}
    - id: generator
      type: Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator
  nameWithType.vb: Block.Block(Nullable(Of BlockType), IReadOnlyList(Of SyntaxTreeNode), IParentChunkGenerator)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Block(System.Nullable(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType), System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode), Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator)
  name.vb: Block(Nullable(Of BlockType), IReadOnlyList(Of SyntaxTreeNode), IParentChunkGenerator)
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  id: Type
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Block.Type
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Type
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Type
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 47
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public BlockType Type { get; }
    content.vb: Public ReadOnly Property Type As BlockType
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  id: Children
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Block.Children
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Children
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Children
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public IReadOnlyList<SyntaxTreeNode> Children { get; }
    content.vb: Public ReadOnly Property Children As IReadOnlyList(Of SyntaxTreeNode)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  id: ChunkGenerator
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: ChunkGenerator
  nameWithType: Block.ChunkGenerator
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ChunkGenerator
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ChunkGenerator
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public IParentChunkGenerator ChunkGenerator { get; }
    content.vb: Public ReadOnly Property ChunkGenerator As IParentChunkGenerator
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  id: IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: IsBlock
  nameWithType: Block.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.IsBlock
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 53
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override bool IsBlock { get; }
    content.vb: Public Overrides ReadOnly Property IsBlock As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  id: Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: Block.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Start
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Start
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override SourceLocation Start { get; }
    content.vb: Public Overrides ReadOnly Property Start As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  id: Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Block.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Length
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 74
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan
  id: FindFirstDescendentSpan
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: FindFirstDescendentSpan()
  nameWithType: Block.FindFirstDescendentSpan()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindFirstDescendentSpan()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: FindFirstDescendentSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span FindFirstDescendentSpan()
    content.vb: Public Function FindFirstDescendentSpan As Span
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan
  id: FindLastDescendentSpan
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: FindLastDescendentSpan()
  nameWithType: Block.FindLastDescendentSpan()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.FindLastDescendentSpan()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: FindLastDescendentSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 89
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span FindLastDescendentSpan()
    content.vb: Public Function FindLastDescendentSpan As Span
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  id: Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Accept(ParserVisitor)
  nameWithType: Block.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Accept
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 99
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override void Accept(ParserVisitor visitor)
    content.vb: Public Overrides Sub Accept(visitor As ParserVisitor)
    parameters:
    - id: visitor
      type: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Block.ToString()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ToString
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 104
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Block.Equals(Object)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Equals
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 115
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Block.GetHashCode()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 124
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten
  id: Flatten
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: Flatten()
  nameWithType: Block.Flatten()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.Flatten()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Flatten
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 134
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public virtual IEnumerable<Span> Flatten()
    content.vb: Public Overridable Function Flatten As IEnumerable(Of Span)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  id: LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: LocateOwner(TextChange)
  nameWithType: Block.LocateOwner(TextChange)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.LocateOwner(Microsoft.AspNetCore.Razor.Text.TextChange)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: LocateOwner
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 156
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span LocateOwner(TextChange change)
    content.vb: Public Function LocateOwner(change As TextChange) As Span
    parameters:
    - id: change
      type: Microsoft.AspNetCore.Razor.Text.TextChange
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  id: EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: Block.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EquivalentTo
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 208
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override bool EquivalentTo(SyntaxTreeNode node)
    content.vb: Public Overrides Function EquivalentTo(node As SyntaxTreeNode) As Boolean
    parameters:
    - id: node
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash
  id: GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block
  langs:
  - csharp
  - vb
  name: GetEquivalenceHash()
  nameWithType: Block.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Block.GetEquivalenceHash()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetEquivalenceHash
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Block.cs
    startLine: 219
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int GetEquivalenceHash()
    content.vb: Public Overrides Function GetEquivalenceHash As Integer
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SyntaxTreeNode
  nameWithType: SyntaxTreeNode
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Parent
  nameWithType: SyntaxTreeNode.Parent
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: BlockBuilder
  nameWithType: BlockBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockBuilder
- uid: System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType}
  commentId: T:System.Nullable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<BlockType>
  nameWithType: Nullable<BlockType>
  fullName: System.Nullable<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType>
  nameWithType.vb: Nullable(Of BlockType)
  fullname.vb: System.Nullable(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType)
  name.vb: Nullable(Of BlockType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
    name: BlockType
    nameWithType: BlockType
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
    name: BlockType
    nameWithType: BlockType
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<SyntaxTreeNode>
  nameWithType: IReadOnlyList<SyntaxTreeNode>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode>
  nameWithType.vb: IReadOnlyList(Of SyntaxTreeNode)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  name.vb: IReadOnlyList(Of SyntaxTreeNode)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator
  parent: Microsoft.AspNetCore.Razor.Chunks.Generators
  isExternal: false
  name: IParentChunkGenerator
  nameWithType: IParentChunkGenerator
  fullName: Microsoft.AspNetCore.Razor.Chunks.Generators.IParentChunkGenerator
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor.Chunks.Generators
  commentId: N:Microsoft.AspNetCore.Razor.Chunks.Generators
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Chunks.Generators
  nameWithType: Microsoft.AspNetCore.Razor.Chunks.Generators
  fullName: Microsoft.AspNetCore.Razor.Chunks.Generators
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: BlockType
  nameWithType: BlockType
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.BlockType
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: IsBlock
  nameWithType: SyntaxTreeNode.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Start
  nameWithType: SyntaxTreeNode.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Length
  nameWithType: SyntaxTreeNode.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Span
  nameWithType: Span
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Accept(ParserVisitor)
  nameWithType: SyntaxTreeNode.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: SyntaxTreeNode.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: SyntaxTreeNode.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserVisitor
  nameWithType: ParserVisitor
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Span>
  nameWithType: IEnumerable<Span>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span>
  nameWithType.vb: IEnumerable(Of Span)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span)
  name.vb: IEnumerable(Of Span)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
    name: Span
    nameWithType: Span
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
    name: Span
    nameWithType: Span
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Text.TextChange
  commentId: T:Microsoft.AspNetCore.Razor.Text.TextChange
  parent: Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: TextChange
  nameWithType: TextChange
  fullName: Microsoft.AspNetCore.Razor.Text.TextChange
- uid: Microsoft.AspNetCore.Razor.Text
  commentId: N:Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Text
  nameWithType: Microsoft.AspNetCore.Razor.Text
  fullName: Microsoft.AspNetCore.Razor.Text
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: SyntaxTreeNode.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: GetEquivalenceHash()
  nameWithType: SyntaxTreeNode.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: SyntaxTreeNode.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: SyntaxTreeNode.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
