### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult
  id: Tokenizer`2.StateResult
  parent: Microsoft.AspNetCore.Razor.Tokenizer
  children:
  - Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.#ctor(System.Nullable{System.Int32},`0)
  - Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.Result
  - Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.State
  langs:
  - csharp
  - vb
  name: Tokenizer<TSymbol, TSymbolType>.StateResult
  nameWithType: Tokenizer<TSymbol, TSymbolType>.StateResult
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer<TSymbol, TSymbolType>.StateResult
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: StateResult
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
    startLine: 427
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer
  syntax:
    content: protected struct StateResult
    content.vb: Protected Structure StateResult
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  nameWithType.vb: Tokenizer(Of TSymbol, TSymbolType).StateResult
  modifiers.csharp:
  - protected
  - struct
  modifiers.vb:
  - Protected
  - Structure
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer(Of TSymbol, TSymbolType).StateResult
  name.vb: Tokenizer(Of TSymbol, TSymbolType).StateResult
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.#ctor(System.Nullable{System.Int32},`0)
  commentId: M:Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.#ctor(System.Nullable{System.Int32},`0)
  id: '#ctor(System.Nullable{System.Int32},`0)'
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult
  langs:
  - csharp
  - vb
  name: StateResult(Nullable<Int32>, TSymbol)
  nameWithType: Tokenizer<TSymbol, TSymbolType>.StateResult.StateResult(Nullable<Int32>, TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer<TSymbol, TSymbolType>.StateResult.StateResult(System.Nullable<System.Int32>, TSymbol)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
    startLine: 429
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer
  syntax:
    content: public StateResult(int ? state, TSymbol result)
    content.vb: Public Sub New(state As Integer?, result As TSymbol)
    parameters:
    - id: state
      type: System.Nullable{System.Int32}
    - id: result
      type: '{TSymbol}'
  nameWithType.vb: Tokenizer(Of TSymbol, TSymbolType).StateResult.StateResult(Nullable(Of Int32), TSymbol)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer(Of TSymbol, TSymbolType).StateResult.StateResult(System.Nullable(Of System.Int32), TSymbol)
  name.vb: StateResult(Nullable(Of Int32), TSymbol)
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.State
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.State
  id: State
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult
  langs:
  - csharp
  - vb
  name: State
  nameWithType: Tokenizer<TSymbol, TSymbolType>.StateResult.State
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer<TSymbol, TSymbolType>.StateResult.State
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: State
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
    startLine: 435
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer
  syntax:
    content: public int ? State { get; }
    content.vb: Public ReadOnly Property State As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  nameWithType.vb: Tokenizer(Of TSymbol, TSymbolType).StateResult.State
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer(Of TSymbol, TSymbolType).StateResult.State
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.Result
  commentId: P:Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult.Result
  id: Result
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer`2.StateResult
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: Tokenizer<TSymbol, TSymbolType>.StateResult.Result
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer<TSymbol, TSymbolType>.StateResult.Result
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Result
    path: src/Microsoft.AspNetCore.Razor/Tokenizer/Tokenizer.cs
    startLine: 437
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Tokenizer
  syntax:
    content: public TSymbol Result { get; }
    content.vb: Public ReadOnly Property Result As TSymbol
    parameters: []
    return:
      type: '{TSymbol}'
  nameWithType.vb: Tokenizer(Of TSymbol, TSymbolType).StateResult.Result
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Tokenizer.Tokenizer(Of TSymbol, TSymbolType).StateResult.Result
references:
- uid: Microsoft.AspNetCore.Razor.Tokenizer
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer
  fullName: Microsoft.AspNetCore.Razor.Tokenizer
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSymbol}'
  commentId: '!:TSymbol'
  definition: TSymbol
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TSymbol
  isExternal: false
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
