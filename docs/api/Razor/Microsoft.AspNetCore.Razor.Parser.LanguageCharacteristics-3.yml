### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  commentId: T:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  id: LanguageCharacteristics`3
  parent: Microsoft.AspNetCore.Razor.Parser
  children:
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`2,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.FlipBracket(`2)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetSample(`2)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentBody(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStar(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStart(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsIdentifier(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKeyword(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKnownSymbolType(`1,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsNewLine(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsTransition(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsUnknown(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsWhiteSpace(`1)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.SplitSymbol(`1,System.Int32,`2)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  - Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(System.String)
  langs:
  - csharp
  - vb
  name: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: LanguageCharacteristics
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: >-
      public abstract class LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
          where TTokenizer : Tokenizer<TSymbol, TSymbolType> where TSymbol : SymbolBase<TSymbolType> where TSymbolType : struct
    content.vb: Public MustInherit Class LanguageCharacteristics(Of TTokenizer As Tokenizer(Of TSymbol, TSymbolType), TSymbol As SymbolBase(Of TSymbolType), TSymbolType As Structure)
    typeParameters:
    - id: TTokenizer
    - id: TSymbol
    - id: TSymbolType
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetSample(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetSample(`2)
  id: GetSample(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: GetSample(TSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.GetSample(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.GetSample(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetSample
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract string GetSample(TSymbolType type)
    content.vb: Public MustOverride Function GetSample(type As TSymbolType) As String
    parameters:
    - id: type
      type: '{TSymbolType}'
    return:
      type: System.String
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).GetSample(TSymbolType)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).GetSample(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
  id: CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: CreateTokenizer(ITextDocument)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateTokenizer(ITextDocument)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CreateTokenizer
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract TTokenizer CreateTokenizer(ITextDocument source)
    content.vb: Public MustOverride Function CreateTokenizer(source As ITextDocument) As TTokenizer
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Razor.Text.ITextDocument
    return:
      type: '{TTokenizer}'
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateTokenizer(ITextDocument)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateTokenizer(Microsoft.AspNetCore.Razor.Text.ITextDocument)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.FlipBracket(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.FlipBracket(`2)
  id: FlipBracket(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: FlipBracket(TSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.FlipBracket(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.FlipBracket(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: FlipBracket
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract TSymbolType FlipBracket(TSymbolType bracket)
    content.vb: Public MustOverride Function FlipBracket(bracket As TSymbolType) As TSymbolType
    parameters:
    - id: bracket
      type: '{TSymbolType}'
    return:
      type: '{TSymbolType}'
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).FlipBracket(TSymbolType)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).FlipBracket(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
  id: CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: CreateMarkerSymbol(SourceLocation)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateMarkerSymbol(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CreateMarkerSymbol
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract TSymbol CreateMarkerSymbol(SourceLocation location)
    content.vb: Public MustOverride Function CreateMarkerSymbol(location As SourceLocation) As TSymbol
    parameters:
    - id: location
      type: Microsoft.AspNetCore.Razor.SourceLocation
    return:
      type: '{TSymbol}'
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateMarkerSymbol(SourceLocation)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateMarkerSymbol(Microsoft.AspNetCore.Razor.SourceLocation)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(System.String)
  id: TokenizeString(System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: TokenizeString(String)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.TokenizeString(String)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.TokenizeString(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TokenizeString
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual IEnumerable<TSymbol> TokenizeString(string content)
    content.vb: Public Overridable Function TokenizeString(content As String) As IEnumerable(Of TSymbol)
    parameters:
    - id: content
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{{TSymbol}}
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).TokenizeString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).TokenizeString(System.String)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  id: TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: TokenizeString(SourceLocation, String)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.TokenizeString(SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TokenizeString
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual IEnumerable<TSymbol> TokenizeString(SourceLocation start, string input)
    content.vb: Public Overridable Function TokenizeString(start As SourceLocation, input As String) As IEnumerable(Of TSymbol)
    parameters:
    - id: start
      type: Microsoft.AspNetCore.Razor.SourceLocation
    - id: input
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{{TSymbol}}
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).TokenizeString(SourceLocation, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).TokenizeString(Microsoft.AspNetCore.Razor.SourceLocation, System.String)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsWhiteSpace(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsWhiteSpace(`1)
  id: IsWhiteSpace(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsWhiteSpace(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsWhiteSpace(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsWhiteSpace
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsWhiteSpace(TSymbol symbol)
    content.vb: Public Overridable Function IsWhiteSpace(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsWhiteSpace(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsWhiteSpace(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsNewLine(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsNewLine(`1)
  id: IsNewLine(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsNewLine(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsNewLine(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsNewLine(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsNewLine
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsNewLine(TSymbol symbol)
    content.vb: Public Overridable Function IsNewLine(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsNewLine(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsNewLine(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsIdentifier(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsIdentifier(`1)
  id: IsIdentifier(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsIdentifier(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsIdentifier(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsIdentifier(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsIdentifier
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsIdentifier(TSymbol symbol)
    content.vb: Public Overridable Function IsIdentifier(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsIdentifier(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsIdentifier(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKeyword(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKeyword(`1)
  id: IsKeyword(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsKeyword(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsKeyword(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsKeyword(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsKeyword
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 56
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsKeyword(TSymbol symbol)
    content.vb: Public Overridable Function IsKeyword(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsKeyword(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsKeyword(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsTransition(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsTransition(`1)
  id: IsTransition(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsTransition(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsTransition(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsTransition(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsTransition
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 61
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsTransition(TSymbol symbol)
    content.vb: Public Overridable Function IsTransition(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsTransition(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsTransition(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStart(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStart(`1)
  id: IsCommentStart(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsCommentStart(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentStart(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentStart(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsCommentStart
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsCommentStart(TSymbol symbol)
    content.vb: Public Overridable Function IsCommentStart(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentStart(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentStart(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStar(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentStar(`1)
  id: IsCommentStar(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsCommentStar(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentStar(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentStar(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsCommentStar
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsCommentStar(TSymbol symbol)
    content.vb: Public Overridable Function IsCommentStar(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentStar(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentStar(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentBody(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsCommentBody(`1)
  id: IsCommentBody(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsCommentBody(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentBody(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsCommentBody(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsCommentBody
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsCommentBody(TSymbol symbol)
    content.vb: Public Overridable Function IsCommentBody(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentBody(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsCommentBody(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsUnknown(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsUnknown(`1)
  id: IsUnknown(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsUnknown(TSymbol)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsUnknown(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsUnknown(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsUnknown
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 81
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsUnknown(TSymbol symbol)
    content.vb: Public Overridable Function IsUnknown(symbol As TSymbol) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsUnknown(TSymbol)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsUnknown(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKnownSymbolType(`1,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.IsKnownSymbolType(`1,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  id: IsKnownSymbolType(`1,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: IsKnownSymbolType(TSymbol, KnownSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsKnownSymbolType(TSymbol, KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.IsKnownSymbolType(TSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsKnownSymbolType
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 86
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsKnownSymbolType(TSymbol symbol, KnownSymbolType type)
    content.vb: Public Overridable Function IsKnownSymbolType(symbol As TSymbol, type As KnownSymbolType) As Boolean
    parameters:
    - id: symbol
      type: '{TSymbol}'
    - id: type
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsKnownSymbolType(TSymbol, KnownSymbolType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).IsKnownSymbolType(TSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.SplitSymbol(`1,System.Int32,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.SplitSymbol(`1,System.Int32,`2)
  id: SplitSymbol(`1,System.Int32,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: SplitSymbol(TSymbol, Int32, TSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.SplitSymbol(TSymbol, Int32, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.SplitSymbol(TSymbol, System.Int32, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SplitSymbol
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual Tuple<TSymbol, TSymbol> SplitSymbol(TSymbol symbol, int splitAt, TSymbolType leftType)
    content.vb: Public Overridable Function SplitSymbol(symbol As TSymbol, splitAt As Integer, leftType As TSymbolType) As Tuple(Of TSymbol, TSymbol)
    parameters:
    - id: symbol
      type: '{TSymbol}'
    - id: splitAt
      type: System.Int32
    - id: leftType
      type: '{TSymbolType}'
    return:
      type: System.Tuple{{TSymbol},{TSymbol}}
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).SplitSymbol(TSymbol, Int32, TSymbolType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).SplitSymbol(TSymbol, System.Int32, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  id: GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: GetKnownSymbolType(KnownSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.GetKnownSymbolType(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetKnownSymbolType
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract TSymbolType GetKnownSymbolType(KnownSymbolType type)
    content.vb: Public MustOverride Function GetKnownSymbolType(type As KnownSymbolType) As TSymbolType
    parameters:
    - id: type
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    return:
      type: '{TSymbolType}'
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).GetKnownSymbolType(KnownSymbolType)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).GetKnownSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  id: KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: KnowsSymbolType(KnownSymbolType)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.KnowsSymbolType(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: KnowsSymbolType
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 104
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool KnowsSymbolType(KnownSymbolType type)
    content.vb: Public Overridable Function KnowsSymbolType(type As KnownSymbolType) As Boolean
    parameters:
    - id: type
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    return:
      type: System.Boolean
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).KnowsSymbolType(KnownSymbolType)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).KnowsSymbolType(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`2,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3.CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`2,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  id: CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation,System.String,`2,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError})
  parent: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  langs:
  - csharp
  - vb
  name: CreateSymbol(SourceLocation, String, TSymbolType, IReadOnlyList<RazorError>)
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateSymbol(SourceLocation, String, TSymbolType, IReadOnlyList<RazorError>)
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>.CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation, System.String, TSymbolType, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.RazorError>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CreateSymbol
    path: src/Microsoft.AspNetCore.Razor/Parser/LanguageCharacteristics.cs
    startLine: 109
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected abstract TSymbol CreateSymbol(SourceLocation location, string content, TSymbolType type, IReadOnlyList<RazorError> errors)
    content.vb: Protected MustOverride Function CreateSymbol(location As SourceLocation, content As String, type As TSymbolType, errors As IReadOnlyList(Of RazorError)) As TSymbol
    parameters:
    - id: location
      type: Microsoft.AspNetCore.Razor.SourceLocation
    - id: content
      type: System.String
    - id: type
      type: '{TSymbolType}'
    - id: errors
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
    return:
      type: '{TSymbol}'
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateSymbol(SourceLocation, String, TSymbolType, IReadOnlyList(Of RazorError))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType).CreateSymbol(Microsoft.AspNetCore.Razor.SourceLocation, System.String, TSymbolType, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.RazorError))
  name.vb: CreateSymbol(SourceLocation, String, TSymbolType, IReadOnlyList(Of RazorError))
references:
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: '{TSymbolType}'
  commentId: '!:TSymbolType'
  definition: TSymbolType
  name: TSymbolType
  nameWithType: TSymbolType
  fullName: TSymbolType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TSymbolType
  isExternal: false
  name: TSymbolType
  nameWithType: TSymbolType
  fullName: TSymbolType
- uid: Microsoft.AspNetCore.Razor.Text.ITextDocument
  commentId: T:Microsoft.AspNetCore.Razor.Text.ITextDocument
  parent: Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: ITextDocument
  nameWithType: ITextDocument
  fullName: Microsoft.AspNetCore.Razor.Text.ITextDocument
- uid: '{TTokenizer}'
  commentId: '!:TTokenizer'
  definition: TTokenizer
  name: TTokenizer
  nameWithType: TTokenizer
  fullName: TTokenizer
- uid: Microsoft.AspNetCore.Razor.Text
  commentId: N:Microsoft.AspNetCore.Razor.Text
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Text
  nameWithType: Microsoft.AspNetCore.Razor.Text
  fullName: Microsoft.AspNetCore.Razor.Text
- uid: TTokenizer
  isExternal: false
  name: TTokenizer
  nameWithType: TTokenizer
  fullName: TTokenizer
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: '{TSymbol}'
  commentId: '!:TSymbol'
  definition: TSymbol
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: TSymbol
  isExternal: false
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
- uid: System.Collections.Generic.IEnumerable{{TSymbol}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSymbol>
  nameWithType: IEnumerable<TSymbol>
  fullName: System.Collections.Generic.IEnumerable<TSymbol>
  nameWithType.vb: IEnumerable(Of TSymbol)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSymbol)
  name.vb: IEnumerable(Of TSymbol)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: KnownSymbolType
  nameWithType: KnownSymbolType
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Tuple{{TSymbol},{TSymbol}}
  commentId: T:System.Tuple{`1,`1}
  parent: System
  definition: System.Tuple`2
  name: Tuple<TSymbol, TSymbol>
  nameWithType: Tuple<TSymbol, TSymbol>
  fullName: System.Tuple<TSymbol, TSymbol>
  nameWithType.vb: Tuple(Of TSymbol, TSymbol)
  fullname.vb: System.Tuple(Of TSymbol, TSymbol)
  name.vb: Tuple(Of TSymbol, TSymbol)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.RazorError}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<RazorError>
  nameWithType: IReadOnlyList<RazorError>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.RazorError>
  nameWithType.vb: IReadOnlyList(Of RazorError)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.RazorError)
  name.vb: IReadOnlyList(Of RazorError)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.RazorError
    name: RazorError
    nameWithType: RazorError
    fullName: Microsoft.AspNetCore.Razor.RazorError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
