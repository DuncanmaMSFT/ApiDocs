### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserBase
  id: ParserBase
  parent: Microsoft.AspNetCore.Razor.Parser
  children:
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  langs:
  - csharp
  - vb
  name: ParserBase
  nameWithType: ParserBase
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParserBase
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 9
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract class ParserBase
    content.vb: Public MustInherit Class ParserBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  id: Context
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ParserBase.Context
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Context
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual ParserContext Context { get; set; }
    content.vb: Public Overridable Property Context As ParserContext
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.ParserContext
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  id: IsMarkupParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: IsMarkupParser
  nameWithType: ParserBase.IsMarkupParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsMarkupParser
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual bool IsMarkupParser { get; }
    content.vb: Public Overridable ReadOnly Property IsMarkupParser As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  id: OtherParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: OtherParser
  nameWithType: ParserBase.OtherParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: OtherParser
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected abstract ParserBase OtherParser { get; }
    content.vb: Protected MustOverride ReadOnly Property OtherParser As ParserBase
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.ParserBase
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  id: BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: ParserBase.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: BuildSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract void BuildSpan(SpanBuilder span, SourceLocation start, string content)
    content.vb: Public MustOverride Sub BuildSpan(span As SpanBuilder, start As SourceLocation, content As String)
    parameters:
    - id: span
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    - id: start
      type: Microsoft.AspNetCore.Razor.SourceLocation
    - id: content
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  id: ParseBlock
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: ParseBlock()
  nameWithType: ParserBase.ParseBlock()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParseBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public abstract void ParseBlock()
    content.vb: Public MustOverride Sub ParseBlock
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  id: ParseDocument
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: ParseDocument()
  nameWithType: ParserBase.ParseDocument()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParseDocument
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual void ParseDocument()
    content.vb: Public Overridable Sub ParseDocument
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  id: ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  langs:
  - csharp
  - vb
  name: ParseSection(Tuple<String, String>, Boolean)
  nameWithType: ParserBase.ParseSection(Tuple<String, String>, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple<System.String, System.String>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParseSection
    path: src/Microsoft.AspNetCore.Razor/Parser/ParserBase.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public virtual void ParseSection(Tuple<string, string> nestingSequences, bool caseSensitive)
    content.vb: Public Overridable Sub ParseSection(nestingSequences As Tuple(Of String, String), caseSensitive As Boolean)
    parameters:
    - id: nestingSequences
      type: System.Tuple{System.String,System.String}
    - id: caseSensitive
      type: System.Boolean
  nameWithType.vb: ParserBase.ParseSection(Tuple(Of String, String), Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple(Of System.String, System.String), System.Boolean)
  name.vb: ParseSection(Tuple(Of String, String), Boolean)
references:
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.ParserContext
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserContext
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserContext
  nameWithType: ParserContext
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserBase
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserBase
  nameWithType: ParserBase
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanBuilder
  nameWithType: SpanBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: System.Tuple{System.String,System.String}
  commentId: T:System.Tuple{System.String,System.String}
  parent: System
  definition: System.Tuple`2
  name: Tuple<String, String>
  nameWithType: Tuple<String, String>
  fullName: System.Tuple<System.String, System.String>
  nameWithType.vb: Tuple(Of String, String)
  fullname.vb: System.Tuple(Of System.String, System.String)
  name.vb: Tuple(Of String, String)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
