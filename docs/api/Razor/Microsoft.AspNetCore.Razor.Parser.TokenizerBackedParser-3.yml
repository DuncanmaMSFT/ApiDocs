### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  id: TokenizerBackedParser`3
  parent: Microsoft.AspNetCore.Razor.Parser
  children:
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.#ctor
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  langs:
  - csharp
  - vb
  name: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TokenizerBackedParser
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: 'public abstract class TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType> : ParserBase where TTokenizer : Tokenizer<TSymbol, TSymbolType> where TSymbol : SymbolBase<TSymbolType> where TSymbolType : struct'
    content.vb: >-
      Public MustInherit Class TokenizerBackedParser(Of TTokenizer As Tokenizer(Of TSymbol, TSymbolType), TSymbol As SymbolBase(Of TSymbolType), TSymbolType As Structure)
          Inherits ParserBase
    typeParameters:
    - id: TTokenizer
    - id: TSymbol
    - id: TSymbolType
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Razor.Parser.ParserBase
  inheritedMembers:
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.#ctor
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: TokenizerBackedParser()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.TokenizerBackedParser()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.TokenizerBackedParser()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TokenizerBackedParser()
    content.vb: Protected Sub New
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).TokenizerBackedParser()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).TokenizerBackedParser()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  id: Span
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Span
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Span
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Span
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Span
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected SpanBuilder Span { get; set; }
    content.vb: Protected Property Span As SpanBuilder
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Span
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Span
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  id: Tokenizer
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Tokenizer
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Tokenizer
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Tokenizer
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Tokenizer
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TokenizerView<TTokenizer, TSymbol, TSymbolType> Tokenizer { get; }
    content.vb: Protected ReadOnly Property Tokenizer As TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView{{TTokenizer},{TSymbol},{TSymbolType}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Tokenizer
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Tokenizer
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  id: SpanConfig
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: SpanConfig
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SpanConfig
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SpanConfig
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SpanConfig
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected Action<SpanBuilder> SpanConfig { get; set; }
    content.vb: Protected Property SpanConfig As Action(Of SpanBuilder)
    parameters: []
    return:
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SpanConfig
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SpanConfig
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  id: CurrentSymbol
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: CurrentSymbol
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentSymbol
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CurrentSymbol
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TSymbol CurrentSymbol { get; }
    content.vb: Protected ReadOnly Property CurrentSymbol As TSymbol
    parameters: []
    return:
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentSymbol
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  id: PreviousSymbol
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PreviousSymbol
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PreviousSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PreviousSymbol
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PreviousSymbol
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TSymbol PreviousSymbol { get; }
    content.vb: Protected ReadOnly Property PreviousSymbol As TSymbol
    parameters: []
    return:
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PreviousSymbol
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PreviousSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  id: CurrentLocation
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: CurrentLocation
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentLocation
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentLocation
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CurrentLocation
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected SourceLocation CurrentLocation { get; }
    content.vb: Protected ReadOnly Property CurrentLocation As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentLocation
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentLocation
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  id: EndOfFile
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: EndOfFile
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EndOfFile
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EndOfFile
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EndOfFile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool EndOfFile { get; }
    content.vb: Protected ReadOnly Property EndOfFile As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EndOfFile
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EndOfFile
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  id: Language
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Language
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Language
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Language
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected abstract LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType> Language { get; }
    content.vb: Protected MustOverride ReadOnly Property Language As LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{{TTokenizer},{TSymbol},{TSymbolType}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Language
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Language
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  id: HandleEmbeddedTransition
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: HandleEmbeddedTransition()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: HandleEmbeddedTransition
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 50
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void HandleEmbeddedTransition()
    content.vb: Protected Overridable Sub HandleEmbeddedTransition
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  id: IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: IsAtEmbeddedTransition(Boolean, Boolean)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsAtEmbeddedTransition
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions)
    content.vb: Protected Overridable Function IsAtEmbeddedTransition(allowTemplatesAndComments As Boolean, allowTransitions As Boolean) As Boolean
    parameters:
    - id: allowTemplatesAndComments
      type: System.Boolean
    - id: allowTransitions
      type: System.Boolean
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition(Boolean, Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition(System.Boolean, System.Boolean)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  id: BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: BuildSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public override void BuildSpan(SpanBuilder span, SourceLocation start, string content)
    content.vb: Public Overrides Sub BuildSpan(span As SpanBuilder, start As SourceLocation, content As String)
    parameters:
    - id: span
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    - id: start
      type: Microsoft.AspNetCore.Razor.SourceLocation
    - id: content
      type: System.String
  overridden: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan(SpanBuilder, SourceLocation, String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  id: Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Initialize(SpanBuilder)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Initialize
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Initialize(SpanBuilder span)
    content.vb: Protected Sub Initialize(span As SpanBuilder)
    parameters:
    - id: span
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize(SpanBuilder)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  id: Lookahead(System.Int32)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Lookahead(Int32)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead(Int32)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Lookahead
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 75
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TSymbol Lookahead(int count)
    content.vb: Protected Function Lookahead(count As Integer) As TSymbol
    parameters:
    - id: count
      type: System.Int32
    return:
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead(Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead(System.Int32)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  id: NextToken
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: NextToken()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: NextToken
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool NextToken()
    content.vb: Protected Function NextToken As Boolean
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  id: SymbolTypeEquals(`2,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: SymbolTypeEquals(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals(TSymbolType, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SymbolTypeEquals
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected abstract bool SymbolTypeEquals(TSymbolType x, TSymbolType y)
    content.vb: Protected MustOverride Function SymbolTypeEquals(x As TSymbolType, y As TSymbolType) As Boolean
    parameters:
    - id: x
      type: '{TSymbolType}'
    - id: y
      type: '{TSymbolType}'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals(TSymbolType, TSymbolType)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals(TSymbolType, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  id: PutBack(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PutBack(TSymbol)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PutBack
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void PutBack(TSymbol symbol)
    content.vb: Protected Sub PutBack(symbol As TSymbol)
    parameters:
    - id: symbol
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(TSymbol)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  id: PutBack(System.Collections.Generic.IEnumerable{`1})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PutBack(IEnumerable<TSymbol>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(IEnumerable<TSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(System.Collections.Generic.IEnumerable<TSymbol>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PutBack
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  summary: "\nPut the specified symbols back in the input stream. The provided list MUST be in the ORDER THE SYMBOLS WERE READ. The\nlist WILL be reversed and the Putback(TSymbol) will be called on each item.\n"
  remarks: "\nIf a document contains symbols: a, b, c, d, e, f\nand AcceptWhile or AcceptUntil is used to collect until d\nthe list returned by AcceptWhile/Until will contain: a, b, c IN THAT ORDER\nthat is the correct format for providing to this method. The caller of this method would,\nin that case, want to put c, b and a back into the stream, so \"a, b, c\" is the CORRECT order\n"
  example: []
  syntax:
    content: protected void PutBack(IEnumerable<TSymbol> symbols)
    content.vb: Protected Sub PutBack(symbols As IEnumerable(Of TSymbol))
    parameters:
    - id: symbols
      type: System.Collections.Generic.IEnumerable{{TSymbol}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(IEnumerable(Of TSymbol))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(System.Collections.Generic.IEnumerable(Of TSymbol))
  name.vb: PutBack(IEnumerable(Of TSymbol))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  id: PutCurrentBack
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PutCurrentBack()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PutCurrentBack
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void PutCurrentBack()
    content.vb: Protected Sub PutCurrentBack
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  id: Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Balance(BalancingModes)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(BalancingModes)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Balance
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 65
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Balance(BalancingModes mode)
    content.vb: Protected Function Balance(mode As BalancingModes) As Boolean
    parameters:
    - id: mode
      type: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(BalancingModes)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  id: Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, TSymbolType, TSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Balance
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 84
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Balance(BalancingModes mode, TSymbolType left, TSymbolType right, SourceLocation start)
    content.vb: Protected Function Balance(mode As BalancingModes, left As TSymbolType, right As TSymbolType, start As SourceLocation) As Boolean
    parameters:
    - id: mode
      type: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    - id: left
      type: '{TSymbolType}'
    - id: right
      type: '{TSymbolType}'
    - id: start
      type: Microsoft.AspNetCore.Razor.SourceLocation
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, TSymbolType, TSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  id: NextIs(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: NextIs(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: NextIs
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 149
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool NextIs(TSymbolType type)
    content.vb: Protected Function NextIs(type As TSymbolType) As Boolean
    parameters:
    - id: type
      type: '{TSymbolType}'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  id: NextIs(`2[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: NextIs(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: NextIs
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 154
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool NextIs(params TSymbolType[] types)
    content.vb: Protected Function NextIs(ParamArray types As TSymbolType()) As Boolean
    parameters:
    - id: types
      type: '{TSymbolType}[]'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType())
  name.vb: NextIs(TSymbolType())
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  id: NextIs(System.Func{`1,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: NextIs(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(System.Func<TSymbol, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: NextIs
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 159
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool NextIs(Func<TSymbol, bool> condition)
    content.vb: Protected Function NextIs(condition As Func(Of TSymbol, Boolean)) As Boolean
    parameters:
    - id: condition
      type: System.Func{{TSymbol},System.Boolean}
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(Func(Of TSymbol, Boolean))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(System.Func(Of TSymbol, System.Boolean))
  name.vb: NextIs(Func(Of TSymbol, Boolean))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  id: Was(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Was(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Was
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 170
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Was(TSymbolType type)
    content.vb: Protected Function Was(type As TSymbolType) As Boolean
    parameters:
    - id: type
      type: '{TSymbolType}'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  id: At(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: At(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: At
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 175
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool At(TSymbolType type)
    content.vb: Protected Function At(type As TSymbolType) As Boolean
    parameters:
    - id: type
      type: '{TSymbolType}'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  id: AcceptAndMoveNext
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptAndMoveNext()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptAndMoveNext
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 180
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool AcceptAndMoveNext()
    content.vb: Protected Function AcceptAndMoveNext As Boolean
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  id: AcceptSingleWhiteSpaceCharacter
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptSingleWhiteSpaceCharacter()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptSingleWhiteSpaceCharacter
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 186
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TSymbol AcceptSingleWhiteSpaceCharacter()
    content.vb: Protected Function AcceptSingleWhiteSpaceCharacter As TSymbol
    return:
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  id: Accept(System.Collections.Generic.IEnumerable{`1})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Accept(IEnumerable<TSymbol>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(IEnumerable<TSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(System.Collections.Generic.IEnumerable<TSymbol>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Accept
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 199
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Accept(IEnumerable<TSymbol> symbols)
    content.vb: Protected Sub Accept(symbols As IEnumerable(Of TSymbol))
    parameters:
    - id: symbols
      type: System.Collections.Generic.IEnumerable{{TSymbol}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(IEnumerable(Of TSymbol))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(System.Collections.Generic.IEnumerable(Of TSymbol))
  name.vb: Accept(IEnumerable(Of TSymbol))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  id: Accept(`1)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Accept(TSymbol)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(TSymbol)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Accept
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 207
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Accept(TSymbol symbol)
    content.vb: Protected Sub Accept(symbol As TSymbol)
    parameters:
    - id: symbol
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(TSymbol)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(TSymbol)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  id: AcceptAll(`2[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptAll(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll(TSymbolType[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptAll
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 219
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool AcceptAll(params TSymbolType[] types)
    content.vb: Protected Function AcceptAll(ParamArray types As TSymbolType()) As Boolean
    parameters:
    - id: types
      type: '{TSymbolType}[]'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll(TSymbolType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll(TSymbolType())
  name.vb: AcceptAll(TSymbolType())
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  id: AddMarkerSymbolIfNecessary
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AddMarkerSymbolIfNecessary()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AddMarkerSymbolIfNecessary
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 232
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AddMarkerSymbolIfNecessary()
    content.vb: Protected Sub AddMarkerSymbolIfNecessary
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  id: AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AddMarkerSymbolIfNecessary(SourceLocation)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AddMarkerSymbolIfNecessary
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 237
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AddMarkerSymbolIfNecessary(SourceLocation location)
    content.vb: Protected Sub AddMarkerSymbolIfNecessary(location As SourceLocation)
    parameters:
    - id: location
      type: Microsoft.AspNetCore.Razor.SourceLocation
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary(SourceLocation)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  id: Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Output(SpanKind)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(SpanKind)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Output
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 245
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Output(SpanKind kind)
    content.vb: Protected Sub Output(kind As SpanKind)
    parameters:
    - id: kind
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(SpanKind)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  id: Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Output(SpanKind, AcceptedCharacters)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(SpanKind, AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Output
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 251
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Output(SpanKind kind, AcceptedCharacters accepts)
    content.vb: Protected Sub Output(kind As SpanKind, accepts As AcceptedCharacters)
    parameters:
    - id: kind
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    - id: accepts
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(SpanKind, AcceptedCharacters)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  id: Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Output(AcceptedCharacters)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Output
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 257
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Output(AcceptedCharacters accepts)
    content.vb: Protected Sub Output(accepts As AcceptedCharacters)
    parameters:
    - id: accepts
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(AcceptedCharacters)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  id: PushSpanConfig
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PushSpanConfig()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PushSpanConfig
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 272
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected IDisposable PushSpanConfig()
    content.vb: Protected Function PushSpanConfig As IDisposable
    return:
      type: System.IDisposable
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  id: PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PushSpanConfig(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PushSpanConfig
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 277
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected IDisposable PushSpanConfig(Action<SpanBuilder> newConfig)
    content.vb: Protected Function PushSpanConfig(newConfig As Action(Of SpanBuilder)) As IDisposable
    parameters:
    - id: newConfig
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
    return:
      type: System.IDisposable
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(Action(Of SpanBuilder))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: PushSpanConfig(Action(Of SpanBuilder))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  id: PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: PushSpanConfig
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 282
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected IDisposable PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>> newConfig)
    content.vb: Protected Function PushSpanConfig(newConfig As Action(Of SpanBuilder, Action(Of SpanBuilder))) As IDisposable
    parameters:
    - id: newConfig
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}}
    return:
      type: System.IDisposable
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  id: ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: ConfigureSpan(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ConfigureSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 289
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void ConfigureSpan(Action<SpanBuilder> config)
    content.vb: Protected Sub ConfigureSpan(config As Action(Of SpanBuilder))
    parameters:
    - id: config
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(Action(Of SpanBuilder))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: ConfigureSpan(Action(Of SpanBuilder))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  id: ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ConfigureSpan
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 295
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>> config)
    content.vb: Protected Sub ConfigureSpan(config As Action(Of SpanBuilder, Action(Of SpanBuilder)))
    parameters:
    - id: config
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  id: Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Expected(KnownSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Expected
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 309
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Expected(KnownSymbolType type)
    content.vb: Protected Sub Expected(type As KnownSymbolType)
    parameters:
    - id: type
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(KnownSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  id: Expected(`2[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Expected(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(TSymbolType[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Expected
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 314
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void Expected(params TSymbolType[] types)
    content.vb: Protected Sub Expected(ParamArray types As TSymbolType())
    parameters:
    - id: types
      type: '{TSymbolType}[]'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(TSymbolType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(TSymbolType())
  name.vb: Expected(TSymbolType())
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  id: Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Optional(KnownSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Optional
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 320
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Optional(KnownSymbolType type)
    content.vb: Protected Function Optional(type As KnownSymbolType) As Boolean
    parameters:
    - id: type
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(KnownSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  id: Optional(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Optional(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Optional
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 325
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Optional(TSymbolType type)
    content.vb: Protected Function Optional(type As TSymbolType) As Boolean
    parameters:
    - id: type
      type: '{TSymbolType}'
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  id: Required(`2,System.Boolean,System.Func{System.String,System.String})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: Required(TSymbolType, Boolean, Func<String, String>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required(TSymbolType, Boolean, Func<String, String>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required(TSymbolType, System.Boolean, System.Func<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Required
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 335
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool Required(TSymbolType expected, bool errorIfNotFound, Func<string, string> errorBase)
    content.vb: Protected Function Required(expected As TSymbolType, errorIfNotFound As Boolean, errorBase As Func(Of String, String)) As Boolean
    parameters:
    - id: expected
      type: '{TSymbolType}'
    - id: errorIfNotFound
      type: System.Boolean
    - id: errorBase
      type: System.Func{System.String,System.String}
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required(TSymbolType, Boolean, Func(Of String, String))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required(TSymbolType, System.Boolean, System.Func(Of System.String, System.String))
  name.vb: Required(TSymbolType, Boolean, Func(Of String, String))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  id: EnsureCurrent
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: EnsureCurrent()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EnsureCurrent
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 373
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool EnsureCurrent()
    content.vb: Protected Function EnsureCurrent As Boolean
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  id: AcceptWhile(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhile(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 382
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptWhile(TSymbolType type)
    content.vb: Protected Sub AcceptWhile(type As TSymbolType)
    parameters:
    - id: type
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  id: AcceptWhile(`2,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhile(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 388
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptWhile(TSymbolType type1, TSymbolType type2)
    content.vb: Protected Sub AcceptWhile(type1 As TSymbolType, type2 As TSymbolType)
    parameters:
    - id: type1
      type: '{TSymbolType}'
    - id: type2
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  id: AcceptWhile(`2,`2,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 393
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptWhile(TSymbolType type1, TSymbolType type2, TSymbolType type3)
    content.vb: Protected Sub AcceptWhile(type1 As TSymbolType, type2 As TSymbolType, type3 As TSymbolType)
    parameters:
    - id: type1
      type: '{TSymbolType}'
    - id: type2
      type: '{TSymbolType}'
    - id: type3
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  id: AcceptWhile(`2[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhile(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 398
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptWhile(params TSymbolType[] types)
    content.vb: Protected Sub AcceptWhile(ParamArray types As TSymbolType())
    parameters:
    - id: types
      type: '{TSymbolType}[]'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType())
  name.vb: AcceptWhile(TSymbolType())
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  id: AcceptUntil(`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptUntil(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptUntil
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 403
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptUntil(TSymbolType type)
    content.vb: Protected Sub AcceptUntil(type As TSymbolType)
    parameters:
    - id: type
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  id: AcceptUntil(`2,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptUntil(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptUntil
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 409
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptUntil(TSymbolType type1, TSymbolType type2)
    content.vb: Protected Sub AcceptUntil(type1 As TSymbolType, type2 As TSymbolType)
    parameters:
    - id: type1
      type: '{TSymbolType}'
    - id: type2
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  id: AcceptUntil(`2,`2,`2)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptUntil
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 414
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptUntil(TSymbolType type1, TSymbolType type2, TSymbolType type3)
    content.vb: Protected Sub AcceptUntil(type1 As TSymbolType, type2 As TSymbolType, type3 As TSymbolType)
    parameters:
    - id: type1
      type: '{TSymbolType}'
    - id: type2
      type: '{TSymbolType}'
    - id: type3
      type: '{TSymbolType}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  id: AcceptUntil(`2[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptUntil(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptUntil
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 419
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptUntil(params TSymbolType[] types)
    content.vb: Protected Sub AcceptUntil(ParamArray types As TSymbolType())
    parameters:
    - id: types
      type: '{TSymbolType}[]'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType())
  name.vb: AcceptUntil(TSymbolType())
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  id: AcceptWhile(System.Func{`1,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhile(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(System.Func<TSymbol, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 424
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void AcceptWhile(Func<TSymbol, bool> condition)
    content.vb: Protected Sub AcceptWhile(condition As Func(Of TSymbol, Boolean))
    parameters:
    - id: condition
      type: System.Func{{TSymbol},System.Boolean}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(Func(Of TSymbol, Boolean))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(System.Func(Of TSymbol, System.Boolean))
  name.vb: AcceptWhile(Func(Of TSymbol, Boolean))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  id: ReadWhile(System.Func{`1,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: ReadWhile(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile(System.Func<TSymbol, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ReadWhile
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 429
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected IEnumerable<TSymbol> ReadWhile(Func<TSymbol, bool> condition)
    content.vb: Protected Function ReadWhile(condition As Func(Of TSymbol, Boolean)) As IEnumerable(Of TSymbol)
    parameters:
    - id: condition
      type: System.Func{{TSymbol},System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{{TSymbol}}
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile(Func(Of TSymbol, Boolean))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile(System.Func(Of TSymbol, System.Boolean))
  name.vb: ReadWhile(Func(Of TSymbol, Boolean))
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  id: AcceptWhiteSpaceInLines
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AcceptWhiteSpaceInLines()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptWhiteSpaceInLines
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 434
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected TSymbol AcceptWhiteSpaceInLines()
    content.vb: Protected Function AcceptWhiteSpaceInLines As TSymbol
    return:
      type: '{TSymbol}'
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  id: AtIdentifier(System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: AtIdentifier(Boolean)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier(Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AtIdentifier
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 461
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool AtIdentifier(bool allowKeywords)
    content.vb: Protected Function AtIdentifier(allowKeywords As Boolean) As Boolean
    parameters:
    - id: allowKeywords
      type: System.Boolean
    return:
      type: System.Boolean
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier(Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier(System.Boolean)
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  id: OutputSpanBeforeRazorComment
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: OutputSpanBeforeRazorComment()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: OutputSpanBeforeRazorComment
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 491
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void OutputSpanBeforeRazorComment()
    content.vb: Protected Overridable Sub OutputSpanBeforeRazorComment
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment()
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  id: RazorComment
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  langs:
  - csharp
  - vb
  name: RazorComment()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: RazorComment
    path: src/Microsoft.AspNetCore.Razor/Parser/TokenizerBackedParser.Helpers.cs
    startLine: 502
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void RazorComment()
    content.vb: Protected Sub RazorComment
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment()
references:
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserBase
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserBase
  nameWithType: ParserBase
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: Context
  nameWithType: ParserBase.Context
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: IsMarkupParser
  nameWithType: ParserBase.IsMarkupParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: OtherParser
  nameWithType: ParserBase.OtherParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: ParseBlock()
  nameWithType: ParserBase.ParseBlock()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
    name: ParseBlock
    nameWithType: ParserBase.ParseBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
    name: ParseBlock
    nameWithType: ParserBase.ParseBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: ParseDocument()
  nameWithType: ParserBase.ParseDocument()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
    name: ParseDocument
    nameWithType: ParserBase.ParseDocument
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
    name: ParseDocument
    nameWithType: ParserBase.ParseDocument
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: true
  name: ParseSection(Tuple<String, String>, Boolean)
  nameWithType: ParserBase.ParseSection(Tuple<String, String>, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple<System.String, System.String>, System.Boolean)
  nameWithType.vb: ParserBase.ParseSection(Tuple(Of String, String), Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple(Of System.String, System.String), System.Boolean)
  name.vb: ParseSection(Tuple(Of String, String), Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
    name: ParseSection
    nameWithType: ParserBase.ParseSection
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
    name: ParseSection
    nameWithType: ParserBase.ParseSection
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanBuilder
  nameWithType: SpanBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView{{TTokenizer},{TSymbol},{TSymbolType}}
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView{`0,`1,`2}
  parent: Microsoft.AspNetCore.Razor.Tokenizer
  definition: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
  name: TokenizerView<TTokenizer, TSymbol, TSymbolType>
  nameWithType: TokenizerView<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
    name: TokenizerView
    nameWithType: TokenizerView
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
    name: TokenizerView
    nameWithType: TokenizerView
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
  isExternal: false
  name: TokenizerView<TTokenizer, TSymbol, TSymbolType>
  nameWithType: TokenizerView<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: TokenizerView(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
    name: TokenizerView
    nameWithType: TokenizerView
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView`3
    name: TokenizerView
    nameWithType: TokenizerView
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.TokenizerView
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer
  fullName: Microsoft.AspNetCore.Razor.Tokenizer
- uid: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  commentId: T:System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  parent: System
  definition: System.Action`1
  name: Action<SpanBuilder>
  nameWithType: Action<SpanBuilder>
  fullName: System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>
  nameWithType.vb: Action(Of SpanBuilder)
  fullname.vb: System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  name.vb: Action(Of SpanBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TSymbol}'
  commentId: '!:TSymbol'
  definition: TSymbol
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
- uid: TSymbol
  isExternal: false
  name: TSymbol
  nameWithType: TSymbol
  fullName: TSymbol
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{{TTokenizer},{TSymbol},{TSymbolType}}
  commentId: T:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{`0,`1,`2}
  parent: Microsoft.AspNetCore.Razor.Parser
  definition: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  name: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  commentId: T:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  isExternal: false
  name: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: true
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: ParserBase.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: ParserBase.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: ParserBase.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{TSymbolType}'
  commentId: '!:TSymbolType'
  definition: TSymbolType
  name: TSymbolType
  nameWithType: TSymbolType
  fullName: TSymbolType
- uid: TSymbolType
  isExternal: false
  name: TSymbolType
  nameWithType: TSymbolType
  fullName: TSymbolType
- uid: System.Collections.Generic.IEnumerable{{TSymbol}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSymbol>
  nameWithType: IEnumerable<TSymbol>
  fullName: System.Collections.Generic.IEnumerable<TSymbol>
  nameWithType.vb: IEnumerable(Of TSymbol)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSymbol)
  name.vb: IEnumerable(Of TSymbol)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  commentId: T:Microsoft.AspNetCore.Razor.Parser.BalancingModes
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: BalancingModes
  nameWithType: BalancingModes
  fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
- uid: '{TSymbolType}[]'
  name: TSymbolType[]
  nameWithType: TSymbolType[]
  fullName: TSymbolType[]
  nameWithType.vb: TSymbolType()
  fullname.vb: TSymbolType()
  name.vb: TSymbolType()
  spec.csharp:
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Func{{TSymbol},System.Boolean}
  commentId: T:System.Func{`1,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TSymbol, Boolean>
  nameWithType: Func<TSymbol, Boolean>
  fullName: System.Func<TSymbol, System.Boolean>
  nameWithType.vb: Func(Of TSymbol, Boolean)
  fullname.vb: System.Func(Of TSymbol, System.Boolean)
  name.vb: Func(Of TSymbol, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanKind
  nameWithType: SpanKind
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: AcceptedCharacters
  nameWithType: AcceptedCharacters
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}}
  commentId: T:System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}}
  parent: System
  definition: System.Action`2
  name: Action<SpanBuilder, Action<SpanBuilder>>
  nameWithType: Action<SpanBuilder, Action<SpanBuilder>>
  fullName: System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>
  nameWithType.vb: Action(Of SpanBuilder, Action(Of SpanBuilder))
  fullname.vb: System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: Action(Of SpanBuilder, Action(Of SpanBuilder))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: KnownSymbolType
  nameWithType: KnownSymbolType
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
- uid: System.Func{System.String,System.String}
  commentId: T:System.Func{System.String,System.String}
  parent: System
  definition: System.Func`2
  name: Func<String, String>
  nameWithType: Func<String, String>
  fullName: System.Func<System.String, System.String>
  nameWithType.vb: Func(Of String, String)
  fullname.vb: System.Func(Of System.String, System.String)
  name.vb: Func(Of String, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
