### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  commentId: T:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  id: CSharpCodeParser
  parent: Microsoft.AspNetCore.Razor.Parser
  children:
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.#ctor
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AcceptIf(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AddTagHelperDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AssertDirective(System.String)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.BaseTypeDirective(System.String,System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator})
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.FunctionsDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.HandleEmbeddedTransition
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirectiveCore
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsNested
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsSpacingToken(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Keywords
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Language
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.MapDirectives(System.Action,System.String[])
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.NamespaceOrTypeName
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OtherParser
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OutputSpanBeforeRazorComment
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ParseBlock
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.RemoveTagHelperDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ReservedDirective(System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SectionDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TagHelperPrefixDirective
  - Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TryGetDirectiveHandler(System.String,System.Action@)
  langs:
  - csharp
  - vb
  name: CSharpCodeParser
  nameWithType: CSharpCodeParser
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CSharpCodeParser
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: 'public class CSharpCodeParser : TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>'
    content.vb: >-
      Public Class CSharpCodeParser
          Inherits TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Razor.Parser.ParserBase
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  inheritedMembers:
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Span
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Tokenizer
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SpanConfig
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentSymbol
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PreviousSymbol
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentLocation
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EndOfFile
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Language
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.HandleEmbeddedTransition
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Lookahead(System.Int32)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextToken
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutCurrentBack
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Was(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAndMoveNext
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptSingleWhiteSpaceCharacter
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAll(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Required(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,System.Boolean,System.Func{System.String,System.String})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EnsureCurrent
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ReadWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhiteSpaceInLines
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AtIdentifier(System.Boolean)
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.OutputSpanBeforeRazorComment
  - Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.RazorComment
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.#ctor
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: CSharpCodeParser()
  nameWithType: CSharpCodeParser.CSharpCodeParser()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CSharpCodeParser()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 42
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public CSharpCodeParser()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Keywords
  commentId: P:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Keywords
  id: Keywords
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: Keywords
  nameWithType: CSharpCodeParser.Keywords
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Keywords
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Keywords
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 50
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected ISet<string> Keywords { get; }
    content.vb: Protected ReadOnly Property Keywords As ISet(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ISet{System.String}
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsNested
  commentId: P:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsNested
  id: IsNested
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: IsNested
  nameWithType: CSharpCodeParser.IsNested
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsNested
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsNested
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public bool IsNested { get; set; }
    content.vb: Public Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OtherParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OtherParser
  id: OtherParser
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: OtherParser
  nameWithType: CSharpCodeParser.OtherParser
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OtherParser
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: OtherParser
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override ParserBase OtherParser { get; }
    content.vb: Protected Overrides ReadOnly Property OtherParser As ParserBase
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.ParserBase
  overridden: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Language
  commentId: P:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Language
  id: Language
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: Language
  nameWithType: CSharpCodeParser.Language
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.Language
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Language
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override LanguageCharacteristics<CSharpTokenizer, CSharpSymbol, CSharpSymbolType> Language { get; }
    content.vb: Protected Overrides ReadOnly Property Language As LanguageCharacteristics(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  overridden: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Language
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  id: SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: SymbolTypeEquals(CSharpSymbolType, CSharpSymbolType)
  nameWithType: CSharpCodeParser.SymbolTypeEquals(CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SymbolTypeEquals
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override bool SymbolTypeEquals(CSharpSymbolType x, CSharpSymbolType y)
    content.vb: Protected Overrides Function SymbolTypeEquals(x As CSharpSymbolType, y As CSharpSymbolType) As Boolean
    parameters:
    - id: x
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    - id: y
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.MapDirectives(System.Action,System.String[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.MapDirectives(System.Action,System.String[])
  id: MapDirectives(System.Action,System.String[])
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: MapDirectives(Action, String[])
  nameWithType: CSharpCodeParser.MapDirectives(Action, String[])
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.MapDirectives(System.Action, System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: MapDirectives
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void MapDirectives(Action handler, params string[] directives)
    content.vb: Protected Sub MapDirectives(handler As Action, ParamArray directives As String())
    parameters:
    - id: handler
      type: System.Action
    - id: directives
      type: System.String[]
  nameWithType.vb: CSharpCodeParser.MapDirectives(Action, String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.MapDirectives(System.Action, System.String())
  name.vb: MapDirectives(Action, String())
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TryGetDirectiveHandler(System.String,System.Action@)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TryGetDirectiveHandler(System.String,System.Action@)
  id: TryGetDirectiveHandler(System.String,System.Action@)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: TryGetDirectiveHandler(String, out Action)
  nameWithType: CSharpCodeParser.TryGetDirectiveHandler(String, out Action)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TryGetDirectiveHandler(System.String, out System.Action)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TryGetDirectiveHandler
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 75
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool TryGetDirectiveHandler(string directive, out Action handler)
    content.vb: Protected Function TryGetDirectiveHandler(directive As String, ByRef handler As Action) As Boolean
    parameters:
    - id: directive
      type: System.String
    - id: handler
      type: System.Action
    return:
      type: System.Boolean
  nameWithType.vb: CSharpCodeParser.TryGetDirectiveHandler(String, ByRef Action)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TryGetDirectiveHandler(System.String, ByRef System.Action)
  name.vb: TryGetDirectiveHandler(String, ByRef Action)
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  id: At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: At(CSharpKeyword)
  nameWithType: CSharpCodeParser.At(CSharpKeyword)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: At
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool At(CSharpKeyword keyword)
    content.vb: Protected Function At(keyword As CSharpKeyword) As Boolean
    parameters:
    - id: keyword
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AcceptIf(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AcceptIf(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  id: AcceptIf(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: AcceptIf(CSharpKeyword)
  nameWithType: CSharpCodeParser.AcceptIf(CSharpKeyword)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AcceptIf(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AcceptIf
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 119
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool AcceptIf(CSharpKeyword keyword)
    content.vb: Protected Function AcceptIf(keyword As CSharpKeyword) As Boolean
    parameters:
    - id: keyword
      type: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsSpacingToken(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsSpacingToken(System.Boolean,System.Boolean)
  id: IsSpacingToken(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: IsSpacingToken(Boolean, Boolean)
  nameWithType: CSharpCodeParser.IsSpacingToken(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsSpacingToken(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsSpacingToken
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 129
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected static Func<CSharpSymbol, bool> IsSpacingToken(bool includeNewLines, bool includeComments)
    content.vb: Protected Shared Function IsSpacingToken(includeNewLines As Boolean, includeComments As Boolean) As Func(Of CSharpSymbol, Boolean)
    parameters:
    - id: includeNewLines
      type: System.Boolean
    - id: includeComments
      type: System.Boolean
    return:
      type: System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean}
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ParseBlock
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ParseBlock
  id: ParseBlock
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: ParseBlock()
  nameWithType: CSharpCodeParser.ParseBlock()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ParseBlock()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ParseBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 136
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: public override void ParseBlock()
    content.vb: Public Overrides Sub ParseBlock
  overridden: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock
  id: CompleteBlock
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: CompleteBlock()
  nameWithType: CSharpCodeParser.CompleteBlock()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CompleteBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 488
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void CompleteBlock()
    content.vb: Protected Sub CompleteBlock
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean)
  id: CompleteBlock(System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: CompleteBlock(Boolean)
  nameWithType: CSharpCodeParser.CompleteBlock(Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CompleteBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 493
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void CompleteBlock(bool insertMarkerIfNecessary)
    content.vb: Protected Sub CompleteBlock(insertMarkerIfNecessary As Boolean)
    parameters:
    - id: insertMarkerIfNecessary
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean,System.Boolean)
  id: CompleteBlock(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: CompleteBlock(Boolean, Boolean)
  nameWithType: CSharpCodeParser.CompleteBlock(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.CompleteBlock(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: CompleteBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 498
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void CompleteBlock(bool insertMarkerIfNecessary, bool captureWhitespaceToEndOfLine)
    content.vb: Protected Sub CompleteBlock(insertMarkerIfNecessary As Boolean, captureWhitespaceToEndOfLine As Boolean)
    parameters:
    - id: insertMarkerIfNecessary
      type: System.Boolean
    - id: captureWhitespaceToEndOfLine
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  id: IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: IsAtEmbeddedTransition(Boolean, Boolean)
  nameWithType: CSharpCodeParser.IsAtEmbeddedTransition(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsAtEmbeddedTransition
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 634
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions)
    content.vb: Protected Overrides Function IsAtEmbeddedTransition(allowTemplatesAndComments As Boolean, allowTransitions As Boolean) As Boolean
    parameters:
    - id: allowTemplatesAndComments
      type: System.Boolean
    - id: allowTransitions
      type: System.Boolean
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.HandleEmbeddedTransition
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.HandleEmbeddedTransition
  id: HandleEmbeddedTransition
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: HandleEmbeddedTransition()
  nameWithType: CSharpCodeParser.HandleEmbeddedTransition()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.HandleEmbeddedTransition()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: HandleEmbeddedTransition
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.cs
    startLine: 643
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override void HandleEmbeddedTransition()
    content.vb: Protected Overrides Sub HandleEmbeddedTransition
  overridden: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.HandleEmbeddedTransition
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TagHelperPrefixDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TagHelperPrefixDirective
  id: TagHelperPrefixDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: TagHelperPrefixDirective()
  nameWithType: CSharpCodeParser.TagHelperPrefixDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.TagHelperPrefixDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: TagHelperPrefixDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void TagHelperPrefixDirective()
    content.vb: Protected Overridable Sub TagHelperPrefixDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AddTagHelperDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AddTagHelperDirective
  id: AddTagHelperDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: AddTagHelperDirective()
  nameWithType: CSharpCodeParser.AddTagHelperDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AddTagHelperDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AddTagHelperDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 32
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void AddTagHelperDirective()
    content.vb: Protected Overridable Sub AddTagHelperDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.RemoveTagHelperDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.RemoveTagHelperDirective
  id: RemoveTagHelperDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: RemoveTagHelperDirective()
  nameWithType: CSharpCodeParser.RemoveTagHelperDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.RemoveTagHelperDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: RemoveTagHelperDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void RemoveTagHelperDirective()
    content.vb: Protected Overridable Sub RemoveTagHelperDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SectionDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SectionDirective
  id: SectionDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: SectionDirective()
  nameWithType: CSharpCodeParser.SectionDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.SectionDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: SectionDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void SectionDirective()
    content.vb: Protected Overridable Sub SectionDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.FunctionsDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.FunctionsDirective
  id: FunctionsDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: FunctionsDirective()
  nameWithType: CSharpCodeParser.FunctionsDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.FunctionsDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: FunctionsDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 156
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void FunctionsDirective()
    content.vb: Protected Overridable Sub FunctionsDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirective
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirective
  id: InheritsDirective
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: InheritsDirective()
  nameWithType: CSharpCodeParser.InheritsDirective()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirective()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: InheritsDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 217
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void InheritsDirective()
    content.vb: Protected Overridable Sub InheritsDirective
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AssertDirective(System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AssertDirective(System.String)
  id: AssertDirective(System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: AssertDirective(String)
  nameWithType: CSharpCodeParser.AssertDirective(String)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.AssertDirective(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: AssertDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 226
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: >-
      [Conditional("DEBUG")]

      protected void AssertDirective(string directive)
    content.vb: >-
      <Conditional("DEBUG")>

      Protected Sub AssertDirective(directive As String)
    parameters:
    - id: directive
      type: System.String
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirectiveCore
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirectiveCore
  id: InheritsDirectiveCore
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: InheritsDirectiveCore()
  nameWithType: CSharpCodeParser.InheritsDirectiveCore()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.InheritsDirectiveCore()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: InheritsDirectiveCore
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 233
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void InheritsDirectiveCore()
    content.vb: Protected Sub InheritsDirectiveCore
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.BaseTypeDirective(System.String,System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.BaseTypeDirective(System.String,System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator})
  id: BaseTypeDirective(System.String,System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator})
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: BaseTypeDirective(String, Func<String, SpanChunkGenerator>)
  nameWithType: CSharpCodeParser.BaseTypeDirective(String, Func<String, SpanChunkGenerator>)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.BaseTypeDirective(System.String, System.Func<System.String, Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: BaseTypeDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Directives.cs
    startLine: 240
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected void BaseTypeDirective(string noTypeNameError, Func<string, SpanChunkGenerator> createChunkGenerator)
    content.vb: Protected Sub BaseTypeDirective(noTypeNameError As String, createChunkGenerator As Func(Of String, SpanChunkGenerator))
    parameters:
    - id: noTypeNameError
      type: System.String
    - id: createChunkGenerator
      type: System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator}
  nameWithType.vb: CSharpCodeParser.BaseTypeDirective(String, Func(Of String, SpanChunkGenerator))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.BaseTypeDirective(System.String, System.Func(Of System.String, Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator))
  name.vb: BaseTypeDirective(String, Func(Of String, SpanChunkGenerator))
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ReservedDirective(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ReservedDirective(System.Boolean)
  id: ReservedDirective(System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: ReservedDirective(Boolean)
  nameWithType: CSharpCodeParser.ReservedDirective(Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.ReservedDirective(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ReservedDirective
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected virtual void ReservedDirective(bool topLevel)
    content.vb: Protected Overridable Sub ReservedDirective(topLevel As Boolean)
    parameters:
    - id: topLevel
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.NamespaceOrTypeName
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.NamespaceOrTypeName
  id: NamespaceOrTypeName
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: NamespaceOrTypeName()
  nameWithType: CSharpCodeParser.NamespaceOrTypeName()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.NamespaceOrTypeName()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: NamespaceOrTypeName
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
    startLine: 186
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected bool NamespaceOrTypeName()
    content.vb: Protected Function NamespaceOrTypeName As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OutputSpanBeforeRazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OutputSpanBeforeRazorComment
  id: OutputSpanBeforeRazorComment
  parent: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser
  langs:
  - csharp
  - vb
  name: OutputSpanBeforeRazorComment()
  nameWithType: CSharpCodeParser.OutputSpanBeforeRazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.CSharpCodeParser.OutputSpanBeforeRazorComment()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: OutputSpanBeforeRazorComment
    path: src/Microsoft.AspNetCore.Razor/Parser/CSharpCodeParser.Statements.cs
    startLine: 727
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser
  syntax:
    content: protected override void OutputSpanBeforeRazorComment()
    content.vb: Protected Overrides Sub OutputSpanBeforeRazorComment
  overridden: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.OutputSpanBeforeRazorComment
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserBase
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserBase
  nameWithType: ParserBase
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  parent: Microsoft.AspNetCore.Razor.Parser
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  name: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  name.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
    name: TokenizerBackedParser
    nameWithType: TokenizerBackedParser
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
    name: CSharpTokenizer
    nameWithType: CSharpTokenizer
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
    name: TokenizerBackedParser
    nameWithType: TokenizerBackedParser
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
    name: CSharpTokenizer
    nameWithType: CSharpTokenizer
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Span
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Span
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  name: Span
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Span
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Span
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Span
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Span
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Tokenizer
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Tokenizer
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  name: Tokenizer
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Tokenizer
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Tokenizer
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Tokenizer
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Tokenizer
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SpanConfig
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SpanConfig
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  name: SpanConfig
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.SpanConfig
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.SpanConfig
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).SpanConfig
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).SpanConfig
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentSymbol
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  name: CurrentSymbol
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.CurrentSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.CurrentSymbol
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).CurrentSymbol
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).CurrentSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PreviousSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PreviousSymbol
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  name: PreviousSymbol
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PreviousSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PreviousSymbol
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PreviousSymbol
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PreviousSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentLocation
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.CurrentLocation
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  name: CurrentLocation
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.CurrentLocation
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.CurrentLocation
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).CurrentLocation
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).CurrentLocation
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EndOfFile
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EndOfFile
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  name: EndOfFile
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.EndOfFile
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.EndOfFile
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).EndOfFile
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).EndOfFile
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Language
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Language
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  name: Language
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Language
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Language
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Language
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Language
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.HandleEmbeddedTransition
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.HandleEmbeddedTransition
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  name: HandleEmbeddedTransition()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.HandleEmbeddedTransition()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.HandleEmbeddedTransition()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).HandleEmbeddedTransition()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).HandleEmbeddedTransition()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
    name: HandleEmbeddedTransition
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.HandleEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.HandleEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
    name: HandleEmbeddedTransition
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).HandleEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).HandleEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  name: IsAtEmbeddedTransition(Boolean, Boolean)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.IsAtEmbeddedTransition(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).IsAtEmbeddedTransition(Boolean, Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
    name: IsAtEmbeddedTransition
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.IsAtEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.IsAtEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
    name: IsAtEmbeddedTransition
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).IsAtEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).IsAtEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).BuildSpan(SpanBuilder, SourceLocation, String)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  name: Initialize(SpanBuilder)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Initialize(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Initialize(SpanBuilder)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
    name: Initialize
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Initialize
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
    name: Initialize
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Initialize
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Lookahead(System.Int32)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Lookahead(System.Int32)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  name: Lookahead(Int32)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Lookahead(Int32)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Lookahead(System.Int32)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Lookahead(Int32)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Lookahead(System.Int32)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
    name: Lookahead
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Lookahead
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Lookahead
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
    name: Lookahead
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Lookahead
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Lookahead
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextToken
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextToken
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  name: NextToken()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextToken()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextToken()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextToken()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextToken()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
    name: NextToken
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextToken
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextToken
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
    name: NextToken
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextToken
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextToken
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  name: SymbolTypeEquals(CSharpSymbolType, CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.SymbolTypeEquals(CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).SymbolTypeEquals(CSharpSymbolType, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).SymbolTypeEquals(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
    name: SymbolTypeEquals
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.SymbolTypeEquals
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.SymbolTypeEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
    name: SymbolTypeEquals
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).SymbolTypeEquals
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).SymbolTypeEquals
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  name: PutBack(CSharpSymbol)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutBack(CSharpSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutBack(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutBack(CSharpSymbol)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutBack(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
    name: PutBack
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
    name: PutBack
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutBack(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  name: PutBack(IEnumerable<CSharpSymbol>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutBack(IEnumerable<CSharpSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutBack(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutBack(IEnumerable(Of CSharpSymbol))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutBack(System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol))
  name.vb: PutBack(IEnumerable(Of CSharpSymbol))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
    name: PutBack
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
    name: PutBack
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutCurrentBack
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PutCurrentBack
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  name: PutCurrentBack()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutCurrentBack()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutCurrentBack()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutCurrentBack()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutCurrentBack()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
    name: PutCurrentBack
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PutCurrentBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PutCurrentBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
    name: PutCurrentBack
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PutCurrentBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PutCurrentBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  name: Balance(BalancingModes)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Balance(BalancingModes)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Balance(BalancingModes)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
    name: Balance
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
    name: Balance
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  name: Balance(BalancingModes, CSharpSymbolType, CSharpSymbolType, SourceLocation)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Balance(BalancingModes, CSharpSymbolType, CSharpSymbolType, SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Balance(BalancingModes, CSharpSymbolType, CSharpSymbolType, SourceLocation)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
    name: Balance
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
    name: Balance
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  name: NextIs(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
    name: NextIs
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
    name: NextIs
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  name: NextIs(CSharpSymbolType[])
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs(CSharpSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs(CSharpSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType())
  name.vb: NextIs(CSharpSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
    name: NextIs
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
    name: NextIs
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.NextIs(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  name: NextIs(Func<CSharpSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs(Func<CSharpSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs(System.Func<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs(Func(Of CSharpSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs(System.Func(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean))
  name.vb: NextIs(Func(Of CSharpSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
    name: NextIs
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
    name: NextIs
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Was(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Was(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  name: Was(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Was(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Was(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Was(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Was(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
    name: Was
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Was
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Was
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
    name: Was
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Was
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Was
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  name: At(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.At(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).At(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).At(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
    name: At
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.At
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.At
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
    name: At
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).At
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).At
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAndMoveNext
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAndMoveNext
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  name: AcceptAndMoveNext()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptAndMoveNext()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptAndMoveNext()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptAndMoveNext()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptAndMoveNext()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
    name: AcceptAndMoveNext
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptAndMoveNext
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptAndMoveNext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
    name: AcceptAndMoveNext
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptAndMoveNext
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptAndMoveNext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptSingleWhiteSpaceCharacter
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptSingleWhiteSpaceCharacter
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  name: AcceptSingleWhiteSpaceCharacter()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptSingleWhiteSpaceCharacter()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptSingleWhiteSpaceCharacter()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptSingleWhiteSpaceCharacter()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptSingleWhiteSpaceCharacter()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
    name: AcceptSingleWhiteSpaceCharacter
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptSingleWhiteSpaceCharacter
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptSingleWhiteSpaceCharacter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
    name: AcceptSingleWhiteSpaceCharacter
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptSingleWhiteSpaceCharacter
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptSingleWhiteSpaceCharacter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  name: Accept(IEnumerable<CSharpSymbol>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Accept(IEnumerable<CSharpSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Accept(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Accept(IEnumerable(Of CSharpSymbol))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Accept(System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol))
  name.vb: Accept(IEnumerable(Of CSharpSymbol))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
    name: Accept
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
    name: Accept
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Accept(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  name: Accept(CSharpSymbol)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Accept(CSharpSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Accept(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Accept(CSharpSymbol)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Accept(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
    name: Accept
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
    name: Accept
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAll(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptAll(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  name: AcceptAll(CSharpSymbolType[])
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptAll(CSharpSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptAll(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptAll(CSharpSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptAll(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType())
  name.vb: AcceptAll(CSharpSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
    name: AcceptAll
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptAll
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
    name: AcceptAll
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptAll
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  name: AddMarkerSymbolIfNecessary()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AddMarkerSymbolIfNecessary()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AddMarkerSymbolIfNecessary()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AddMarkerSymbolIfNecessary()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AddMarkerSymbolIfNecessary()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  name: AddMarkerSymbolIfNecessary(SourceLocation)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AddMarkerSymbolIfNecessary(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AddMarkerSymbolIfNecessary(SourceLocation)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  name: Output(SpanKind)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output(SpanKind)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output(SpanKind)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
    name: Output
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
    name: Output
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  name: Output(SpanKind, AcceptedCharacters)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output(SpanKind, AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output(SpanKind, AcceptedCharacters)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  name: Output(AcceptedCharacters)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output(AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output(AcceptedCharacters)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  name: PushSpanConfig()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  name: PushSpanConfig(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig(Action(Of SpanBuilder))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: PushSpanConfig(Action(Of SpanBuilder))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  name: PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  name: ConfigureSpan(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ConfigureSpan(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ConfigureSpan(Action(Of SpanBuilder))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: ConfigureSpan(Action(Of SpanBuilder))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  name: ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  name: Expected(KnownSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Expected(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Expected(KnownSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Expected
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Expected
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  name: Expected(CSharpSymbolType[])
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Expected(CSharpSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Expected(CSharpSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType())
  name.vb: Expected(CSharpSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
    name: Expected
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
    name: Expected
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  name: Optional(KnownSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Optional(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Optional(KnownSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Optional
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Optional
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  name: Optional(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Optional(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Optional(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
    name: Optional
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
    name: Optional
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Required(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,System.Boolean,System.Func{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.Required(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,System.Boolean,System.Func{System.String,System.String})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  name: Required(CSharpSymbolType, Boolean, Func<String, String>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Required(CSharpSymbolType, Boolean, Func<String, String>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Required(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, System.Boolean, System.Func<System.String, System.String>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Required(CSharpSymbolType, Boolean, Func(Of String, String))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Required(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, System.Boolean, System.Func(Of System.String, System.String))
  name.vb: Required(CSharpSymbolType, Boolean, Func(Of String, String))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
    name: Required
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.Required
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.Required
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
    name: Required
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).Required
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).Required
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EnsureCurrent
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.EnsureCurrent
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  name: EnsureCurrent()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.EnsureCurrent()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.EnsureCurrent()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).EnsureCurrent()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).EnsureCurrent()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
    name: EnsureCurrent
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.EnsureCurrent
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.EnsureCurrent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
    name: EnsureCurrent
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).EnsureCurrent
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).EnsureCurrent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  name: AcceptWhile(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  name: AcceptWhile(CSharpSymbolType, CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile(CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile(CSharpSymbolType, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  name: AcceptWhile(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  name: AcceptWhile(CSharpSymbolType[])
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile(CSharpSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile(CSharpSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType())
  name.vb: AcceptWhile(CSharpSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  name: AcceptUntil(CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil(CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil(CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  name: AcceptUntil(CSharpSymbolType, CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil(CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil(CSharpSymbolType, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  name: AcceptUntil(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil(CSharpSymbolType, CSharpSymbolType, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  name: AcceptUntil(CSharpSymbolType[])
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil(CSharpSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil(CSharpSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType())
  name.vb: AcceptUntil(CSharpSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  name: AcceptWhile(Func<CSharpSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile(Func<CSharpSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile(System.Func<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile(Func(Of CSharpSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile(System.Func(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean))
  name.vb: AcceptWhile(Func(Of CSharpSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ReadWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.ReadWhile(System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean})
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  name: ReadWhile(Func<CSharpSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ReadWhile(Func<CSharpSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ReadWhile(System.Func<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ReadWhile(Func(Of CSharpSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ReadWhile(System.Func(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean))
  name.vb: ReadWhile(Func(Of CSharpSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
    name: ReadWhile
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.ReadWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.ReadWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
    name: ReadWhile
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).ReadWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).ReadWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhiteSpaceInLines
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AcceptWhiteSpaceInLines
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  name: AcceptWhiteSpaceInLines()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhiteSpaceInLines()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhiteSpaceInLines()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhiteSpaceInLines()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhiteSpaceInLines()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
    name: AcceptWhiteSpaceInLines
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AcceptWhiteSpaceInLines
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AcceptWhiteSpaceInLines
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
    name: AcceptWhiteSpaceInLines
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AcceptWhiteSpaceInLines
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AcceptWhiteSpaceInLines
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AtIdentifier(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.AtIdentifier(System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  name: AtIdentifier(Boolean)
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AtIdentifier(Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AtIdentifier(System.Boolean)
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AtIdentifier(Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AtIdentifier(System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
    name: AtIdentifier
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.AtIdentifier
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.AtIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
    name: AtIdentifier
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).AtIdentifier
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).AtIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.OutputSpanBeforeRazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.OutputSpanBeforeRazorComment
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  name: OutputSpanBeforeRazorComment()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.OutputSpanBeforeRazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.OutputSpanBeforeRazorComment()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).OutputSpanBeforeRazorComment()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).OutputSpanBeforeRazorComment()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
    name: OutputSpanBeforeRazorComment
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.OutputSpanBeforeRazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.OutputSpanBeforeRazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
    name: OutputSpanBeforeRazorComment
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).OutputSpanBeforeRazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).OutputSpanBeforeRazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.RazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}.RazorComment
  parent: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  definition: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  name: RazorComment()
  nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.RazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.RazorComment()
  nameWithType.vb: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).RazorComment()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).RazorComment()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
    name: RazorComment
    nameWithType: TokenizerBackedParser<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>.RazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>.RazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
    name: RazorComment
    nameWithType: TokenizerBackedParser(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType).RazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType).RazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: Context
  nameWithType: ParserBase.Context
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.Context
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: IsMarkupParser
  nameWithType: ParserBase.IsMarkupParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.IsMarkupParser
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: true
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: ParserBase.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: ParserBase.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: ParserBase.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: ParseDocument()
  nameWithType: ParserBase.ParseDocument()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
    name: ParseDocument
    nameWithType: ParserBase.ParseDocument
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
    name: ParseDocument
    nameWithType: ParserBase.ParseDocument
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseDocument
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: true
  name: ParseSection(Tuple<String, String>, Boolean)
  nameWithType: ParserBase.ParseSection(Tuple<String, String>, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple<System.String, System.String>, System.Boolean)
  nameWithType.vb: ParserBase.ParseSection(Tuple(Of String, String), Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple(Of System.String, System.String), System.Boolean)
  name.vb: ParseSection(Tuple(Of String, String), Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
    name: ParseSection
    nameWithType: ParserBase.ParseSection
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection(System.Tuple{System.String,System.String},System.Boolean)
    name: ParseSection
    nameWithType: ParserBase.ParseSection
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseSection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  commentId: T:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
  isExternal: false
  name: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
    name: TokenizerBackedParser
    nameWithType: TokenizerBackedParser
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3
    name: TokenizerBackedParser
    nameWithType: TokenizerBackedParser
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Span
  isExternal: false
  name: Span
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Span
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Span
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Span
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Span
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Tokenizer
  isExternal: false
  name: Tokenizer
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Tokenizer
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Tokenizer
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Tokenizer
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Tokenizer
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SpanConfig
  isExternal: false
  name: SpanConfig
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SpanConfig
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SpanConfig
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SpanConfig
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SpanConfig
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol
  isExternal: false
  name: CurrentSymbol
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentSymbol
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentSymbol
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol
  isExternal: false
  name: PreviousSymbol
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PreviousSymbol
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PreviousSymbol
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PreviousSymbol
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PreviousSymbol
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.CurrentLocation
  isExternal: false
  name: CurrentLocation
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentLocation
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.CurrentLocation
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentLocation
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).CurrentLocation
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EndOfFile
  isExternal: false
  name: EndOfFile
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EndOfFile
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EndOfFile
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EndOfFile
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EndOfFile
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  commentId: P:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Language
  isExternal: false
  name: Language
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Language
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Language
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Language
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Language
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
  isExternal: false
  name: HandleEmbeddedTransition()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
    name: HandleEmbeddedTransition
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.HandleEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition
    name: HandleEmbeddedTransition
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).HandleEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
  isExternal: true
  name: IsAtEmbeddedTransition(Boolean, Boolean)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition(Boolean, Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition(System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
    name: IsAtEmbeddedTransition
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.IsAtEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)
    name: IsAtEmbeddedTransition
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).IsAtEmbeddedTransition
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
  isExternal: true
  name: BuildSpan(SpanBuilder, SourceLocation, String)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan(SpanBuilder, SourceLocation, String)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan(SpanBuilder, SourceLocation, String)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, Microsoft.AspNetCore.Razor.SourceLocation, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.BuildSpan(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,Microsoft.AspNetCore.Razor.SourceLocation,System.String)
    name: BuildSpan
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).BuildSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  isExternal: false
  name: Initialize(SpanBuilder)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize(SpanBuilder)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
    name: Initialize
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Initialize(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
    name: Initialize
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
  isExternal: true
  name: Lookahead(Int32)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead(Int32)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead(System.Int32)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead(Int32)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead(System.Int32)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
    name: Lookahead
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Lookahead
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Lookahead(System.Int32)
    name: Lookahead
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Lookahead
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
  isExternal: false
  name: NextToken()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
    name: NextToken
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextToken
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextToken
    name: NextToken
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextToken
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
  isExternal: false
  name: SymbolTypeEquals(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals(TSymbolType, TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals(TSymbolType, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals(TSymbolType, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
    name: SymbolTypeEquals
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.SymbolTypeEquals
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.SymbolTypeEquals(`2,`2)
    name: SymbolTypeEquals
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).SymbolTypeEquals
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
  isExternal: false
  name: PutBack(TSymbol)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(TSymbol)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(TSymbol)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(TSymbol)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
    name: PutBack
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)
    name: PutBack
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: PutBack(IEnumerable<TSymbol>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(IEnumerable<TSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack(System.Collections.Generic.IEnumerable<TSymbol>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(IEnumerable(Of TSymbol))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack(System.Collections.Generic.IEnumerable(Of TSymbol))
  name.vb: PutBack(IEnumerable(Of TSymbol))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
    name: PutBack
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})
    name: PutBack
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
  isExternal: false
  name: PutCurrentBack()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
    name: PutCurrentBack
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PutCurrentBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack
    name: PutCurrentBack
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PutCurrentBack
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  isExternal: false
  name: Balance(BalancingModes)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(BalancingModes)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(BalancingModes)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
    name: Balance
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes)
    name: Balance
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
  isExternal: false
  name: Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, TSymbolType, TSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(BalancingModes, TSymbolType, TSymbolType, SourceLocation)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes, TSymbolType, TSymbolType, Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
    name: Balance
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Balance(Microsoft.AspNetCore.Razor.Parser.BalancingModes,`2,`2,Microsoft.AspNetCore.Razor.SourceLocation)
    name: Balance
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.BalancingModes
    name: BalancingModes
    nameWithType: BalancingModes
    fullName: Microsoft.AspNetCore.Razor.Parser.BalancingModes
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
  isExternal: false
  name: NextIs(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
    name: NextIs
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)
    name: NextIs
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
  isExternal: false
  name: NextIs(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(TSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(TSymbolType())
  name.vb: NextIs(TSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
    name: NextIs
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])
    name: NextIs
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
  isExternal: true
  name: NextIs(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs(System.Func<TSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(Func(Of TSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs(System.Func(Of TSymbol, System.Boolean))
  name.vb: NextIs(Func(Of TSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
    name: NextIs
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})
    name: NextIs
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).NextIs
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
  isExternal: false
  name: Was(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
    name: Was
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Was
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Was(`2)
    name: Was
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Was
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
  isExternal: false
  name: At(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
    name: At
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.At
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.At(`2)
    name: At
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).At
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
  isExternal: false
  name: AcceptAndMoveNext()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
    name: AcceptAndMoveNext
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAndMoveNext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext
    name: AcceptAndMoveNext
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAndMoveNext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
  isExternal: false
  name: AcceptSingleWhiteSpaceCharacter()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
    name: AcceptSingleWhiteSpaceCharacter
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptSingleWhiteSpaceCharacter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter
    name: AcceptSingleWhiteSpaceCharacter
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptSingleWhiteSpaceCharacter
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
  isExternal: true
  name: Accept(IEnumerable<TSymbol>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(IEnumerable<TSymbol>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(System.Collections.Generic.IEnumerable<TSymbol>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(IEnumerable(Of TSymbol))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(System.Collections.Generic.IEnumerable(Of TSymbol))
  name.vb: Accept(IEnumerable(Of TSymbol))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
    name: Accept
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})
    name: Accept
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
  isExternal: false
  name: Accept(TSymbol)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(TSymbol)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept(TSymbol)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(TSymbol)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept(TSymbol)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
    name: Accept
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Accept
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Accept(`1)
    name: Accept
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Accept
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
  isExternal: false
  name: AcceptAll(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll(TSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll(TSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll(TSymbolType())
  name.vb: AcceptAll(TSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
    name: AcceptAll
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptAll
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])
    name: AcceptAll
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptAll
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
  isExternal: false
  name: AddMarkerSymbolIfNecessary()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  isExternal: false
  name: AddMarkerSymbolIfNecessary(SourceLocation)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary(SourceLocation)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(Microsoft.AspNetCore.Razor.SourceLocation)
    name: AddMarkerSymbolIfNecessary
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AddMarkerSymbolIfNecessary
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.SourceLocation
    name: SourceLocation
    nameWithType: SourceLocation
    fullName: Microsoft.AspNetCore.Razor.SourceLocation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  isExternal: false
  name: Output(SpanKind)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(SpanKind)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(SpanKind)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
    name: Output
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind)
    name: Output
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  isExternal: false
  name: Output(SpanKind, AcceptedCharacters)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(SpanKind, AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(SpanKind, AcceptedCharacters)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind, Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind,Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
    name: SpanKind
    nameWithType: SpanKind
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  isExternal: false
  name: Output(AcceptedCharacters)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(AcceptedCharacters)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(AcceptedCharacters)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Output(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters)
    name: Output
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Output
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
    name: AcceptedCharacters
    nameWithType: AcceptedCharacters
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.AcceptedCharacters
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
  isExternal: false
  name: PushSpanConfig()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  isExternal: true
  name: PushSpanConfig(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(Action(Of SpanBuilder))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: PushSpanConfig(Action(Of SpanBuilder))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  isExternal: true
  name: PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: PushSpanConfig(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: PushSpanConfig
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).PushSpanConfig
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  isExternal: true
  name: ConfigureSpan(Action<SpanBuilder>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(Action(Of SpanBuilder))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: ConfigureSpan(Action(Of SpanBuilder))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
  isExternal: true
  name: ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(Action<SpanBuilder, Action<SpanBuilder>>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder, System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)))
  name.vb: ConfigureSpan(Action(Of SpanBuilder, Action(Of SpanBuilder)))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}})
    name: ConfigureSpan
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ConfigureSpan
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  isExternal: false
  name: Expected(KnownSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(KnownSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Expected
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Expected
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
  isExternal: false
  name: Expected(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected(TSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(TSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected(TSymbolType())
  name.vb: Expected(TSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
    name: Expected
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Expected
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])
    name: Expected
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Expected
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  isExternal: false
  name: Optional(KnownSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(KnownSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(KnownSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Optional
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType)
    name: Optional
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
    name: KnownSymbolType
    nameWithType: KnownSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.KnownSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
  isExternal: false
  name: Optional(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
    name: Optional
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Optional
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Optional(`2)
    name: Optional
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Optional
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
  isExternal: true
  name: Required(TSymbolType, Boolean, Func<String, String>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required(TSymbolType, Boolean, Func<String, String>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required(TSymbolType, System.Boolean, System.Func<System.String, System.String>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required(TSymbolType, Boolean, Func(Of String, String))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required(TSymbolType, System.Boolean, System.Func(Of System.String, System.String))
  name.vb: Required(TSymbolType, Boolean, Func(Of String, String))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
    name: Required
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.Required
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.Func{System.String,System.String})
    name: Required
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).Required
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
  isExternal: false
  name: EnsureCurrent()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
    name: EnsureCurrent
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.EnsureCurrent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent
    name: EnsureCurrent
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).EnsureCurrent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
  isExternal: false
  name: AcceptWhile(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
  isExternal: false
  name: AcceptWhile(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
  isExternal: false
  name: AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType, TSymbolType, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
  isExternal: false
  name: AcceptWhile(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(TSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(TSymbolType())
  name.vb: AcceptWhile(TSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
  isExternal: false
  name: AcceptUntil(TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
  isExternal: false
  name: AcceptUntil(TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
  isExternal: false
  name: AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType, TSymbolType, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
  isExternal: false
  name: AcceptUntil(TSymbolType[])
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType[])
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil(TSymbolType[])
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType())
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil(TSymbolType())
  name.vb: AcceptUntil(TSymbolType())
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
    name: AcceptUntil
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])
    name: AcceptUntil
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptUntil
  - name: (
    nameWithType: (
    fullName: (
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
  isExternal: true
  name: AcceptWhile(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile(System.Func<TSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(Func(Of TSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile(System.Func(Of TSymbol, System.Boolean))
  name.vb: AcceptWhile(Func(Of TSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
    name: AcceptWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})
    name: AcceptWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
  isExternal: true
  name: ReadWhile(Func<TSymbol, Boolean>)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile(Func<TSymbol, Boolean>)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile(System.Func<TSymbol, System.Boolean>)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile(Func(Of TSymbol, Boolean))
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile(System.Func(Of TSymbol, System.Boolean))
  name.vb: ReadWhile(Func(Of TSymbol, Boolean))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
    name: ReadWhile
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.ReadWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})
    name: ReadWhile
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).ReadWhile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
  isExternal: false
  name: AcceptWhiteSpaceInLines()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
    name: AcceptWhiteSpaceInLines
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AcceptWhiteSpaceInLines
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines
    name: AcceptWhiteSpaceInLines
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AcceptWhiteSpaceInLines
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
  isExternal: true
  name: AtIdentifier(Boolean)
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier(Boolean)
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier(System.Boolean)
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier(Boolean)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier(System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
    name: AtIdentifier
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.AtIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)
    name: AtIdentifier
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).AtIdentifier
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
  isExternal: false
  name: OutputSpanBeforeRazorComment()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
    name: OutputSpanBeforeRazorComment
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.OutputSpanBeforeRazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment
    name: OutputSpanBeforeRazorComment
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).OutputSpanBeforeRazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  commentId: M:Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
  isExternal: false
  name: RazorComment()
  nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment()
  fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment()
  nameWithType.vb: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment()
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
    name: RazorComment
    nameWithType: TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser<TTokenizer, TSymbol, TSymbolType>.RazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser`3.RazorComment
    name: RazorComment
    nameWithType: TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment
    fullName: Microsoft.AspNetCore.Razor.Parser.TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType).RazorComment
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet{System.String}
  commentId: T:System.Collections.Generic.ISet{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ISet`1
  name: ISet<String>
  nameWithType: ISet<String>
  fullName: System.Collections.Generic.ISet<System.String>
  nameWithType.vb: ISet(Of String)
  fullname.vb: System.Collections.Generic.ISet(Of System.String)
  name.vb: ISet(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  commentId: T:System.Collections.Generic.ISet`1
  isExternal: true
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  nameWithType.vb: ISet(Of T)
  fullname.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    nameWithType: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  commentId: P:Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: OtherParser
  nameWithType: ParserBase.OtherParser
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.OtherParser
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  commentId: T:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics{Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType}
  parent: Microsoft.AspNetCore.Razor.Parser
  definition: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  name: LanguageCharacteristics<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>
  nameWithType: LanguageCharacteristics<CSharpTokenizer, CSharpSymbol, CSharpSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType>
  nameWithType.vb: LanguageCharacteristics(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType)
  name.vb: LanguageCharacteristics(Of CSharpTokenizer, CSharpSymbol, CSharpSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
    name: CSharpTokenizer
    nameWithType: CSharpTokenizer
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
    name: CSharpTokenizer
    nameWithType: CSharpTokenizer
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Internal.CSharpTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
    name: CSharpSymbolType
    nameWithType: CSharpSymbolType
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  commentId: T:Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
  isExternal: false
  name: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType: LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics<TTokenizer, TSymbol, TSymbolType>
  nameWithType.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  fullname.vb: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  name.vb: LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: <
    nameWithType: <
    fullName: <
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics`3
    name: LanguageCharacteristics
    nameWithType: LanguageCharacteristics
    fullName: Microsoft.AspNetCore.Razor.Parser.LanguageCharacteristics
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTokenizer
    nameWithType: TTokenizer
    fullName: TTokenizer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbol
    nameWithType: TSymbol
    fullName: TSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSymbolType
    nameWithType: TSymbolType
    fullName: TSymbolType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: CSharpSymbolType
  nameWithType: CSharpSymbolType
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbolType
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  commentId: N:Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  nameWithType: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword
  commentId: T:Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword
  parent: Microsoft.AspNetCore.Razor.Tokenizer.Symbols
  isExternal: false
  name: CSharpKeyword
  nameWithType: CSharpKeyword
  fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpKeyword
- uid: System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean}
  commentId: T:System.Func{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<CSharpSymbol, Boolean>
  nameWithType: Func<CSharpSymbol, Boolean>
  fullName: System.Func<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean>
  nameWithType.vb: Func(Of CSharpSymbol, Boolean)
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol, System.Boolean)
  name.vb: Func(Of CSharpSymbol, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
    name: CSharpSymbol
    nameWithType: CSharpSymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.CSharpSymbol
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  commentId: M:Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  parent: Microsoft.AspNetCore.Razor.Parser.ParserBase
  isExternal: false
  name: ParseBlock()
  nameWithType: ParserBase.ParseBlock()
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
    name: ParseBlock
    nameWithType: ParserBase.ParseBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
    name: ParseBlock
    nameWithType: ParserBase.ParseBlock
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserBase.ParseBlock
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator}
  commentId: T:System.Func{System.String,Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator}
  parent: System
  definition: System.Func`2
  name: Func<String, SpanChunkGenerator>
  nameWithType: Func<String, SpanChunkGenerator>
  fullName: System.Func<System.String, Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator>
  nameWithType.vb: Func(Of String, SpanChunkGenerator)
  fullname.vb: System.Func(Of System.String, Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator)
  name.vb: Func(Of String, SpanChunkGenerator)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator
    name: SpanChunkGenerator
    nameWithType: SpanChunkGenerator
    fullName: Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator
    name: SpanChunkGenerator
    nameWithType: SpanChunkGenerator
    fullName: Microsoft.AspNetCore.Razor.Chunks.Generators.SpanChunkGenerator
  - name: )
    nameWithType: )
    fullName: )
