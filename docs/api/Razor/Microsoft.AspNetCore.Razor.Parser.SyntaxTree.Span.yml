### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  id: Span
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  children:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Change(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChunkGenerator
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Content
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EditHandler
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Equals(System.Object)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetEquivalenceHash
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetHashCode
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.IsBlock
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Kind
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Length
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Next
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Previous
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ReplaceWith(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Start
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Symbols
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ToString
  langs:
  - csharp
  - vb
  name: Span
  nameWithType: Span
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Span
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: 'public class Span : SyntaxTreeNode'
    content.vb: >-
      Public Class Span
          Inherits SyntaxTreeNode
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  inheritedMembers:
  - Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  id: '#ctor(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)'
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Span(SpanBuilder)
  nameWithType: Span.Span(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Span(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span(SpanBuilder builder)
    content.vb: Public Sub New(builder As SpanBuilder)
    parameters:
    - id: builder
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Kind
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Kind
  id: Kind
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: Span.Kind
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Kind
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Kind
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public SpanKind Kind { get; protected set; }
    content.vb: Public Property Kind As SpanKind
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Symbols
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Symbols
  id: Symbols
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Symbols
  nameWithType: Span.Symbols
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Symbols
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Symbols
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public IReadOnlyList<ISymbol> Symbols { get; protected set; }
    content.vb: Public Property Symbols As IReadOnlyList(Of ISymbol)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Previous
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Previous
  id: Previous
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Previous
  nameWithType: Span.Previous
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Previous
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Previous
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span Previous { get; protected set; }
    content.vb: Public Property Previous As Span
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Next
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Next
  id: Next
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Next
  nameWithType: Span.Next
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Next
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Next
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public Span Next { get; protected set; }
    content.vb: Public Property Next As Span
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EditHandler
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EditHandler
  id: EditHandler
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: EditHandler
  nameWithType: Span.EditHandler
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EditHandler
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EditHandler
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public SpanEditHandler EditHandler { get; protected set; }
    content.vb: Public Property EditHandler As SpanEditHandler
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Editor.SpanEditHandler
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChunkGenerator
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChunkGenerator
  id: ChunkGenerator
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: ChunkGenerator
  nameWithType: Span.ChunkGenerator
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChunkGenerator
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ChunkGenerator
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public ISpanChunkGenerator ChunkGenerator { get; protected set; }
    content.vb: Public Property ChunkGenerator As ISpanChunkGenerator
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.Chunks.Generators.ISpanChunkGenerator
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.IsBlock
  id: IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: IsBlock
  nameWithType: Span.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.IsBlock
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: IsBlock
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override bool IsBlock { get; }
    content.vb: Public Overrides ReadOnly Property IsBlock As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Length
  id: Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Span.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Length
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Length
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Start
  id: Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: Span.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Start
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Start
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override SourceLocation Start { get; }
    content.vb: Public Overrides ReadOnly Property Start As SourceLocation
    parameters: []
    return:
      type: Microsoft.AspNetCore.Razor.SourceLocation
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Content
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Content
  id: Content
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: Span.Content
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Content
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Content
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public string Content { get; }
    content.vb: Public ReadOnly Property Content As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Change(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Change(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  id: Change(System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder})
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Change(Action<SpanBuilder>)
  nameWithType: Span.Change(Action<SpanBuilder>)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Change(System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Change
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public void Change(Action<SpanBuilder> changes)
    content.vb: Public Sub Change(changes As Action(Of SpanBuilder))
    parameters:
    - id: changes
      type: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  nameWithType.vb: Span.Change(Action(Of SpanBuilder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Change(System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder))
  name.vb: Change(Action(Of SpanBuilder))
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ReplaceWith(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ReplaceWith(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  id: ReplaceWith(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: ReplaceWith(SpanBuilder)
  nameWithType: Span.ReplaceWith(SpanBuilder)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ReplaceWith(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ReplaceWith
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 78
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public void ReplaceWith(SpanBuilder builder)
    content.vb: Public Sub ReplaceWith(builder As SpanBuilder)
    parameters:
    - id: builder
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  id: Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Accept(ParserVisitor)
  nameWithType: Span.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Accept
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nAccepts the specified visitor\n"
  remarks: "\nCalls the VisitSpan method on the specified visitor, passing in this\n"
  example: []
  syntax:
    content: public override void Accept(ParserVisitor visitor)
    content.vb: Public Overrides Sub Accept(visitor As ParserVisitor)
    parameters:
    - id: visitor
      type: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ToString
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Span.ToString()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ToString
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  id: ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: ChangeStart(SourceLocation)
  nameWithType: Span.ChangeStart(SourceLocation)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.ChangeStart(Microsoft.AspNetCore.Razor.SourceLocation)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: ChangeStart
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 118
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public void ChangeStart(SourceLocation newStart)
    content.vb: Public Sub ChangeStart(newStart As SourceLocation)
    parameters:
    - id: newStart
      type: Microsoft.AspNetCore.Razor.SourceLocation
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  id: EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: Span.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: EquivalentTo
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 139
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  summary: "\nChecks that the specified span is equivalent to the other in that it has the same start point and content.\n"
  example: []
  syntax:
    content: public override bool EquivalentTo(SyntaxTreeNode node)
    content.vb: Public Overrides Function EquivalentTo(node As SyntaxTreeNode) As Boolean
    parameters:
    - id: node
      type: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    return:
      type: System.Boolean
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetEquivalenceHash
  id: GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: GetEquivalenceHash()
  nameWithType: Span.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetEquivalenceHash()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetEquivalenceHash
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 149
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int GetEquivalenceHash()
    content.vb: Public Overrides Function GetEquivalenceHash As Integer
    return:
      type: System.Int32
  overridden: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Span.Equals(Object)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: Equals
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 155
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetHashCode
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Span.GetHashCode()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
      branch: master
      repo: https://github.com/aspnet/Razor.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Razor/Parser/SyntaxTree/Span.cs
    startLine: 165
  assemblies:
  - Microsoft.AspNetCore.Razor
  namespace: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  commentId: N:Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  nameWithType: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SyntaxTreeNode
  nameWithType: SyntaxTreeNode
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Parent
  nameWithType: SyntaxTreeNode.Parent
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Parent
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanBuilder
  nameWithType: SpanBuilder
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: SpanKind
  nameWithType: SpanKind
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanKind
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ISymbol>
  nameWithType: IReadOnlyList<ISymbol>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol>
  nameWithType.vb: IReadOnlyList(Of ISymbol)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol)
  name.vb: IReadOnlyList(Of ISymbol)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
    name: ISymbol
    nameWithType: ISymbol
    fullName: Microsoft.AspNetCore.Razor.Tokenizer.Symbols.ISymbol
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  commentId: T:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree
  isExternal: false
  name: Span
  nameWithType: Span
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.Span
- uid: Microsoft.AspNetCore.Razor.Editor.SpanEditHandler
  commentId: T:Microsoft.AspNetCore.Razor.Editor.SpanEditHandler
  parent: Microsoft.AspNetCore.Razor.Editor
  isExternal: false
  name: SpanEditHandler
  nameWithType: SpanEditHandler
  fullName: Microsoft.AspNetCore.Razor.Editor.SpanEditHandler
- uid: Microsoft.AspNetCore.Razor.Editor
  commentId: N:Microsoft.AspNetCore.Razor.Editor
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Editor
  nameWithType: Microsoft.AspNetCore.Razor.Editor
  fullName: Microsoft.AspNetCore.Razor.Editor
- uid: Microsoft.AspNetCore.Razor.Chunks.Generators.ISpanChunkGenerator
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.Generators.ISpanChunkGenerator
  parent: Microsoft.AspNetCore.Razor.Chunks.Generators
  isExternal: false
  name: ISpanChunkGenerator
  nameWithType: ISpanChunkGenerator
  fullName: Microsoft.AspNetCore.Razor.Chunks.Generators.ISpanChunkGenerator
- uid: Microsoft.AspNetCore.Razor.Chunks.Generators
  commentId: N:Microsoft.AspNetCore.Razor.Chunks.Generators
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Chunks.Generators
  nameWithType: Microsoft.AspNetCore.Razor.Chunks.Generators
  fullName: Microsoft.AspNetCore.Razor.Chunks.Generators
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: IsBlock
  nameWithType: SyntaxTreeNode.IsBlock
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.IsBlock
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Length
  nameWithType: SyntaxTreeNode.Length
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Length
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  commentId: P:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Start
  nameWithType: SyntaxTreeNode.Start
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Start
- uid: Microsoft.AspNetCore.Razor.SourceLocation
  commentId: T:Microsoft.AspNetCore.Razor.SourceLocation
  parent: Microsoft.AspNetCore.Razor
  isExternal: false
  name: SourceLocation
  nameWithType: SourceLocation
  fullName: Microsoft.AspNetCore.Razor.SourceLocation
- uid: Microsoft.AspNetCore.Razor
  commentId: N:Microsoft.AspNetCore.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Razor
  nameWithType: Microsoft.AspNetCore.Razor
  fullName: Microsoft.AspNetCore.Razor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  commentId: T:System.Action{Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder}
  parent: System
  definition: System.Action`1
  name: Action<SpanBuilder>
  nameWithType: Action<SpanBuilder>
  fullName: System.Action<Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder>
  nameWithType.vb: Action(Of SpanBuilder)
  fullname.vb: System.Action(Of Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder)
  name.vb: Action(Of SpanBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
    name: SpanBuilder
    nameWithType: SpanBuilder
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SpanBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: Accept(ParserVisitor)
  nameWithType: SyntaxTreeNode.Accept(ParserVisitor)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: SyntaxTreeNode.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept(Microsoft.AspNetCore.Razor.Parser.ParserVisitor)
    name: Accept
    nameWithType: SyntaxTreeNode.Accept
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.Accept
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
    name: ParserVisitor
    nameWithType: ParserVisitor
    fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  commentId: T:Microsoft.AspNetCore.Razor.Parser.ParserVisitor
  parent: Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: ParserVisitor
  nameWithType: ParserVisitor
  fullName: Microsoft.AspNetCore.Razor.Parser.ParserVisitor
- uid: Microsoft.AspNetCore.Razor.Parser
  commentId: N:Microsoft.AspNetCore.Razor.Parser
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Parser
  nameWithType: Microsoft.AspNetCore.Razor.Parser
  fullName: Microsoft.AspNetCore.Razor.Parser
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: EquivalentTo(SyntaxTreeNode)
  nameWithType: SyntaxTreeNode.EquivalentTo(SyntaxTreeNode)
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo(Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode)
    name: EquivalentTo
    nameWithType: SyntaxTreeNode.EquivalentTo
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.EquivalentTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
    name: SyntaxTreeNode
    nameWithType: SyntaxTreeNode
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  commentId: M:Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  parent: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode
  isExternal: false
  name: GetEquivalenceHash()
  nameWithType: SyntaxTreeNode.GetEquivalenceHash()
  fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: SyntaxTreeNode.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
    name: GetEquivalenceHash
    nameWithType: SyntaxTreeNode.GetEquivalenceHash
    fullName: Microsoft.AspNetCore.Razor.Parser.SyntaxTree.SyntaxTreeNode.GetEquivalenceHash
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
