### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests
  commentId: T:Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests
  id: BCRYPT_KEY_LENGTHS_STRUCT_Tests
  parent: Microsoft.AspNetCore.Cryptography.Cng
  children:
  - Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_FailureCases(System.Int32,System.Int32,System.Int32,System.Int32)
  - Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_SuccessCases(System.Int32,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: BCRYPT_KEY_LENGTHS_STRUCT_Tests
  nameWithType: BCRYPT_KEY_LENGTHS_STRUCT_Tests
  fullName: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: BCRYPT_KEY_LENGTHS_STRUCT_Tests
    path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Cryptography.Internal.Test
  namespace: Microsoft.AspNetCore.Cryptography.Cng
  syntax:
    content: public class BCRYPT_KEY_LENGTHS_STRUCT_Tests
    content.vb: Public Class BCRYPT_KEY_LENGTHS_STRUCT_Tests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_SuccessCases(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_SuccessCases(System.Int32,System.Int32,System.Int32,System.Int32)
  id: EnsureValidKeyLength_SuccessCases(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests
  langs:
  - csharp
  - vb
  name: EnsureValidKeyLength_SuccessCases(Int32, Int32, Int32, Int32)
  nameWithType: BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_SuccessCases(Int32, Int32, Int32, Int32)
  fullName: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_SuccessCases(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: EnsureValidKeyLength_SuccessCases
    path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Cryptography.Internal.Test
  namespace: Microsoft.AspNetCore.Cryptography.Cng
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{128, 128, 0, 128})]

      [InlineData(new object[]{128, 256, 64, 128})]

      [InlineData(new object[]{128, 256, 64, 192})]

      [InlineData(new object[]{128, 256, 64, 256})]

      public void EnsureValidKeyLength_SuccessCases(int minLength, int maxLength, int increment, int testValue)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {128, 128, 0, 128})>

      <InlineData(New Object() {128, 256, 64, 128})>

      <InlineData(New Object() {128, 256, 64, 192})>

      <InlineData(New Object() {128, 256, 64, 256})>

      Public Sub EnsureValidKeyLength_SuccessCases(minLength As Integer, maxLength As Integer, increment As Integer, testValue As Integer)
    parameters:
    - id: minLength
      type: System.Int32
    - id: maxLength
      type: System.Int32
    - id: increment
      type: System.Int32
    - id: testValue
      type: System.Int32
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_FailureCases(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_FailureCases(System.Int32,System.Int32,System.Int32,System.Int32)
  id: EnsureValidKeyLength_FailureCases(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests
  langs:
  - csharp
  - vb
  name: EnsureValidKeyLength_FailureCases(Int32, Int32, Int32, Int32)
  nameWithType: BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_FailureCases(Int32, Int32, Int32, Int32)
  fullName: Microsoft.AspNetCore.Cryptography.Cng.BCRYPT_KEY_LENGTHS_STRUCT_Tests.EnsureValidKeyLength_FailureCases(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: EnsureValidKeyLength_FailureCases
    path: test/Microsoft.AspNetCore.Cryptography.Internal.Test/Cng/BCRYPT_KEY_LENGTHS_STRUCT_Tests.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Cryptography.Internal.Test
  namespace: Microsoft.AspNetCore.Cryptography.Cng
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{128, 128, 0, 192})]

      [InlineData(new object[]{128, 256, 64, 64})]

      [InlineData(new object[]{128, 256, 64, 512})]

      [InlineData(new object[]{128, 256, 64, 160})]

      [InlineData(new object[]{128, 256, 64, 129})]

      public void EnsureValidKeyLength_FailureCases(int minLength, int maxLength, int increment, int testValue)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {128, 128, 0, 192})>

      <InlineData(New Object() {128, 256, 64, 64})>

      <InlineData(New Object() {128, 256, 64, 512})>

      <InlineData(New Object() {128, 256, 64, 160})>

      <InlineData(New Object() {128, 256, 64, 129})>

      Public Sub EnsureValidKeyLength_FailureCases(minLength As Integer, maxLength As Integer, increment As Integer, testValue As Integer)
    parameters:
    - id: minLength
      type: System.Int32
    - id: maxLength
      type: System.Int32
    - id: increment
      type: System.Int32
    - id: testValue
      type: System.Int32
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Cryptography.Cng
  commentId: N:Microsoft.AspNetCore.Cryptography.Cng
  isExternal: false
  name: Microsoft.AspNetCore.Cryptography.Cng
  nameWithType: Microsoft.AspNetCore.Cryptography.Cng
  fullName: Microsoft.AspNetCore.Cryptography.Cng
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
