### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  commentId: T:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  id: DataProtectionCommonExtensionsTests
  parent: Microsoft.AspNetCore.DataProtection
  children:
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_SuccessCase
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_NoServiceFound_Throws
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_ServiceFound_ReturnsService
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_SuccessCase
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(System.String[])
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_InvalidUtf8_Failure
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_Success
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidBase64BeforeDecryption_Failure
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidUtf8AfterDecryption_Failure
  - Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_Success
  langs:
  - csharp
  - vb
  name: DataProtectionCommonExtensionsTests
  nameWithType: DataProtectionCommonExtensionsTests
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: DataProtectionCommonExtensionsTests
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: public class DataProtectionCommonExtensionsTests
    content.vb: Public Class DataProtectionCommonExtensionsTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  id: CreateProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: CreateProtector_ChainedAsIEnumerable_FailureCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: CreateProtector_ChainedAsIEnumerable_FailureCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{new string[]{}})]

      [InlineData(new object[]{new string[]{null}})]

      [InlineData(new object[]{new string[]{"the next value is bad", null}})]

      public void CreateProtector_ChainedAsIEnumerable_FailureCases(string[] purposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {New String() {}})>

      <InlineData(New Object() {New String() {Nothing}})>

      <InlineData(New Object() {New String() {"the next value is bad", Nothing}})>

      Public Sub CreateProtector_ChainedAsIEnumerable_FailureCases(purposes As String())
    parameters:
    - id: purposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_FailureCases(System.String())
  name.vb: CreateProtector_ChainedAsIEnumerable_FailureCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(System.String[])
  id: CreateProtector_ChainedAsParams_FailureCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: CreateProtector_ChainedAsParams_FailureCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: CreateProtector_ChainedAsParams_FailureCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{new string[]{null}})]

      [InlineData(new object[]{new string[]{"the next value is bad", null}})]

      public void CreateProtector_ChainedAsParams_FailureCases(string[] subPurposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {New String() {Nothing}})>

      <InlineData(New Object() {New String() {"the next value is bad", Nothing}})>

      Public Sub CreateProtector_ChainedAsParams_FailureCases(subPurposes As String())
    parameters:
    - id: subPurposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_FailureCases(System.String())
  name.vb: CreateProtector_ChainedAsParams_FailureCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_SuccessCase
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_SuccessCase
  id: CreateProtector_ChainedAsIEnumerable_SuccessCase
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: CreateProtector_ChainedAsIEnumerable_SuccessCase()
  nameWithType: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_SuccessCase()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsIEnumerable_SuccessCase()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: CreateProtector_ChainedAsIEnumerable_SuccessCase
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void CreateProtector_ChainedAsIEnumerable_SuccessCase()
    content.vb: >-
      <Fact>

      Public Sub CreateProtector_ChainedAsIEnumerable_SuccessCase
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  id: CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  nameWithType: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
    content.vb: >-
      <Fact>

      Public Sub CreateProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  id: CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: CreateProtector_ChainedAsParams_EmptyParams_SuccessCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null})]

      [InlineData(new object[]{new string[]{}})]

      public void CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(string[] subPurposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing})>

      <InlineData(New Object() {New String() {}})>

      Public Sub CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(subPurposes As String())
    parameters:
    - id: subPurposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String())
  name.vb: CreateProtector_ChainedAsParams_EmptyParams_SuccessCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_NoServiceFound_Throws
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_NoServiceFound_Throws
  id: GetDataProtectionProvider_NoServiceFound_Throws
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtectionProvider_NoServiceFound_Throws()
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtectionProvider_NoServiceFound_Throws()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_NoServiceFound_Throws()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtectionProvider_NoServiceFound_Throws
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 108
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void GetDataProtectionProvider_NoServiceFound_Throws()
    content.vb: >-
      <Fact>

      Public Sub GetDataProtectionProvider_NoServiceFound_Throws
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_ServiceFound_ReturnsService
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_ServiceFound_ReturnsService
  id: GetDataProtectionProvider_ServiceFound_ReturnsService
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtectionProvider_ServiceFound_ReturnsService()
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtectionProvider_ServiceFound_ReturnsService()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtectionProvider_ServiceFound_ReturnsService()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtectionProvider_ServiceFound_ReturnsService
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 119
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void GetDataProtectionProvider_ServiceFound_ReturnsService()
    content.vb: >-
      <Fact>

      Public Sub GetDataProtectionProvider_ServiceFound_ReturnsService
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  id: GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtector_ChainedAsIEnumerable_FailureCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtector_ChainedAsIEnumerable_FailureCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 135
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{new string[]{}})]

      [InlineData(new object[]{new string[]{null}})]

      [InlineData(new object[]{new string[]{"the next value is bad", null}})]

      public void GetDataProtector_ChainedAsIEnumerable_FailureCases(string[] purposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {New String() {}})>

      <InlineData(New Object() {New String() {Nothing}})>

      <InlineData(New Object() {New String() {"the next value is bad", Nothing}})>

      Public Sub GetDataProtector_ChainedAsIEnumerable_FailureCases(purposes As String())
    parameters:
    - id: purposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_FailureCases(System.String())
  name.vb: GetDataProtector_ChainedAsIEnumerable_FailureCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(System.String[])
  id: GetDataProtector_ChainedAsParams_FailureCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtector_ChainedAsParams_FailureCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtector_ChainedAsParams_FailureCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 155
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{new string[]{null}})]

      [InlineData(new object[]{new string[]{"the next value is bad", null}})]

      public void GetDataProtector_ChainedAsParams_FailureCases(string[] subPurposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {New String() {Nothing}})>

      <InlineData(New Object() {New String() {"the next value is bad", Nothing}})>

      Public Sub GetDataProtector_ChainedAsParams_FailureCases(subPurposes As String())
    parameters:
    - id: subPurposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_FailureCases(System.String())
  name.vb: GetDataProtector_ChainedAsParams_FailureCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_SuccessCase
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_SuccessCase
  id: GetDataProtector_ChainedAsIEnumerable_SuccessCase
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtector_ChainedAsIEnumerable_SuccessCase()
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_SuccessCase()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsIEnumerable_SuccessCase()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtector_ChainedAsIEnumerable_SuccessCase
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 174
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void GetDataProtector_ChainedAsIEnumerable_SuccessCase()
    content.vb: >-
      <Fact>

      Public Sub GetDataProtector_ChainedAsIEnumerable_SuccessCase
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  id: GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 198
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase()
    content.vb: >-
      <Fact>

      Public Sub GetDataProtector_ChainedAsParams_NonEmptyParams_SuccessCase
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  id: GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(String[])
  nameWithType: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(String[])
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 222
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{null})]

      [InlineData(new object[]{new string[]{}})]

      public void GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(string[] subPurposes)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {Nothing})>

      <InlineData(New Object() {New String() {}})>

      Public Sub GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(subPurposes As String())
    parameters:
    - id: subPurposes
      type: System.String[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(System.String())
  name.vb: GetDataProtector_ChainedAsParams_EmptyParams_SuccessCases(String())
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_InvalidUtf8_Failure
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_InvalidUtf8_Failure
  id: Protect_InvalidUtf8_Failure
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: Protect_InvalidUtf8_Failure()
  nameWithType: DataProtectionCommonExtensionsTests.Protect_InvalidUtf8_Failure()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_InvalidUtf8_Failure()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Protect_InvalidUtf8_Failure
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 242
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void Protect_InvalidUtf8_Failure()
    content.vb: >-
      <Fact>

      Public Sub Protect_InvalidUtf8_Failure
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_Success
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_Success
  id: Protect_Success
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: Protect_Success()
  nameWithType: DataProtectionCommonExtensionsTests.Protect_Success()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Protect_Success()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Protect_Success
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 256
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void Protect_Success()
    content.vb: >-
      <Fact>

      Public Sub Protect_Success
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidBase64BeforeDecryption_Failure
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidBase64BeforeDecryption_Failure
  id: Unprotect_InvalidBase64BeforeDecryption_Failure
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: Unprotect_InvalidBase64BeforeDecryption_Failure()
  nameWithType: DataProtectionCommonExtensionsTests.Unprotect_InvalidBase64BeforeDecryption_Failure()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidBase64BeforeDecryption_Failure()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Unprotect_InvalidBase64BeforeDecryption_Failure
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 270
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void Unprotect_InvalidBase64BeforeDecryption_Failure()
    content.vb: >-
      <Fact>

      Public Sub Unprotect_InvalidBase64BeforeDecryption_Failure
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidUtf8AfterDecryption_Failure
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidUtf8AfterDecryption_Failure
  id: Unprotect_InvalidUtf8AfterDecryption_Failure
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: Unprotect_InvalidUtf8AfterDecryption_Failure()
  nameWithType: DataProtectionCommonExtensionsTests.Unprotect_InvalidUtf8AfterDecryption_Failure()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_InvalidUtf8AfterDecryption_Failure()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Unprotect_InvalidUtf8AfterDecryption_Failure
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 283
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void Unprotect_InvalidUtf8AfterDecryption_Failure()
    content.vb: >-
      <Fact>

      Public Sub Unprotect_InvalidUtf8AfterDecryption_Failure
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_Success
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_Success
  id: Unprotect_Success
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests
  langs:
  - csharp
  - vb
  name: Unprotect_Success()
  nameWithType: DataProtectionCommonExtensionsTests.Unprotect_Success()
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensionsTests.Unprotect_Success()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Unprotect_Success
    path: test/Microsoft.AspNetCore.DataProtection.Abstractions.Test/DataProtectionCommonExtensionsTests.cs
    startLine: 298
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Abstractions.Test
  namespace: Microsoft.AspNetCore.DataProtection
  syntax:
    content: >-
      [Fact]

      public void Unprotect_Success()
    content.vb: >-
      <Fact>

      Public Sub Unprotect_Success
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.DataProtection
  commentId: N:Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection
  nameWithType: Microsoft.AspNetCore.DataProtection
  fullName: Microsoft.AspNetCore.DataProtection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
