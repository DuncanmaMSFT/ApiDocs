### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  commentId: T:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  id: RegistryXmlRepositoryTests
  parent: Microsoft.AspNetCore.DataProtection.Repositories
  children:
  - Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
  - Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.RegistryKey_Property
  - Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(System.String)
  - Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithValidFriendlyName_UsesFriendlyName
  - Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElements_ThenRetrieve_SeesAllElements
  langs:
  - csharp
  - vb
  name: RegistryXmlRepositoryTests
  nameWithType: RegistryXmlRepositoryTests
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RegistryXmlRepositoryTests
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: public class RegistryXmlRepositoryTests
    content.vb: Public Class RegistryXmlRepositoryTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.RegistryKey_Property
  commentId: M:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.RegistryKey_Property
  id: RegistryKey_Property
  parent: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  langs:
  - csharp
  - vb
  name: RegistryKey_Property()
  nameWithType: RegistryXmlRepositoryTests.RegistryKey_Property()
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.RegistryKey_Property()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RegistryKey_Property
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: >-
      [ConditionalFact]

      public void RegistryKey_Property()
    content.vb: >-
      <ConditionalFact>

      Public Sub RegistryKey_Property
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
  commentId: M:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
  id: GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
  parent: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  langs:
  - csharp
  - vb
  name: GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection()
  nameWithType: RegistryXmlRepositoryTests.GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection()
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 32
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: >-
      [ConditionalFact]

      public void GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection()
    content.vb: >-
      <ConditionalFact>

      Public Sub GetAllElements_EmptyOrNonexistentDirectory_ReturnsEmptyCollection
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithValidFriendlyName_UsesFriendlyName
  commentId: M:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithValidFriendlyName_UsesFriendlyName
  id: StoreElement_WithValidFriendlyName_UsesFriendlyName
  parent: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  langs:
  - csharp
  - vb
  name: StoreElement_WithValidFriendlyName_UsesFriendlyName()
  nameWithType: RegistryXmlRepositoryTests.StoreElement_WithValidFriendlyName_UsesFriendlyName()
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithValidFriendlyName_UsesFriendlyName()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: StoreElement_WithValidFriendlyName_UsesFriendlyName
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: >-
      [ConditionalFact]

      public void StoreElement_WithValidFriendlyName_UsesFriendlyName()
    content.vb: >-
      <ConditionalFact>

      Public Sub StoreElement_WithValidFriendlyName_UsesFriendlyName
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(System.String)
  commentId: M:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(System.String)
  id: StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(System.String)
  parent: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  langs:
  - csharp
  - vb
  name: StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(String)
  nameWithType: RegistryXmlRepositoryTests.StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(String)
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 75
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: >-
      [ConditionalTheory]

      [InlineData(null)]

      [InlineData(new object[]{""})]

      [InlineData(new object[]{" "})]

      [InlineData(new object[]{".."})]

      [InlineData(new object[]{"not*friendly"})]

      public void StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(string friendlyName)
    content.vb: >-
      <ConditionalTheory>

      <InlineData(Nothing)>

      <InlineData(New Object() {""})>

      <InlineData(New Object() {" "})>

      <InlineData(New Object() {".."})>

      <InlineData(New Object() {"not*friendly"})>

      Public Sub StoreElement_WithInvalidFriendlyName_CreatesNewGuidAsName(friendlyName As String)
    parameters:
    - id: friendlyName
      type: System.String
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElements_ThenRetrieve_SeesAllElements
  commentId: M:Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElements_ThenRetrieve_SeesAllElements
  id: StoreElements_ThenRetrieve_SeesAllElements
  parent: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests
  langs:
  - csharp
  - vb
  name: StoreElements_ThenRetrieve_SeesAllElements()
  nameWithType: RegistryXmlRepositoryTests.StoreElements_ThenRetrieve_SeesAllElements()
  fullName: Microsoft.AspNetCore.DataProtection.Repositories.RegistryXmlRepositoryTests.StoreElements_ThenRetrieve_SeesAllElements()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: StoreElements_ThenRetrieve_SeesAllElements
    path: test/Microsoft.AspNetCore.DataProtection.Test/Repositories/RegistryXmlRepositoryTests.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Test
  namespace: Microsoft.AspNetCore.DataProtection.Repositories
  syntax:
    content: >-
      [ConditionalFact]

      public void StoreElements_ThenRetrieve_SeesAllElements()
    content.vb: >-
      <ConditionalFact>

      Public Sub StoreElements_ThenRetrieve_SeesAllElements
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.DataProtection.Repositories
  commentId: N:Microsoft.AspNetCore.DataProtection.Repositories
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection.Repositories
  nameWithType: Microsoft.AspNetCore.DataProtection.Repositories
  fullName: Microsoft.AspNetCore.DataProtection.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
