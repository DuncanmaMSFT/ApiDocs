### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  commentId: T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  id: DataProtectionProvider
  parent: Microsoft.AspNetCore.DataProtection
  children:
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo)
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder})
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder},System.Security.Cryptography.X509Certificates.X509Certificate2)
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Security.Cryptography.X509Certificates.X509Certificate2)
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String)
  - Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  langs:
  - csharp
  - vb
  name: DataProtectionProvider
  nameWithType: DataProtectionProvider
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: DataProtectionProvider
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nContains factory methods for creating an <xref href=\"Microsoft.AspNetCore.DataProtection.IDataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> where keys are stored\nat a particular location on the file system.\n"
  remarks: Use these methods when not using dependency injection to provide the service to the application.
  example: []
  syntax:
    content: public static class DataProtectionProvider
    content.vb: Public Module DataProtectionProvider
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String)
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String)
  id: Create(System.String)
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: DataProtectionProvider.Create(String)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> that store keys in a location based on\nthe platform and operating system.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(string applicationName)
    content.vb: Public Shared Function Create(applicationName As String) As IDataProtectionProvider
    parameters:
    - id: applicationName
      type: System.String
      description: >-
        An identifier that uniquely discriminates this application from all other

        applications on the machine.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo)
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo)
  id: Create(System.IO.DirectoryInfo)
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(DirectoryInfo)
  nameWithType: DataProtectionProvider.Create(DirectoryInfo)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates an <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> given a location at which to store keys.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(DirectoryInfo keyDirectory)
    content.vb: Public Shared Function Create(keyDirectory As DirectoryInfo) As IDataProtectionProvider
    parameters:
    - id: keyDirectory
      type: System.IO.DirectoryInfo
      description: >-
        The <xref href="System.IO.DirectoryInfo" data-throw-if-not-resolved="false"></xref> in which keys should be stored. This may

        represent a directory on a local disk or a UNC share.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder})
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder})
  id: Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder})
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(DirectoryInfo, Action<IDataProtectionBuilder>)
  nameWithType: DataProtectionProvider.Create(DirectoryInfo, Action<IDataProtectionBuilder>)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo, System.Action<Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates an <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> given a location at which to store keys and an\noptional configuration callback.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(DirectoryInfo keyDirectory, Action<IDataProtectionBuilder> setupAction)
    content.vb: Public Shared Function Create(keyDirectory As DirectoryInfo, setupAction As Action(Of IDataProtectionBuilder)) As IDataProtectionProvider
    parameters:
    - id: keyDirectory
      type: System.IO.DirectoryInfo
      description: >-
        The <xref href="System.IO.DirectoryInfo" data-throw-if-not-resolved="false"></xref> in which keys should be stored. This may

        represent a directory on a local disk or a UNC share.
    - id: setupAction
      type: System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder}
      description: >-
        An optional callback which provides further configuration of the data protection

        system. See <xref href="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" data-throw-if-not-resolved="false"></xref> for more information.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  nameWithType.vb: DataProtectionProvider.Create(DirectoryInfo, Action(Of IDataProtectionBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo, System.Action(Of Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder))
  name.vb: Create(DirectoryInfo, Action(Of IDataProtectionBuilder))
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Create(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(String, X509Certificate2)
  nameWithType: DataProtectionProvider.Create(String, X509Certificate2)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.String, System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 83
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates a <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> that store keys in a location based on\nthe platform and operating system and uses the given <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> to encrypt the keys.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(string applicationName, X509Certificate2 certificate)
    content.vb: Public Shared Function Create(applicationName As String, certificate As X509Certificate2) As IDataProtectionProvider
    parameters:
    - id: applicationName
      type: System.String
      description: >-
        An identifier that uniquely discriminates this application from all other

        applications on the machine.
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: The <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2" data-throw-if-not-resolved="false"></xref> to be used for encryption.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Create(System.IO.DirectoryInfo,System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(DirectoryInfo, X509Certificate2)
  nameWithType: DataProtectionProvider.Create(DirectoryInfo, X509Certificate2)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo, System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates an <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> given a location at which to store keys\nand a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> used to encrypt the keys.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(DirectoryInfo keyDirectory, X509Certificate2 certificate)
    content.vb: Public Shared Function Create(keyDirectory As DirectoryInfo, certificate As X509Certificate2) As IDataProtectionProvider
    parameters:
    - id: keyDirectory
      type: System.IO.DirectoryInfo
      description: >-
        The <xref href="System.IO.DirectoryInfo" data-throw-if-not-resolved="false"></xref> in which keys should be stored. This may

        represent a directory on a local disk or a UNC share.
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: The <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2" data-throw-if-not-resolved="false"></xref> to be used for encryption.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder},System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder},System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Create(System.IO.DirectoryInfo,System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder},System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  langs:
  - csharp
  - vb
  name: Create(DirectoryInfo, Action<IDataProtectionBuilder>, X509Certificate2)
  nameWithType: DataProtectionProvider.Create(DirectoryInfo, Action<IDataProtectionBuilder>, X509Certificate2)
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo, System.Action<Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder>, System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Create
    path: src/Microsoft.AspNetCore.DataProtection.Extensions/DataProtectionProvider.cs
    startLine: 132
  assemblies:
  - Microsoft.AspNetCore.DataProtection.Extensions
  namespace: Microsoft.AspNetCore.DataProtection
  summary: "\nCreates an <xref href=\"Microsoft.AspNetCore.DataProtection.DataProtectionProvider\" data-throw-if-not-resolved=\"false\"></xref> given a location at which to store keys, an\noptional configuration callback and a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> used to encrypt the keys.\n"
  example: []
  syntax:
    content: public static IDataProtectionProvider Create(DirectoryInfo keyDirectory, Action<IDataProtectionBuilder> setupAction, X509Certificate2 certificate)
    content.vb: Public Shared Function Create(keyDirectory As DirectoryInfo, setupAction As Action(Of IDataProtectionBuilder), certificate As X509Certificate2) As IDataProtectionProvider
    parameters:
    - id: keyDirectory
      type: System.IO.DirectoryInfo
      description: >-
        The <xref href="System.IO.DirectoryInfo" data-throw-if-not-resolved="false"></xref> in which keys should be stored. This may

        represent a directory on a local disk or a UNC share.
    - id: setupAction
      type: System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder}
      description: >-
        An optional callback which provides further configuration of the data protection

        system. See <xref href="Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder" data-throw-if-not-resolved="false"></xref> for more information.
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: The <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2" data-throw-if-not-resolved="false"></xref> to be used for encryption.
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  nameWithType.vb: DataProtectionProvider.Create(DirectoryInfo, Action(Of IDataProtectionBuilder), X509Certificate2)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.DataProtection.DataProtectionProvider.Create(System.IO.DirectoryInfo, System.Action(Of Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder), System.Security.Cryptography.X509Certificates.X509Certificate2)
  name.vb: Create(DirectoryInfo, Action(Of IDataProtectionBuilder), X509Certificate2)
references:
- uid: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  commentId: T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: IDataProtectionProvider
  nameWithType: IDataProtectionProvider
  fullName: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
- uid: Microsoft.AspNetCore.DataProtection
  commentId: N:Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection
  nameWithType: Microsoft.AspNetCore.DataProtection
  fullName: Microsoft.AspNetCore.DataProtection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  commentId: T:Microsoft.AspNetCore.DataProtection.DataProtectionProvider
  isExternal: false
  name: DataProtectionProvider
  nameWithType: DataProtectionProvider
  fullName: Microsoft.AspNetCore.DataProtection.DataProtectionProvider
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: true
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
  commentId: T:Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: IDataProtectionBuilder
  nameWithType: IDataProtectionBuilder
  fullName: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
- uid: System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder}
  commentId: T:System.Action{Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder}
  parent: System
  definition: System.Action`1
  name: Action<IDataProtectionBuilder>
  nameWithType: Action<IDataProtectionBuilder>
  fullName: System.Action<Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder>
  nameWithType.vb: Action(Of IDataProtectionBuilder)
  fullname.vb: System.Action(Of Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder)
  name.vb: Action(Of IDataProtectionBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
    name: IDataProtectionBuilder
    nameWithType: IDataProtectionBuilder
    fullName: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
    name: IDataProtectionBuilder
    nameWithType: IDataProtectionBuilder
    fullName: Microsoft.AspNetCore.DataProtection.IDataProtectionBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: true
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
