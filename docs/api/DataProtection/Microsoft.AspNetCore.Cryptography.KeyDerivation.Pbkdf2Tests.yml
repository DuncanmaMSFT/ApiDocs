### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  commentId: T:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  id: Pbkdf2Tests
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation
  children:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Managed(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win7(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win8(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Managed
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win7
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win8
  langs:
  - csharp
  - vb
  name: Pbkdf2Tests
  nameWithType: Pbkdf2Tests
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: Pbkdf2Tests
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: public class Pbkdf2Tests
    content.vb: Public Class Pbkdf2Tests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Managed(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Managed(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  id: RunTest_Normal_Managed(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_Normal_Managed(String, KeyDerivationPrf, Int32, Int32, String)
  nameWithType: Pbkdf2Tests.RunTest_Normal_Managed(String, KeyDerivationPrf, Int32, Int32, String)
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Managed(System.String, Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_Normal_Managed
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})]

      public void RunTest_Normal_Managed(string password, KeyDerivationPrf prf, int iterationCount, int numBytesRequested, string expectedValueAsBase64)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})>

      Public Sub RunTest_Normal_Managed(password As String, prf As KeyDerivationPrf, iterationCount As Integer, numBytesRequested As Integer, expectedValueAsBase64 As String)
    parameters:
    - id: password
      type: System.String
    - id: prf
      type: Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
    - id: iterationCount
      type: System.Int32
    - id: numBytesRequested
      type: System.Int32
    - id: expectedValueAsBase64
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win7(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win7(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  id: RunTest_Normal_Win7(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_Normal_Win7(String, KeyDerivationPrf, Int32, Int32, String)
  nameWithType: Pbkdf2Tests.RunTest_Normal_Win7(String, KeyDerivationPrf, Int32, Int32, String)
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win7(System.String, Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_Normal_Win7
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [ConditionalTheory]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})]

      public void RunTest_Normal_Win7(string password, KeyDerivationPrf prf, int iterationCount, int numBytesRequested, string expectedValueAsBase64)
    content.vb: >-
      <ConditionalTheory>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})>

      Public Sub RunTest_Normal_Win7(password As String, prf As KeyDerivationPrf, iterationCount As Integer, numBytesRequested As Integer, expectedValueAsBase64 As String)
    parameters:
    - id: password
      type: System.String
    - id: prf
      type: Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
    - id: iterationCount
      type: System.Int32
    - id: numBytesRequested
      type: System.Int32
    - id: expectedValueAsBase64
      type: System.String
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win8(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win8(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  id: RunTest_Normal_Win8(System.String,Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf,System.Int32,System.Int32,System.String)
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_Normal_Win8(String, KeyDerivationPrf, Int32, Int32, String)
  nameWithType: Pbkdf2Tests.RunTest_Normal_Win8(String, KeyDerivationPrf, Int32, Int32, String)
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_Normal_Win8(System.String, Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf, System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_Normal_Win8
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [ConditionalTheory]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})]

      [InlineData(new object[]{"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})]

      public void RunTest_Normal_Win8(string password, KeyDerivationPrf prf, int iterationCount, int numBytesRequested, string expectedValueAsBase64)
    content.vb: >-
      <ConditionalTheory>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 19, "efmxNcKD/U1urTEDGvsThlPnHA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 20, "efmxNcKD/U1urTEDGvsThlPnHDI="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA1, 5, 21, "efmxNcKD/U1urTEDGvsThlPnHDLk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 31, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRA=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 32, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLo="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA256, 5, 33, "JRNz8bPKS02EG1vf7eWjA64IeeI+TI8gBEwb1oVvRLpk"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 63, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm9"})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 64, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Q=="})>

      <InlineData(New Object() {"my-password", KeyDerivationPrf.HMACSHA512, 5, 65, "ZTallQJrFn0279xIzaiA1XqatVTGei+ZjKngA7bIMtKMDUw6YJeGUQpFG8iGTgN+ri3LNDktNbzwfcSyZmm90Wk="})>

      Public Sub RunTest_Normal_Win8(password As String, prf As KeyDerivationPrf, iterationCount As Integer, numBytesRequested As Integer, expectedValueAsBase64 As String)
    parameters:
    - id: password
      type: System.String
    - id: prf
      type: Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
    - id: iterationCount
      type: System.Int32
    - id: numBytesRequested
      type: System.Int32
    - id: expectedValueAsBase64
      type: System.String
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Managed
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Managed
  id: RunTest_WithLongPassword_Managed
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_WithLongPassword_Managed()
  nameWithType: Pbkdf2Tests.RunTest_WithLongPassword_Managed()
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Managed()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_WithLongPassword_Managed
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 94
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [Fact]

      public void RunTest_WithLongPassword_Managed()
    content.vb: >-
      <Fact>

      Public Sub RunTest_WithLongPassword_Managed
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win7
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win7
  id: RunTest_WithLongPassword_Win7
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_WithLongPassword_Win7()
  nameWithType: Pbkdf2Tests.RunTest_WithLongPassword_Win7()
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win7()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_WithLongPassword_Win7
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 100
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [ConditionalFact]

      public void RunTest_WithLongPassword_Win7()
    content.vb: >-
      <ConditionalFact>

      Public Sub RunTest_WithLongPassword_Win7
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win8
  commentId: M:Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win8
  id: RunTest_WithLongPassword_Win8
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests
  langs:
  - csharp
  - vb
  name: RunTest_WithLongPassword_Win8()
  nameWithType: Pbkdf2Tests.RunTest_WithLongPassword_Win8()
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.Pbkdf2Tests.RunTest_WithLongPassword_Win8()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
      branch: master
      repo: https://github.com/aspnet/DataProtection.git
    id: RunTest_WithLongPassword_Win8
    path: test/Microsoft.AspNetCore.Cryptography.KeyDerivation.Test/Pbkdf2Tests.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Cryptography.KeyDerivation.Test
  namespace: Microsoft.AspNetCore.Cryptography.KeyDerivation
  syntax:
    content: >-
      [ConditionalFact]

      public void RunTest_WithLongPassword_Win8()
    content.vb: >-
      <ConditionalFact>

      Public Sub RunTest_WithLongPassword_Win8
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation
  commentId: N:Microsoft.AspNetCore.Cryptography.KeyDerivation
  isExternal: false
  name: Microsoft.AspNetCore.Cryptography.KeyDerivation
  nameWithType: Microsoft.AspNetCore.Cryptography.KeyDerivation
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
  commentId: T:Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
  parent: Microsoft.AspNetCore.Cryptography.KeyDerivation
  isExternal: false
  name: KeyDerivationPrf
  nameWithType: KeyDerivationPrf
  fullName: Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivationPrf
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
