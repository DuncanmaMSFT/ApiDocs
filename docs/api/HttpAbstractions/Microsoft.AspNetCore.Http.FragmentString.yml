### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.FragmentString
  commentId: T:Microsoft.AspNetCore.Http.FragmentString
  id: FragmentString
  parent: Microsoft.AspNetCore.Http
  children:
  - Microsoft.AspNetCore.Http.FragmentString.#ctor(System.String)
  - Microsoft.AspNetCore.Http.FragmentString.Empty
  - Microsoft.AspNetCore.Http.FragmentString.Equals(Microsoft.AspNetCore.Http.FragmentString)
  - Microsoft.AspNetCore.Http.FragmentString.Equals(System.Object)
  - Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)
  - Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)
  - Microsoft.AspNetCore.Http.FragmentString.GetHashCode
  - Microsoft.AspNetCore.Http.FragmentString.HasValue
  - Microsoft.AspNetCore.Http.FragmentString.op_Equality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  - Microsoft.AspNetCore.Http.FragmentString.op_Inequality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  - Microsoft.AspNetCore.Http.FragmentString.ToString
  - Microsoft.AspNetCore.Http.FragmentString.ToUriComponent
  - Microsoft.AspNetCore.Http.FragmentString.Value
  langs:
  - csharp
  - vb
  name: FragmentString
  nameWithType: FragmentString
  fullName: Microsoft.AspNetCore.Http.FragmentString
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FragmentString
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides correct handling for FragmentString value when needed to generate a URI string\n"
  example: []
  syntax:
    content: 'public struct FragmentString : IEquatable<FragmentString>'
    content.vb: >-
      Public Structure FragmentString
          Implements IEquatable(Of FragmentString)
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Http.FragmentString.Empty
  commentId: F:Microsoft.AspNetCore.Http.FragmentString.Empty
  id: Empty
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: FragmentString.Empty
  fullName: Microsoft.AspNetCore.Http.FragmentString.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Empty
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nRepresents the empty fragment string. This field is read-only.\n"
  example: []
  syntax:
    content: public static readonly FragmentString Empty
    content.vb: Public Shared ReadOnly Empty As FragmentString
    return:
      type: Microsoft.AspNetCore.Http.FragmentString
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.FragmentString.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: FragmentString(String)
  nameWithType: FragmentString.FragmentString(String)
  fullName: Microsoft.AspNetCore.Http.FragmentString.FragmentString(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nInitialize the fragment string with a given value. This value must be in escaped and delimited format with\na leading '#' character.\n"
  example: []
  syntax:
    content: public FragmentString(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: The fragment string to be assigned to the Value property.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.FragmentString.Value
  commentId: P:Microsoft.AspNetCore.Http.FragmentString.Value
  id: Value
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: FragmentString.Value
  fullName: Microsoft.AspNetCore.Http.FragmentString.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Value
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nThe escaped fragment string with the leading '#' character\n"
  example: []
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.FragmentString.HasValue
  commentId: P:Microsoft.AspNetCore.Http.FragmentString.HasValue
  id: HasValue
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: FragmentString.HasValue
  fullName: Microsoft.AspNetCore.Http.FragmentString.HasValue
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: HasValue
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 44
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nTrue if the fragment string is not empty\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.FragmentString.ToString
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FragmentString.ToString()
  fullName: Microsoft.AspNetCore.Http.FragmentString.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToString
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the fragment string escaped in a way which is correct for combining into the URI representation.\nA leading '#' character will be included unless the Value is null or empty. Characters which are potentially\ndangerous are escaped.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The fragment string value
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.FragmentString.ToUriComponent
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.ToUriComponent
  id: ToUriComponent
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: ToUriComponent()
  nameWithType: FragmentString.ToUriComponent()
  fullName: Microsoft.AspNetCore.Http.FragmentString.ToUriComponent()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the fragment string escaped in a way which is correct for combining into the URI representation.\nA leading '#' character will be included unless the Value is null or empty. Characters which are potentially\ndangerous are escaped.\n"
  example: []
  syntax:
    content: public string ToUriComponent()
    content.vb: Public Function ToUriComponent As String
    return:
      type: System.String
      description: The fragment string value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)
  id: FromUriComponent(System.String)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: FromUriComponent(String)
  nameWithType: FragmentString.FromUriComponent(String)
  fullName: Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 78
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an FragmentString given the fragment as it is escaped in the URI format. The string MUST NOT contain any\nvalue that is not a fragment.\n"
  example: []
  syntax:
    content: public static FragmentString FromUriComponent(string uriComponent)
    content.vb: Public Shared Function FromUriComponent(uriComponent As String) As FragmentString
    parameters:
    - id: uriComponent
      type: System.String
      description: The escaped fragment as it appears in the URI format.
    return:
      type: Microsoft.AspNetCore.Http.FragmentString
      description: The resulting FragmentString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)
  id: FromUriComponent(System.Uri)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: FromUriComponent(Uri)
  nameWithType: FragmentString.FromUriComponent(Uri)
  fullName: Microsoft.AspNetCore.Http.FragmentString.FromUriComponent(System.Uri)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an FragmentString given the fragment as from a Uri object. Relative Uri objects are not supported.\n"
  example: []
  syntax:
    content: public static FragmentString FromUriComponent(Uri uri)
    content.vb: Public Shared Function FromUriComponent(uri As Uri) As FragmentString
    parameters:
    - id: uri
      type: System.Uri
      description: The Uri object
    return:
      type: Microsoft.AspNetCore.Http.FragmentString
      description: The resulting FragmentString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.FragmentString.Equals(Microsoft.AspNetCore.Http.FragmentString)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.Equals(Microsoft.AspNetCore.Http.FragmentString)
  id: Equals(Microsoft.AspNetCore.Http.FragmentString)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Equals(FragmentString)
  nameWithType: FragmentString.Equals(FragmentString)
  fullName: Microsoft.AspNetCore.Http.FragmentString.Equals(Microsoft.AspNetCore.Http.FragmentString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public bool Equals(FragmentString other)
    content.vb: Public Function Equals(other As FragmentString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.FragmentString
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}.Equals(Microsoft.AspNetCore.Http.FragmentString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.FragmentString.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: FragmentString.Equals(Object)
  fullName: Microsoft.AspNetCore.Http.FragmentString.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.FragmentString.GetHashCode
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: FragmentString.GetHashCode()
  fullName: Microsoft.AspNetCore.Http.FragmentString.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 121
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.FragmentString.op_Equality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.op_Equality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  id: op_Equality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Equality(FragmentString, FragmentString)
  nameWithType: FragmentString.Equality(FragmentString, FragmentString)
  fullName: Microsoft.AspNetCore.Http.FragmentString.Equality(Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Http.FragmentString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Equality
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 126
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public static bool operator ==(FragmentString left, FragmentString right)
    content.vb: Public Shared Operator =(left As FragmentString, right As FragmentString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.FragmentString
    - id: right
      type: Microsoft.AspNetCore.Http.FragmentString
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.FragmentString.op_Inequality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  commentId: M:Microsoft.AspNetCore.Http.FragmentString.op_Inequality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  id: op_Inequality(Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Http.FragmentString)
  parent: Microsoft.AspNetCore.Http.FragmentString
  langs:
  - csharp
  - vb
  name: Inequality(FragmentString, FragmentString)
  nameWithType: FragmentString.Inequality(FragmentString, FragmentString)
  fullName: Microsoft.AspNetCore.Http.FragmentString.Inequality(Microsoft.AspNetCore.Http.FragmentString, Microsoft.AspNetCore.Http.FragmentString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Inequality
    path: src/Microsoft.AspNetCore.Http.Abstractions/FragmentString.cs
    startLine: 131
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public static bool operator !=(FragmentString left, FragmentString right)
    content.vb: Public Shared Operator <>(left As FragmentString, right As FragmentString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.FragmentString
    - id: right
      type: Microsoft.AspNetCore.Http.FragmentString
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<FragmentString>
  nameWithType: IEquatable<FragmentString>
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.FragmentString>
  nameWithType.vb: IEquatable(Of FragmentString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.FragmentString)
  name.vb: IEquatable(Of FragmentString)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.FragmentString
    name: FragmentString
    nameWithType: FragmentString
    fullName: Microsoft.AspNetCore.Http.FragmentString
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.FragmentString
    name: FragmentString
    nameWithType: FragmentString
    fullName: Microsoft.AspNetCore.Http.FragmentString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Http.FragmentString
  commentId: T:Microsoft.AspNetCore.Http.FragmentString
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: FragmentString
  nameWithType: FragmentString
  fullName: Microsoft.AspNetCore.Http.FragmentString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}.Equals(Microsoft.AspNetCore.Http.FragmentString)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}.Equals(Microsoft.AspNetCore.Http.FragmentString)
  parent: System.IEquatable{Microsoft.AspNetCore.Http.FragmentString}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(FragmentString)
  nameWithType: IEquatable<FragmentString>.Equals(FragmentString)
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.FragmentString>.Equals(Microsoft.AspNetCore.Http.FragmentString)
  nameWithType.vb: IEquatable(Of FragmentString).Equals(FragmentString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.FragmentString).Equals(Microsoft.AspNetCore.Http.FragmentString)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<FragmentString>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Http.FragmentString>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.FragmentString
    name: FragmentString
    nameWithType: FragmentString
    fullName: Microsoft.AspNetCore.Http.FragmentString
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of FragmentString).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Http.FragmentString).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.FragmentString
    name: FragmentString
    nameWithType: FragmentString
    fullName: Microsoft.AspNetCore.Http.FragmentString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
