### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.PathString
  commentId: T:Microsoft.AspNetCore.Http.PathString
  id: PathString
  parent: Microsoft.AspNetCore.Http
  children:
  - Microsoft.AspNetCore.Http.PathString.#ctor(System.String)
  - Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.PathString.Empty
  - Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  - Microsoft.AspNetCore.Http.PathString.Equals(System.Object)
  - Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)
  - Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)
  - Microsoft.AspNetCore.Http.PathString.GetHashCode
  - Microsoft.AspNetCore.Http.PathString.HasValue
  - Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)
  - Microsoft.AspNetCore.Http.PathString.op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.op_Implicit(Microsoft.AspNetCore.Http.PathString)~System.String
  - Microsoft.AspNetCore.Http.PathString.op_Implicit(System.String)~Microsoft.AspNetCore.Http.PathString
  - Microsoft.AspNetCore.Http.PathString.op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
  - Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)
  - Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  - Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)
  - Microsoft.AspNetCore.Http.PathString.ToString
  - Microsoft.AspNetCore.Http.PathString.ToUriComponent
  - Microsoft.AspNetCore.Http.PathString.Value
  langs:
  - csharp
  - vb
  name: PathString
  nameWithType: PathString
  fullName: Microsoft.AspNetCore.Http.PathString
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: PathString
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides correct escaping for Path and PathBase values when needed to reconstruct a request or redirect URI string\n"
  example: []
  syntax:
    content: 'public struct PathString : IEquatable<PathString>'
    content.vb: >-
      Public Structure PathString
          Implements IEquatable(Of PathString)
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.PathString}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Http.PathString.Empty
  commentId: F:Microsoft.AspNetCore.Http.PathString.Empty
  id: Empty
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: PathString.Empty
  fullName: Microsoft.AspNetCore.Http.PathString.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Empty
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nRepresents the empty path. This field is read-only.\n"
  example: []
  syntax:
    content: public static readonly PathString Empty
    content.vb: Public Shared ReadOnly Empty As PathString
    return:
      type: Microsoft.AspNetCore.Http.PathString
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.PathString.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Http.PathString.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: PathString(String)
  nameWithType: PathString.PathString(String)
  fullName: Microsoft.AspNetCore.Http.PathString.PathString(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nInitalize the path string with a given value. This value must be in unescaped format. Use\nPathString.FromUriComponent(value) if you have a path value which is in an escaped format.\n"
  example: []
  syntax:
    content: public PathString(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: The unescaped path to be assigned to the Value property.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.Value
  commentId: P:Microsoft.AspNetCore.Http.PathString.Value
  id: Value
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: PathString.Value
  fullName: Microsoft.AspNetCore.Http.PathString.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Value
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 40
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nThe unescaped path value\n"
  example: []
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.PathString.HasValue
  commentId: P:Microsoft.AspNetCore.Http.PathString.HasValue
  id: HasValue
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: PathString.HasValue
  fullName: Microsoft.AspNetCore.Http.PathString.HasValue
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: HasValue
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nTrue if the path is not empty\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.PathString.ToString
  commentId: M:Microsoft.AspNetCore.Http.PathString.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PathString.ToString()
  fullName: Microsoft.AspNetCore.Http.PathString.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToString
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the path string escaped in a way which is correct for combining into the URI representation. \n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The escaped path value
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.PathString.ToUriComponent
  commentId: M:Microsoft.AspNetCore.Http.PathString.ToUriComponent
  id: ToUriComponent
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: ToUriComponent()
  nameWithType: PathString.ToUriComponent()
  fullName: Microsoft.AspNetCore.Http.PathString.ToUriComponent()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the path string escaped in a way which is correct for combining into the URI representation.\n"
  example: []
  syntax:
    content: public string ToUriComponent()
    content.vb: Public Function ToUriComponent As String
    return:
      type: System.String
      description: The escaped path value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)
  commentId: M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)
  id: FromUriComponent(System.String)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: FromUriComponent(String)
  nameWithType: PathString.FromUriComponent(String)
  fullName: Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 95
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an PathString given the path as it is escaped in the URI format. The string MUST NOT contain any\nvalue that is not a path.\n"
  example: []
  syntax:
    content: public static PathString FromUriComponent(string uriComponent)
    content.vb: Public Shared Function FromUriComponent(uriComponent As String) As PathString
    parameters:
    - id: uriComponent
      type: System.String
      description: The escaped path as it appears in the URI format.
    return:
      type: Microsoft.AspNetCore.Http.PathString
      description: The resulting PathString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)
  commentId: M:Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)
  id: FromUriComponent(System.Uri)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: FromUriComponent(Uri)
  nameWithType: PathString.FromUriComponent(Uri)
  fullName: Microsoft.AspNetCore.Http.PathString.FromUriComponent(System.Uri)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 106
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an PathString given the path as from a Uri object. Relative Uri objects are not supported.\n"
  example: []
  syntax:
    content: public static PathString FromUriComponent(Uri uri)
    content.vb: Public Shared Function FromUriComponent(uri As Uri) As PathString
    parameters:
    - id: uri
      type: System.Uri
      description: The Uri object
    return:
      type: Microsoft.AspNetCore.Http.PathString
      description: The resulting PathString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
  id: StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: StartsWithSegments(PathString)
  nameWithType: PathString.StartsWithSegments(PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: StartsWithSegments
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 122
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nDetermines whether the beginning of this <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> instance matches the specified <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool StartsWithSegments(PathString other)
    content.vb: Public Function StartsWithSegments(other As PathString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: true if value matches the beginning of this string; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  commentId: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  id: StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: StartsWithSegments(PathString, StringComparison)
  nameWithType: PathString.StartsWithSegments(PathString, StringComparison)
  fullName: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: StartsWithSegments
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 134
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nDetermines whether the beginning of this <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> instance matches the specified <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> when compared\nusing the specified comparison option.\n"
  example: []
  syntax:
    content: public bool StartsWithSegments(PathString other, StringComparison comparisonType)
    content.vb: Public Function StartsWithSegments(other As PathString, comparisonType As StringComparison) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> to compare.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that determines how this <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> and value are compared.
    return:
      type: System.Boolean
      description: true if value matches the beginning of this string; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)
  commentId: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)
  id: StartsWithSegments(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString@)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: StartsWithSegments(PathString, out PathString)
  nameWithType: PathString.StartsWithSegments(PathString, out PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString, out Microsoft.AspNetCore.Http.PathString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: StartsWithSegments
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 152
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nDetermines whether the beginning of this PathString instance matches the specified <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> when compared\nusing the specified comparison option and returns the remaining segments.\n"
  example: []
  syntax:
    content: public bool StartsWithSegments(PathString other, out PathString remaining)
    content.vb: Public Function StartsWithSegments(other As PathString, ByRef remaining As PathString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> to compare.
    - id: remaining
      type: Microsoft.AspNetCore.Http.PathString
      description: The remaining segments after the match.
    return:
      type: System.Boolean
      description: true if value matches the beginning of this string; otherwise, false.
  nameWithType.vb: PathString.StartsWithSegments(PathString, ByRef PathString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString, ByRef Microsoft.AspNetCore.Http.PathString)
  name.vb: StartsWithSegments(PathString, ByRef PathString)
- uid: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)
  commentId: M:Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)
  id: StartsWithSegments(Microsoft.AspNetCore.Http.PathString,System.StringComparison,Microsoft.AspNetCore.Http.PathString@)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: StartsWithSegments(PathString, StringComparison, out PathString)
  nameWithType: PathString.StartsWithSegments(PathString, StringComparison, out PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison, out Microsoft.AspNetCore.Http.PathString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: StartsWithSegments
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 165
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nDetermines whether the beginning of this <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> instance matches the specified <xref href=\"Microsoft.AspNetCore.Http.PathString\" data-throw-if-not-resolved=\"false\"></xref> and returns\nthe remaining segments.\n"
  example: []
  syntax:
    content: public bool StartsWithSegments(PathString other, StringComparison comparisonType, out PathString remaining)
    content.vb: Public Function StartsWithSegments(other As PathString, comparisonType As StringComparison, ByRef remaining As PathString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> to compare.
    - id: comparisonType
      type: System.StringComparison
      description: One of the enumeration values that determines how this <xref href="Microsoft.AspNetCore.Http.PathString" data-throw-if-not-resolved="false"></xref> and value are compared.
    - id: remaining
      type: Microsoft.AspNetCore.Http.PathString
      description: The remaining segments after the match.
    return:
      type: System.Boolean
      description: true if value matches the beginning of this string; otherwise, false.
  nameWithType.vb: PathString.StartsWithSegments(PathString, StringComparison, ByRef PathString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Http.PathString.StartsWithSegments(Microsoft.AspNetCore.Http.PathString, System.StringComparison, ByRef Microsoft.AspNetCore.Http.PathString)
  name.vb: StartsWithSegments(PathString, StringComparison, ByRef PathString)
- uid: Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)
  id: Add(Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Add(PathString)
  nameWithType: PathString.Add(PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.PathString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Add
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 185
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nAdds two PathString instances into a combined PathString value. \n"
  example: []
  syntax:
    content: public PathString Add(PathString other)
    content.vb: Public Function Add(other As PathString) As PathString
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
    return:
      type: Microsoft.AspNetCore.Http.PathString
      description: The combined PathString value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)
  id: Add(Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Add(QueryString)
  nameWithType: PathString.Add(QueryString)
  fullName: Microsoft.AspNetCore.Http.PathString.Add(Microsoft.AspNetCore.Http.QueryString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Add
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 203
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCombines a PathString and QueryString into the joined URI formatted string value. \n"
  example: []
  syntax:
    content: public string Add(QueryString other)
    content.vb: Public Function Add(other As QueryString) As String
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: System.String
      description: The joined URI formatted string value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)
  id: Equals(Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Equals(PathString)
  nameWithType: PathString.Equals(PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 213
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCompares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.\n"
  example: []
  syntax:
    content: public bool Equals(PathString other)
    content.vb: Public Function Equals(other As PathString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The second PathString for comparison.
    return:
      type: System.Boolean
      description: True if both PathString values are equal
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.PathString}.Equals(Microsoft.AspNetCore.Http.PathString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  commentId: M:Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  id: Equals(Microsoft.AspNetCore.Http.PathString,System.StringComparison)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Equals(PathString, StringComparison)
  nameWithType: PathString.Equals(PathString, StringComparison)
  fullName: Microsoft.AspNetCore.Http.PathString.Equals(Microsoft.AspNetCore.Http.PathString, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 224
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCompares this PathString value to another value using a specific StringComparison type\n"
  example: []
  syntax:
    content: public bool Equals(PathString other, StringComparison comparisonType)
    content.vb: Public Function Equals(other As PathString, comparisonType As StringComparison) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.PathString
      description: The second PathString for comparison
    - id: comparisonType
      type: System.StringComparison
      description: The StringComparison type to use
    return:
      type: System.Boolean
      description: True if both PathString values are equal
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.PathString.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Http.PathString.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: PathString.Equals(Object)
  fullName: Microsoft.AspNetCore.Http.PathString.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 234
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCompares this PathString value to another value. The default comparison is StringComparison.OrdinalIgnoreCase.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The second PathString for comparison.
    return:
      type: System.Boolean
      description: True if both PathString values are equal
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.PathString.GetHashCode
  commentId: M:Microsoft.AspNetCore.Http.PathString.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: PathString.GetHashCode()
  fullName: Microsoft.AspNetCore.Http.PathString.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 247
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns the hash code for the PathString value. The hash code is provided by the OrdinalIgnoreCase implementation.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.PathString.op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  id: op_Equality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Equality(PathString, PathString)
  nameWithType: PathString.Equality(PathString, PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Equality(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Equality
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 258
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nOperator call through to Equals\n"
  example: []
  syntax:
    content: public static bool operator ==(PathString left, PathString right)
    content.vb: Public Shared Operator =(left As PathString, right As PathString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.PathString
      description: The left parameter
    - id: right
      type: Microsoft.AspNetCore.Http.PathString
      description: The right parameter
    return:
      type: System.Boolean
      description: True if both PathString values are equal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  id: op_Inequality(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Inequality(PathString, PathString)
  nameWithType: PathString.Inequality(PathString, PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Inequality(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Inequality
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 269
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nOperator call through to Equals\n"
  example: []
  syntax:
    content: public static bool operator !=(PathString left, PathString right)
    content.vb: Public Shared Operator <>(left As PathString, right As PathString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.PathString
      description: The left parameter
    - id: right
      type: Microsoft.AspNetCore.Http.PathString
      description: The right parameter
    return:
      type: System.Boolean
      description: True if both PathString values are not equal
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)
  id: op_Addition(System.String,Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Addition(String, PathString)
  nameWithType: PathString.Addition(String, PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Addition(System.String, Microsoft.AspNetCore.Http.PathString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Addition
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 279
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\n"
  example: []
  syntax:
    content: public static string operator +(string left, PathString right)
    content.vb: Public Shared Operator +(left As String, right As PathString) As String
    parameters:
    - id: left
      type: System.String
      description: The left parameter
    - id: right
      type: Microsoft.AspNetCore.Http.PathString
      description: The right parameter
    return:
      type: System.String
      description: The ToString combination of both values
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)
  id: op_Addition(Microsoft.AspNetCore.Http.PathString,System.String)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Addition(PathString, String)
  nameWithType: PathString.Addition(PathString, String)
  fullName: Microsoft.AspNetCore.Http.PathString.Addition(Microsoft.AspNetCore.Http.PathString, System.String)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Addition
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 291
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\n"
  example: []
  syntax:
    content: public static string operator +(PathString left, string right)
    content.vb: Public Shared Operator +(left As PathString, right As String) As String
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.PathString
      description: The left parameter
    - id: right
      type: System.String
      description: The right parameter
    return:
      type: System.String
      description: The ToString combination of both values
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  id: op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.PathString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Addition(PathString, PathString)
  nameWithType: PathString.Addition(PathString, PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Addition(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.PathString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Addition
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 304
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nOperator call through to Add\n"
  example: []
  syntax:
    content: public static PathString operator +(PathString left, PathString right)
    content.vb: Public Shared Operator +(left As PathString, right As PathString) As PathString
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.PathString
      description: The left parameter
    - id: right
      type: Microsoft.AspNetCore.Http.PathString
      description: The right parameter
    return:
      type: Microsoft.AspNetCore.Http.PathString
      description: The PathString combination of both values
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)
  id: op_Addition(Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Addition(PathString, QueryString)
  nameWithType: PathString.Addition(PathString, QueryString)
  fullName: Microsoft.AspNetCore.Http.PathString.Addition(Microsoft.AspNetCore.Http.PathString, Microsoft.AspNetCore.Http.QueryString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Addition
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 315
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nOperator call through to Add\n"
  example: []
  syntax:
    content: public static string operator +(PathString left, QueryString right)
    content.vb: Public Shared Operator +(left As PathString, right As QueryString) As String
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.PathString
      description: The left parameter
    - id: right
      type: Microsoft.AspNetCore.Http.QueryString
      description: The right parameter
    return:
      type: System.String
      description: The PathString combination of both values
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.PathString.op_Implicit(System.String)~Microsoft.AspNetCore.Http.PathString
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Implicit(System.String)~Microsoft.AspNetCore.Http.PathString
  id: op_Implicit(System.String)~Microsoft.AspNetCore.Http.PathString
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Implicit(String to PathString)
  nameWithType: PathString.Implicit(String to PathString)
  fullName: Microsoft.AspNetCore.Http.PathString.Implicit(System.String to Microsoft.AspNetCore.Http.PathString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Implicit
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 324
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nImplicitly creates a new PathString from the given string.\n"
  example: []
  syntax:
    content: public static implicit operator PathString(string s)
    content.vb: Public Shared Widening Operator CType(s As String) As PathString
    parameters:
    - id: s
      type: System.String
      description: ''
    return:
      type: Microsoft.AspNetCore.Http.PathString
  nameWithType.vb: PathString.Widening(String to PathString)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Http.PathString.Widening(System.String to Microsoft.AspNetCore.Http.PathString)
  name.vb: Widening(String to PathString)
- uid: Microsoft.AspNetCore.Http.PathString.op_Implicit(Microsoft.AspNetCore.Http.PathString)~System.String
  commentId: M:Microsoft.AspNetCore.Http.PathString.op_Implicit(Microsoft.AspNetCore.Http.PathString)~System.String
  id: op_Implicit(Microsoft.AspNetCore.Http.PathString)~System.String
  parent: Microsoft.AspNetCore.Http.PathString
  langs:
  - csharp
  - vb
  name: Implicit(PathString to String)
  nameWithType: PathString.Implicit(PathString to String)
  fullName: Microsoft.AspNetCore.Http.PathString.Implicit(Microsoft.AspNetCore.Http.PathString to System.String)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Implicit
    path: src/Microsoft.AspNetCore.Http.Abstractions/PathString.cs
    startLine: 333
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nImplicitly calls ToString().\n"
  example: []
  syntax:
    content: public static implicit operator string (PathString path)
    content.vb: Public Shared Widening Operator CType(path As PathString) As String
    parameters:
    - id: path
      type: Microsoft.AspNetCore.Http.PathString
      description: ''
    return:
      type: System.String
  nameWithType.vb: PathString.Widening(PathString to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Http.PathString.Widening(Microsoft.AspNetCore.Http.PathString to System.String)
  name.vb: Widening(PathString to String)
references:
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.IEquatable{Microsoft.AspNetCore.Http.PathString}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Http.PathString}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<PathString>
  nameWithType: IEquatable<PathString>
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.PathString>
  nameWithType.vb: IEquatable(Of PathString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.PathString)
  name.vb: IEquatable(Of PathString)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.PathString
    name: PathString
    nameWithType: PathString
    fullName: Microsoft.AspNetCore.Http.PathString
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.PathString
    name: PathString
    nameWithType: PathString
    fullName: Microsoft.AspNetCore.Http.PathString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Http.PathString
  commentId: T:Microsoft.AspNetCore.Http.PathString
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: PathString
  nameWithType: PathString
  fullName: Microsoft.AspNetCore.Http.PathString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: Microsoft.AspNetCore.Http.QueryString
  commentId: T:Microsoft.AspNetCore.Http.QueryString
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: QueryString
  nameWithType: QueryString
  fullName: Microsoft.AspNetCore.Http.QueryString
- uid: System.IEquatable{Microsoft.AspNetCore.Http.PathString}.Equals(Microsoft.AspNetCore.Http.PathString)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Http.PathString}.Equals(Microsoft.AspNetCore.Http.PathString)
  parent: System.IEquatable{Microsoft.AspNetCore.Http.PathString}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(PathString)
  nameWithType: IEquatable<PathString>.Equals(PathString)
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.PathString>.Equals(Microsoft.AspNetCore.Http.PathString)
  nameWithType.vb: IEquatable(Of PathString).Equals(PathString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.PathString).Equals(Microsoft.AspNetCore.Http.PathString)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<PathString>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Http.PathString>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.PathString
    name: PathString
    nameWithType: PathString
    fullName: Microsoft.AspNetCore.Http.PathString
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of PathString).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Http.PathString).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.PathString
    name: PathString
    nameWithType: PathString
    fullName: Microsoft.AspNetCore.Http.PathString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
