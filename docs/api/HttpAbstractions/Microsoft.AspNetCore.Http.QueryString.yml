### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.QueryString
  commentId: T:Microsoft.AspNetCore.Http.QueryString
  id: QueryString
  parent: Microsoft.AspNetCore.Http
  children:
  - Microsoft.AspNetCore.Http.QueryString.#ctor(System.String)
  - Microsoft.AspNetCore.Http.QueryString.Add(Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.QueryString.Add(System.String,System.String)
  - Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
  - Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.AspNetCore.Http.QueryString.Create(System.String,System.String)
  - Microsoft.AspNetCore.Http.QueryString.Empty
  - Microsoft.AspNetCore.Http.QueryString.Equals(Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.QueryString.Equals(System.Object)
  - Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)
  - Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)
  - Microsoft.AspNetCore.Http.QueryString.GetHashCode
  - Microsoft.AspNetCore.Http.QueryString.HasValue
  - Microsoft.AspNetCore.Http.QueryString.op_Addition(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.QueryString.op_Equality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.QueryString.op_Inequality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  - Microsoft.AspNetCore.Http.QueryString.ToString
  - Microsoft.AspNetCore.Http.QueryString.ToUriComponent
  - Microsoft.AspNetCore.Http.QueryString.Value
  langs:
  - csharp
  - vb
  name: QueryString
  nameWithType: QueryString
  fullName: Microsoft.AspNetCore.Http.QueryString
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: QueryString
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides correct handling for QueryString value when needed to reconstruct a request or redirect URI string\n"
  example: []
  syntax:
    content: 'public struct QueryString : IEquatable<QueryString>'
    content.vb: >-
      Public Structure QueryString
          Implements IEquatable(Of QueryString)
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.QueryString}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Http.QueryString.Empty
  commentId: F:Microsoft.AspNetCore.Http.QueryString.Empty
  id: Empty
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: QueryString.Empty
  fullName: Microsoft.AspNetCore.Http.QueryString.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Empty
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nRepresents the empty query string. This field is read-only.\n"
  example: []
  syntax:
    content: public static readonly QueryString Empty
    content.vb: Public Shared ReadOnly Empty As QueryString
    return:
      type: Microsoft.AspNetCore.Http.QueryString
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.QueryString.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: QueryString(String)
  nameWithType: QueryString.QueryString(String)
  fullName: Microsoft.AspNetCore.Http.QueryString.QueryString(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nInitialize the query string with a given value. This value must be in escaped and delimited format with\na leading '?' character. \n"
  example: []
  syntax:
    content: public QueryString(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: The query string to be assigned to the Value property.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.QueryString.Value
  commentId: P:Microsoft.AspNetCore.Http.QueryString.Value
  id: Value
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: QueryString.Value
  fullName: Microsoft.AspNetCore.Http.QueryString.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Value
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 40
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nThe escaped query string with the leading '?' character\n"
  example: []
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.QueryString.HasValue
  commentId: P:Microsoft.AspNetCore.Http.QueryString.HasValue
  id: HasValue
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: QueryString.HasValue
  fullName: Microsoft.AspNetCore.Http.QueryString.HasValue
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: HasValue
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nTrue if the query string is not empty\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.QueryString.ToString
  commentId: M:Microsoft.AspNetCore.Http.QueryString.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: QueryString.ToString()
  fullName: Microsoft.AspNetCore.Http.QueryString.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToString
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the query string escaped in a way which is correct for combining into the URI representation. \nA leading '?' character will be included unless the Value is null or empty. Characters which are potentially\ndangerous are escaped.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The query string value
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.QueryString.ToUriComponent
  commentId: M:Microsoft.AspNetCore.Http.QueryString.ToUriComponent
  id: ToUriComponent
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: ToUriComponent()
  nameWithType: QueryString.ToUriComponent()
  fullName: Microsoft.AspNetCore.Http.QueryString.ToUriComponent()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ToUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nProvides the query string escaped in a way which is correct for combining into the URI representation. \nA leading '?' character will be included unless the Value is null or empty. Characters which are potentially\ndangerous are escaped.\n"
  example: []
  syntax:
    content: public string ToUriComponent()
    content.vb: Public Function ToUriComponent As String
    return:
      type: System.String
      description: The query string value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)
  id: FromUriComponent(System.String)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: FromUriComponent(String)
  nameWithType: QueryString.FromUriComponent(String)
  fullName: Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 82
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an QueryString given the query as it is escaped in the URI format. The string MUST NOT contain any\nvalue that is not a query.\n"
  example: []
  syntax:
    content: public static QueryString FromUriComponent(string uriComponent)
    content.vb: Public Shared Function FromUriComponent(uriComponent As String) As QueryString
    parameters:
    - id: uriComponent
      type: System.String
      description: The escaped query as it appears in the URI format.
    return:
      type: Microsoft.AspNetCore.Http.QueryString
      description: The resulting QueryString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)
  id: FromUriComponent(System.Uri)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: FromUriComponent(Uri)
  nameWithType: QueryString.FromUriComponent(Uri)
  fullName: Microsoft.AspNetCore.Http.QueryString.FromUriComponent(System.Uri)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: FromUriComponent
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 96
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nReturns an QueryString given the query as from a Uri object. Relative Uri objects are not supported.\n"
  example: []
  syntax:
    content: public static QueryString FromUriComponent(Uri uri)
    content.vb: Public Shared Function FromUriComponent(uri As Uri) As QueryString
    parameters:
    - id: uri
      type: System.Uri
      description: The Uri object
    return:
      type: Microsoft.AspNetCore.Http.QueryString
      description: The resulting QueryString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.QueryString.Create(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Create(System.String,System.String)
  id: Create(System.String,System.String)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Create(String, String)
  nameWithType: QueryString.Create(String, String)
  fullName: Microsoft.AspNetCore.Http.QueryString.Create(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Create
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 117
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCreate a query string with a single given parameter name and value.\n"
  example: []
  syntax:
    content: public static QueryString Create(string name, string value)
    content.vb: Public Shared Function Create(name As String, value As String) As QueryString
    parameters:
    - id: name
      type: System.String
      description: The un-encoded parameter name
    - id: value
      type: System.String
      description: The un-encoded parameter value
    return:
      type: Microsoft.AspNetCore.Http.QueryString
      description: The resulting QueryString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<KeyValuePair<String, String>>)
  nameWithType: QueryString.Create(IEnumerable<KeyValuePair<String, String>>)
  fullName: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Create
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 136
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCreates a query string composed from the given name value pairs.\n"
  example: []
  syntax:
    content: public static QueryString Create(IEnumerable<KeyValuePair<string, string>> parameters)
    content.vb: Public Shared Function Create(parameters As IEnumerable(Of KeyValuePair(Of String, String))) As QueryString
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: ''
    return:
      type: Microsoft.AspNetCore.Http.QueryString
      description: The resulting QueryString
  nameWithType.vb: QueryString.Create(IEnumerable(Of KeyValuePair(Of String, String)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)))
  name.vb: Create(IEnumerable(Of KeyValuePair(Of String, String)))
- uid: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
  id: Create(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}})
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<KeyValuePair<String, StringValues>>)
  nameWithType: QueryString.Create(IEnumerable<KeyValuePair<String, StringValues>>)
  fullName: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Primitives.StringValues>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Create
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 157
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nCreates a query string composed from the given name value pairs.\n"
  example: []
  syntax:
    content: public static QueryString Create(IEnumerable<KeyValuePair<string, StringValues>> parameters)
    content.vb: Public Shared Function Create(parameters As IEnumerable(Of KeyValuePair(Of String, StringValues))) As QueryString
    parameters:
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}}
      description: ''
    return:
      type: Microsoft.AspNetCore.Http.QueryString
      description: The resulting QueryString
  nameWithType.vb: QueryString.Create(IEnumerable(Of KeyValuePair(Of String, StringValues)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Http.QueryString.Create(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Primitives.StringValues)))
  name.vb: Create(IEnumerable(Of KeyValuePair(Of String, StringValues)))
- uid: Microsoft.AspNetCore.Http.QueryString.Add(Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Add(Microsoft.AspNetCore.Http.QueryString)
  id: Add(Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Add(QueryString)
  nameWithType: QueryString.Add(QueryString)
  fullName: Microsoft.AspNetCore.Http.QueryString.Add(Microsoft.AspNetCore.Http.QueryString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Add
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 176
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public QueryString Add(QueryString other)
    content.vb: Public Function Add(other As QueryString) As QueryString
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: Microsoft.AspNetCore.Http.QueryString
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.QueryString.Add(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Add(String, String)
  nameWithType: QueryString.Add(String, String)
  fullName: Microsoft.AspNetCore.Http.QueryString.Add(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Add
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 191
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public QueryString Add(string name, string value)
    content.vb: Public Function Add(name As String, value As String) As QueryString
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.String
    return:
      type: Microsoft.AspNetCore.Http.QueryString
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.QueryString.Equals(Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Equals(Microsoft.AspNetCore.Http.QueryString)
  id: Equals(Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Equals(QueryString)
  nameWithType: QueryString.Equals(QueryString)
  fullName: Microsoft.AspNetCore.Http.QueryString.Equals(Microsoft.AspNetCore.Http.QueryString)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 215
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public bool Equals(QueryString other)
    content.vb: Public Function Equals(other As QueryString) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Http.QueryString}.Equals(Microsoft.AspNetCore.Http.QueryString)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.QueryString.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: QueryString.Equals(Object)
  fullName: Microsoft.AspNetCore.Http.QueryString.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Equals
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 220
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.QueryString.GetHashCode
  commentId: M:Microsoft.AspNetCore.Http.QueryString.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: QueryString.GetHashCode()
  fullName: Microsoft.AspNetCore.Http.QueryString.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 229
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Http.QueryString.op_Equality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.op_Equality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  id: op_Equality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Equality(QueryString, QueryString)
  nameWithType: QueryString.Equality(QueryString, QueryString)
  fullName: Microsoft.AspNetCore.Http.QueryString.Equality(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Equality
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 234
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public static bool operator ==(QueryString left, QueryString right)
    content.vb: Public Shared Operator =(left As QueryString, right As QueryString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.QueryString
    - id: right
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.QueryString.op_Inequality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.op_Inequality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  id: op_Inequality(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Inequality(QueryString, QueryString)
  nameWithType: QueryString.Inequality(QueryString, QueryString)
  fullName: Microsoft.AspNetCore.Http.QueryString.Inequality(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Inequality
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 239
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public static bool operator !=(QueryString left, QueryString right)
    content.vb: Public Shared Operator <>(left As QueryString, right As QueryString) As Boolean
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.QueryString
    - id: right
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Http.QueryString.op_Addition(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  commentId: M:Microsoft.AspNetCore.Http.QueryString.op_Addition(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  id: op_Addition(Microsoft.AspNetCore.Http.QueryString,Microsoft.AspNetCore.Http.QueryString)
  parent: Microsoft.AspNetCore.Http.QueryString
  langs:
  - csharp
  - vb
  name: Addition(QueryString, QueryString)
  nameWithType: QueryString.Addition(QueryString, QueryString)
  fullName: Microsoft.AspNetCore.Http.QueryString.Addition(Microsoft.AspNetCore.Http.QueryString, Microsoft.AspNetCore.Http.QueryString)
  type: Operator
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: op_Addition
    path: src/Microsoft.AspNetCore.Http.Abstractions/QueryString.cs
    startLine: 244
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  syntax:
    content: public static QueryString operator +(QueryString left, QueryString right)
    content.vb: Public Shared Operator +(left As QueryString, right As QueryString) As QueryString
    parameters:
    - id: left
      type: Microsoft.AspNetCore.Http.QueryString
    - id: right
      type: Microsoft.AspNetCore.Http.QueryString
    return:
      type: Microsoft.AspNetCore.Http.QueryString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.IEquatable{Microsoft.AspNetCore.Http.QueryString}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Http.QueryString}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<QueryString>
  nameWithType: IEquatable<QueryString>
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.QueryString>
  nameWithType.vb: IEquatable(Of QueryString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.QueryString)
  name.vb: IEquatable(Of QueryString)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.QueryString
    name: QueryString
    nameWithType: QueryString
    fullName: Microsoft.AspNetCore.Http.QueryString
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.QueryString
    name: QueryString
    nameWithType: QueryString
    fullName: Microsoft.AspNetCore.Http.QueryString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Http.QueryString
  commentId: T:Microsoft.AspNetCore.Http.QueryString
  parent: Microsoft.AspNetCore.Http
  isExternal: false
  name: QueryString
  nameWithType: QueryString
  fullName: Microsoft.AspNetCore.Http.QueryString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Primitives.StringValues}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, StringValues>>
  nameWithType: IEnumerable<KeyValuePair<String, StringValues>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Primitives.StringValues>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, StringValues))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Primitives.StringValues))
  name.vb: IEnumerable(Of KeyValuePair(Of String, StringValues))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Microsoft.AspNetCore.Http.QueryString}.Equals(Microsoft.AspNetCore.Http.QueryString)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Http.QueryString}.Equals(Microsoft.AspNetCore.Http.QueryString)
  parent: System.IEquatable{Microsoft.AspNetCore.Http.QueryString}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(QueryString)
  nameWithType: IEquatable<QueryString>.Equals(QueryString)
  fullName: System.IEquatable<Microsoft.AspNetCore.Http.QueryString>.Equals(Microsoft.AspNetCore.Http.QueryString)
  nameWithType.vb: IEquatable(Of QueryString).Equals(QueryString)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Http.QueryString).Equals(Microsoft.AspNetCore.Http.QueryString)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<QueryString>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Http.QueryString>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.QueryString
    name: QueryString
    nameWithType: QueryString
    fullName: Microsoft.AspNetCore.Http.QueryString
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of QueryString).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Http.QueryString).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Http.QueryString
    name: QueryString
    nameWithType: QueryString
    fullName: Microsoft.AspNetCore.Http.QueryString
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
