### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  commentId: T:Microsoft.AspNetCore.WebUtilities.QueryHelpers
  id: QueryHelpers
  parent: Microsoft.AspNetCore.WebUtilities
  children:
  - Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  - Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.String,System.String)
  - Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseNullableQuery(System.String)
  - Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(System.String)
  langs:
  - csharp
  - vb
  name: QueryHelpers
  nameWithType: QueryHelpers
  fullName: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: QueryHelpers
    path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.WebUtilities
  namespace: Microsoft.AspNetCore.WebUtilities
  syntax:
    content: public static class QueryHelpers
    content.vb: Public Module QueryHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.String,System.String)
  id: AddQueryString(System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  langs:
  - csharp
  - vb
  name: AddQueryString(String, String, String)
  nameWithType: QueryHelpers.AddQueryString(String, String, String)
  fullName: Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: AddQueryString
    path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.WebUtilities
  namespace: Microsoft.AspNetCore.WebUtilities
  summary: "\nAppend the given query key and value to the URI.\n"
  example: []
  syntax:
    content: public static string AddQueryString(string uri, string name, string value)
    content.vb: Public Shared Function AddQueryString(uri As String, name As String, value As String) As String
    parameters:
    - id: uri
      type: System.String
      description: The base URI.
    - id: name
      type: System.String
      description: The name of the query key.
    - id: value
      type: System.String
      description: The query value.
    return:
      type: System.String
      description: The combined result.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  id: AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  langs:
  - csharp
  - vb
  name: AddQueryString(String, IDictionary<String, String>)
  nameWithType: QueryHelpers.AddQueryString(String, IDictionary<String, String>)
  fullName: Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: AddQueryString
    path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
    startLine: 47
  assemblies:
  - Microsoft.AspNetCore.WebUtilities
  namespace: Microsoft.AspNetCore.WebUtilities
  summary: "\nAppend the given query keys and values to the uri.\n"
  example: []
  syntax:
    content: public static string AddQueryString(string uri, IDictionary<string, string> queryString)
    content.vb: Public Shared Function AddQueryString(uri As String, queryString As IDictionary(Of String, String)) As String
    parameters:
    - id: uri
      type: System.String
      description: The base uri.
    - id: queryString
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: A collection of name value query pairs to append.
    return:
      type: System.String
      description: The combined result.
  nameWithType.vb: QueryHelpers.AddQueryString(String, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString(System.String, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: AddQueryString(String, IDictionary(Of String, String))
- uid: Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(System.String)
  commentId: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(System.String)
  id: ParseQuery(System.String)
  parent: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  langs:
  - csharp
  - vb
  name: ParseQuery(String)
  nameWithType: QueryHelpers.ParseQuery(String)
  fullName: Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ParseQuery
    path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
    startLine: 109
  assemblies:
  - Microsoft.AspNetCore.WebUtilities
  namespace: Microsoft.AspNetCore.WebUtilities
  summary: "\nParse a query string into its component key and value parts.\n"
  example: []
  syntax:
    content: public static Dictionary<string, StringValues> ParseQuery(string queryString)
    content.vb: Public Shared Function ParseQuery(queryString As String) As Dictionary(Of String, StringValues)
    parameters:
    - id: queryString
      type: System.String
      description: The raw query string value, with or without the leading '?'.
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues}
      description: A collection of parsed keys and values.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseNullableQuery(System.String)
  commentId: M:Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseNullableQuery(System.String)
  id: ParseNullableQuery(System.String)
  parent: Microsoft.AspNetCore.WebUtilities.QueryHelpers
  langs:
  - csharp
  - vb
  name: ParseNullableQuery(String)
  nameWithType: QueryHelpers.ParseNullableQuery(String)
  fullName: Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseNullableQuery(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ParseNullableQuery
    path: src/Microsoft.AspNetCore.WebUtilities/QueryHelpers.cs
    startLine: 127
  assemblies:
  - Microsoft.AspNetCore.WebUtilities
  namespace: Microsoft.AspNetCore.WebUtilities
  summary: "\nParse a query string into its component key and value parts.\n"
  example: []
  syntax:
    content: public static Dictionary<string, StringValues> ParseNullableQuery(string queryString)
    content.vb: Public Shared Function ParseNullableQuery(queryString As String) As Dictionary(Of String, StringValues)
    parameters:
    - id: queryString
      type: System.String
      description: The raw query string value, with or without the leading '?'.
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues}
      description: A collection of parsed keys and values, null if there are no entries.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.WebUtilities
  commentId: N:Microsoft.AspNetCore.WebUtilities
  isExternal: false
  name: Microsoft.AspNetCore.WebUtilities
  nameWithType: Microsoft.AspNetCore.WebUtilities
  fullName: Microsoft.AspNetCore.WebUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Microsoft.Extensions.Primitives.StringValues}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, StringValues>
  nameWithType: Dictionary<String, StringValues>
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.Extensions.Primitives.StringValues>
  nameWithType.vb: Dictionary(Of String, StringValues)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.Extensions.Primitives.StringValues)
  name.vb: Dictionary(Of String, StringValues)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Primitives.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Microsoft.Extensions.Primitives.StringValues
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
