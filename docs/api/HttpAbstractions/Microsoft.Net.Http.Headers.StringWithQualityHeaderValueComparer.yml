### YamlMime:ManagedReference
items:
- uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  commentId: T:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  id: StringWithQualityHeaderValueComparer
  parent: Microsoft.Net.Http.Headers
  children:
  - Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  - Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.QualityComparer
  langs:
  - csharp
  - vb
  name: StringWithQualityHeaderValueComparer
  nameWithType: StringWithQualityHeaderValueComparer
  fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  type: Class
  source:
    remote:
      path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: StringWithQualityHeaderValueComparer
    path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
    startLine: 15
  assemblies:
  - Microsoft.Net.Http.Headers
  namespace: Microsoft.Net.Http.Headers
  summary: "\nImplementation of <xref href=\"System.Collections.Generic.IComparer%601\" data-throw-if-not-resolved=\"false\"></xref> that can compare content negotiation header fields\nbased on their quality values (a.k.a q-values). This applies to values used in accept-charset,\naccept-encoding, accept-language and related header fields with similar syntax rules. See\n<xref href=\"Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer\" data-throw-if-not-resolved=\"false\"></xref> for a comparer for media type\nq-values.\n"
  example: []
  syntax:
    content: 'public class StringWithQualityHeaderValueComparer : IComparer<StringWithQualityHeaderValue>'
    content.vb: >-
      Public Class StringWithQualityHeaderValueComparer
          Implements IComparer(Of StringWithQualityHeaderValue)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.QualityComparer
  commentId: P:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.QualityComparer
  id: QualityComparer
  parent: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  langs:
  - csharp
  - vb
  name: QualityComparer
  nameWithType: StringWithQualityHeaderValueComparer.QualityComparer
  fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.QualityComparer
  type: Property
  source:
    remote:
      path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: QualityComparer
    path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
    startLine: 24
  assemblies:
  - Microsoft.Net.Http.Headers
  namespace: Microsoft.Net.Http.Headers
  syntax:
    content: public static StringWithQualityHeaderValueComparer QualityComparer { get; }
    content.vb: Public Shared ReadOnly Property QualityComparer As StringWithQualityHeaderValueComparer
    parameters: []
    return:
      type: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  commentId: M:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  id: Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  parent: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  langs:
  - csharp
  - vb
  name: Compare(StringWithQualityHeaderValue, StringWithQualityHeaderValue)
  nameWithType: StringWithQualityHeaderValueComparer.Compare(StringWithQualityHeaderValue, StringWithQualityHeaderValue)
  fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue, Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  type: Method
  source:
    remote:
      path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Compare
    path: src/Microsoft.Net.Http.Headers/StringWithQualityHeaderValueComparer.cs
    startLine: 40
  assemblies:
  - Microsoft.Net.Http.Headers
  namespace: Microsoft.Net.Http.Headers
  summary: "\nCompares two <xref href=\"Microsoft.Net.Http.Headers.StringWithQualityHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> based on their quality value\n(a.k.a their \"q-value\").\nValues with identical q-values are considered equal (i.e the result is 0) with the exception of wild-card\nvalues (i.e. a value of \"*\") which are considered less than non-wild-card values. This allows to sort\na sequence of <xref href=\"Microsoft.Net.Http.Headers.StringWithQualityHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> following their q-values ending up with any\nwild-cards at the end.\n"
  example: []
  syntax:
    content: public int Compare(StringWithQualityHeaderValue stringWithQuality1, StringWithQualityHeaderValue stringWithQuality2)
    content.vb: Public Function Compare(stringWithQuality1 As StringWithQualityHeaderValue, stringWithQuality2 As StringWithQualityHeaderValue) As Integer
    parameters:
    - id: stringWithQuality1
      type: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
      description: The first value to compare.
    - id: stringWithQuality2
      type: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
      description: The second value to compare
    return:
      type: System.Int32
      description: The result of the comparison.
  implements:
  - System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer
  commentId: T:Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer
  parent: Microsoft.Net.Http.Headers
  isExternal: false
  name: MediaTypeHeaderValueComparer
  nameWithType: MediaTypeHeaderValueComparer
  fullName: Microsoft.Net.Http.Headers.MediaTypeHeaderValueComparer
- uid: Microsoft.Net.Http.Headers
  commentId: N:Microsoft.Net.Http.Headers
  isExternal: false
  name: Microsoft.Net.Http.Headers
  nameWithType: Microsoft.Net.Http.Headers
  fullName: Microsoft.Net.Http.Headers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}
  commentId: T:System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<StringWithQualityHeaderValue>
  nameWithType: IComparer<StringWithQualityHeaderValue>
  fullName: System.Collections.Generic.IComparer<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>
  nameWithType.vb: IComparer(Of StringWithQualityHeaderValue)
  fullname.vb: System.Collections.Generic.IComparer(Of Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  name.vb: IComparer(Of StringWithQualityHeaderValue)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  commentId: T:Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
  parent: Microsoft.Net.Http.Headers
  isExternal: false
  name: StringWithQualityHeaderValueComparer
  nameWithType: StringWithQualityHeaderValueComparer
  fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValueComparer
- uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  commentId: T:Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  parent: Microsoft.Net.Http.Headers
  isExternal: false
  name: StringWithQualityHeaderValue
  nameWithType: StringWithQualityHeaderValue
  fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
- uid: System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  commentId: M:System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue,Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  parent: System.Collections.Generic.IComparer{Microsoft.Net.Http.Headers.StringWithQualityHeaderValue}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(StringWithQualityHeaderValue, StringWithQualityHeaderValue)
  nameWithType: IComparer<StringWithQualityHeaderValue>.Compare(StringWithQualityHeaderValue, StringWithQualityHeaderValue)
  fullName: System.Collections.Generic.IComparer<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>.Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue, Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  nameWithType.vb: IComparer(Of StringWithQualityHeaderValue).Compare(StringWithQualityHeaderValue, StringWithQualityHeaderValue)
  fullname.vb: System.Collections.Generic.IComparer(Of Microsoft.Net.Http.Headers.StringWithQualityHeaderValue).Compare(Microsoft.Net.Http.Headers.StringWithQualityHeaderValue, Microsoft.Net.Http.Headers.StringWithQualityHeaderValue)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<StringWithQualityHeaderValue>.Compare
    fullName: System.Collections.Generic.IComparer<Microsoft.Net.Http.Headers.StringWithQualityHeaderValue>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of StringWithQualityHeaderValue).Compare
    fullName: System.Collections.Generic.IComparer(Of Microsoft.Net.Http.Headers.StringWithQualityHeaderValue).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
    name: StringWithQualityHeaderValue
    nameWithType: StringWithQualityHeaderValue
    fullName: Microsoft.Net.Http.Headers.StringWithQualityHeaderValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
