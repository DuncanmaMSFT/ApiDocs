### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.WebSocketManager
  commentId: T:Microsoft.AspNetCore.Http.WebSocketManager
  id: WebSocketManager
  parent: Microsoft.AspNetCore.Http
  children:
  - Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync
  - Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)
  - Microsoft.AspNetCore.Http.WebSocketManager.IsWebSocketRequest
  - Microsoft.AspNetCore.Http.WebSocketManager.WebSocketRequestedProtocols
  langs:
  - csharp
  - vb
  name: WebSocketManager
  nameWithType: WebSocketManager
  fullName: Microsoft.AspNetCore.Http.WebSocketManager
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: WebSocketManager
    path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nManages the establishment of WebSocket connections for a specific HTTP request. \n"
  example: []
  syntax:
    content: public abstract class WebSocketManager
    content.vb: Public MustInherit Class WebSocketManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Http.WebSocketManager.IsWebSocketRequest
  commentId: P:Microsoft.AspNetCore.Http.WebSocketManager.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: Microsoft.AspNetCore.Http.WebSocketManager
  langs:
  - csharp
  - vb
  name: IsWebSocketRequest
  nameWithType: WebSocketManager.IsWebSocketRequest
  fullName: Microsoft.AspNetCore.Http.WebSocketManager.IsWebSocketRequest
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: IsWebSocketRequest
    path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets a value indicating whether the request is a WebSocket establishment request.\n"
  example: []
  syntax:
    content: public abstract bool IsWebSocketRequest { get; }
    content.vb: Public MustOverride ReadOnly Property IsWebSocketRequest As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.WebSocketManager.WebSocketRequestedProtocols
  commentId: P:Microsoft.AspNetCore.Http.WebSocketManager.WebSocketRequestedProtocols
  id: WebSocketRequestedProtocols
  parent: Microsoft.AspNetCore.Http.WebSocketManager
  langs:
  - csharp
  - vb
  name: WebSocketRequestedProtocols
  nameWithType: WebSocketManager.WebSocketRequestedProtocols
  fullName: Microsoft.AspNetCore.Http.WebSocketManager.WebSocketRequestedProtocols
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: WebSocketRequestedProtocols
    path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nGets the list of requested WebSocket sub-protocols.\n"
  example: []
  syntax:
    content: public abstract IList<string> WebSocketRequestedProtocols { get; }
    content.vb: Public MustOverride ReadOnly Property WebSocketRequestedProtocols As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync
  commentId: M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync
  id: AcceptWebSocketAsync
  parent: Microsoft.AspNetCore.Http.WebSocketManager
  langs:
  - csharp
  - vb
  name: AcceptWebSocketAsync()
  nameWithType: WebSocketManager.AcceptWebSocketAsync()
  fullName: Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: AcceptWebSocketAsync
    path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nTransitions the request to a WebSocket connection.\n"
  example: []
  syntax:
    content: public virtual Task<WebSocket> AcceptWebSocketAsync()
    content.vb: Public Overridable Function AcceptWebSocketAsync As Task(Of WebSocket)
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocket}
      description: A task representing the completion of the transition.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: Microsoft.AspNetCore.Http.WebSocketManager
  langs:
  - csharp
  - vb
  name: AcceptWebSocketAsync(String)
  nameWithType: WebSocketManager.AcceptWebSocketAsync(String)
  fullName: Microsoft.AspNetCore.Http.WebSocketManager.AcceptWebSocketAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: AcceptWebSocketAsync
    path: src/Microsoft.AspNetCore.Http.Abstractions/WebSocketManager.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Http.Abstractions
  namespace: Microsoft.AspNetCore.Http
  summary: "\nTransitions the request to a WebSocket connection using the specified sub-protocol.\n"
  example: []
  syntax:
    content: public abstract Task<WebSocket> AcceptWebSocketAsync(string subProtocol)
    content.vb: Public MustOverride Function AcceptWebSocketAsync(subProtocol As String) As Task(Of WebSocket)
    parameters:
    - id: subProtocol
      type: System.String
      description: The sub-protocol to use.
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocket}
      description: A task representing the completion of the transition.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocket}
  commentId: T:System.Threading.Tasks.Task{System.Net.WebSockets.WebSocket}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WebSocket>
  nameWithType: Task<WebSocket>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket>
  nameWithType.vb: Task(Of WebSocket)
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.WebSockets.WebSocket)
  name.vb: Task(Of WebSocket)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocket
    name: WebSocket
    nameWithType: WebSocket
    fullName: System.Net.WebSockets.WebSocket
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocket
    name: WebSocket
    nameWithType: WebSocket
    fullName: System.Net.WebSockets.WebSocket
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
