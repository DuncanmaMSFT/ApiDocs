### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  commentId: T:Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  id: ItemsDictionary
  parent: Microsoft.AspNetCore.Http.Internal
  children:
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.Items
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Clear
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Count
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#IsReadOnly
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Add(System.Object,System.Object)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#ContainsKey(System.Object)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Item(System.Object)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Keys
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Remove(System.Object)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#TryGetValue(System.Object,System.Object@)
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Values
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#GetEnumerator
  - Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ItemsDictionary
  nameWithType: ItemsDictionary
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: ItemsDictionary
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 8
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: 'public class ItemsDictionary : IDictionary<object, object>, ICollection<KeyValuePair<object, object>>, IEnumerable<KeyValuePair<object, object>>, IEnumerable'
    content.vb: >-
      Public Class ItemsDictionary
          Implements IDictionary(Of Object, Object), ICollection(Of KeyValuePair(Of Object, Object)), IEnumerable(Of KeyValuePair(Of Object, Object)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ItemsDictionary()
  nameWithType: ItemsDictionary.ItemsDictionary()
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.ItemsDictionary()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: public ItemsDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})
  id: '#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})'
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ItemsDictionary(IDictionary<Object, Object>)
  nameWithType: ItemsDictionary.ItemsDictionary(IDictionary<Object, Object>)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.ItemsDictionary(System.Collections.Generic.IDictionary<System.Object, System.Object>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: public ItemsDictionary(IDictionary<object, object> items)
    content.vb: Public Sub New(items As IDictionary(Of Object, Object))
    parameters:
    - id: items
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
  nameWithType.vb: ItemsDictionary.ItemsDictionary(IDictionary(Of Object, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.ItemsDictionary(System.Collections.Generic.IDictionary(Of System.Object, System.Object))
  name.vb: ItemsDictionary(IDictionary(Of Object, Object))
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.Items
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.Items
  id: Items
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: ItemsDictionary.Items
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.Items
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: Items
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: public IDictionary<object, object> Items { get; }
    content.vb: Public ReadOnly Property Items As IDictionary(Of Object, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.Object,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Item(System.Object)
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Item(System.Object)
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#Item(System.Object)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.Item[Object]
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.Item[Object]
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.this[]
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: object IDictionary<object, object>.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.Object,System.Object>.Item(key As Object) As Object Implements IDictionary(Of Object, Object).this
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.Item(System.Object)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Item(Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Item(System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.Item(Object)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Add(System.Object,System.Object)
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Add(System.Object,System.Object)
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#Add(System.Object,System.Object)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.Add(Object, Object)
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.Add(Object, Object)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.Add
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: void IDictionary<object, object>.Add(object key, object value)
    content.vb: Sub System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(key As Object, value As Object) Implements IDictionary(Of Object, Object).Add
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.Add(System.Object,System.Object)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(Object, Object)
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(System.Object, System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.Add(Object, Object)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#ContainsKey(System.Object)
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#ContainsKey(System.Object)
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#ContainsKey(System.Object)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.ContainsKey(Object)
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.ContainsKey(Object)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.ContainsKey(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 42
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool IDictionary<object, object>.ContainsKey(object key)
    content.vb: Function System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(key As Object) As Boolean Implements IDictionary(Of Object, Object).ContainsKey
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.ContainsKey(System.Object)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(Object)
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.ContainsKey(Object)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Keys
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Keys
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#Keys
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.Keys
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.Keys
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.Keys
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 47
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: ICollection<object> IDictionary<object, object>.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys As ICollection(Of Object) Implements IDictionary(Of Object, Object).Keys
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.Keys
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.Keys
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Remove(System.Object)
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Remove(System.Object)
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#Remove(System.Object)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.Remove(Object)
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.Remove(Object)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool IDictionary<object, object>.Remove(object key)
    content.vb: Function System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(key As Object) As Boolean Implements IDictionary(Of Object, Object).Remove
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.Remove(System.Object)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(Object)
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.Remove(Object)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#TryGetValue(System.Object,System.Object@)
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#TryGetValue(System.Object,System.Object@)
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#TryGetValue(System.Object,System.Object@)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.TryGetValue(Object, out Object)
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.TryGetValue(Object, out Object)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.TryGetValue(System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool IDictionary<object, object>.TryGetValue(object key, out object value)
    content.vb: Function System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(key As Object, ByRef value As Object) As Boolean Implements IDictionary(Of Object, Object).TryGetValue
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.TryGetValue(System.Object,System.Object@)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(Object, ByRef Object)
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(System.Object, ByRef System.Object)
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.TryGetValue(Object, ByRef Object)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Values
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IDictionary{System#Object,System#Object}#Values
  id: System#Collections#Generic#IDictionary{System#Object,System#Object}#Values
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IDictionary<Object, Object>.Values
  nameWithType: ItemsDictionary.IDictionary<Object, Object>.Values
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object, System.Object>.Values
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IDictionary<System.Object,System.Object>.Values
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: ICollection<object> IDictionary<object, object>.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IDictionary<System.Object,System.Object>.Values As ICollection(Of Object) Implements IDictionary(Of Object, Object).Values
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
  implements:
  - System.Collections.Generic.IDictionary{System.Object,System.Object}.Values
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IDictionary<System.Object,System.Object>.Values
  name.vb: System.Collections.Generic.IDictionary<System.Object,System.Object>.Values
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.Add(KeyValuePair<Object, Object>)
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.Add(KeyValuePair<Object, Object>)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: void ICollection<KeyValuePair<object, object>>.Add(KeyValuePair<object, object> item)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(item As KeyValuePair(Of Object, Object)) Implements ICollection(Of KeyValuePair(Of Object, Object)).Add
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Object,System.Object}
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair(Of Object, Object))
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Add(KeyValuePair(Of Object, Object))
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Clear
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Clear
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Clear
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.Clear()
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.Clear()
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 72
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: void ICollection<KeyValuePair<object, object>>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear Implements ICollection(Of KeyValuePair(Of Object, Object)).Clear
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Clear
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear()
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear()
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Clear()
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.Contains(KeyValuePair<Object, Object>)
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.Contains(KeyValuePair<Object, Object>)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 77
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool ICollection<KeyValuePair<object, object>>.Contains(KeyValuePair<object, object> item)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(item As KeyValuePair(Of Object, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of Object, Object)).Contains
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Object,System.Object}
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair(Of Object, Object))
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Contains(KeyValuePair(Of Object, Object))
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.CopyTo(KeyValuePair<Object, Object>[], Int32)
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.CopyTo(KeyValuePair<Object, Object>[], Int32)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.Object, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 82
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: void ICollection<KeyValuePair<object, object>>.CopyTo(KeyValuePair<object, object>[] array, int arrayIndex)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(array As KeyValuePair(Of Object, Object)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of Object, Object)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.Object,System.Object}[]
    - id: arrayIndex
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair(Of Object, Object)(), Int32)
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.CopyTo(KeyValuePair(Of Object, Object)(), Int32)
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Count
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Count
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Count
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.Count
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.Count
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 87
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: int ICollection<KeyValuePair<object, object>>.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count As Integer Implements ICollection(Of KeyValuePair(Of Object, Object)).Count
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Count
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Count
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#IsReadOnly
  commentId: P:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#IsReadOnly
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.IsReadOnly
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.IsReadOnly
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool ICollection<KeyValuePair<object, object>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of Object, Object)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.IsReadOnly
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.IsReadOnly
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<Object, Object>>.Remove(KeyValuePair<Object, Object>)
  nameWithType: ItemsDictionary.ICollection<KeyValuePair<Object, Object>>.Remove(KeyValuePair<Object, Object>)
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: bool ICollection<KeyValuePair<object, object>>.Remove(KeyValuePair<object, object> item)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(item As KeyValuePair(Of Object, Object)) As Boolean Implements ICollection(Of KeyValuePair(Of Object, Object)).Remove
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.Object,System.Object}
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair(Of Object, Object))
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.Remove(KeyValuePair(Of Object, Object))
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#GetEnumerator
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#Object,System#Object}}#GetEnumerator
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<Object, Object>>.GetEnumerator()
  nameWithType: ItemsDictionary.IEnumerable<KeyValuePair<Object, Object>>.GetEnumerator()
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: IEnumerator<KeyValuePair<object, object>> IEnumerable<KeyValuePair<object, object>>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of Object, Object)) Implements IEnumerable(Of KeyValuePair(Of Object, Object)).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.GetEnumerator
  nameWithType.vb: ItemsDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator()
  fullName.vb: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object,System.Object>>.GetEnumerator()
- uid: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.AspNetCore.Http.Internal.ItemsDictionary
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ItemsDictionary.IEnumerable.GetEnumerator()
  fullName: Microsoft.AspNetCore.Http.Internal.ItemsDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
      branch: master
      repo: https://github.com/aspnet/HttpAbstractions.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.AspNetCore.Http/Internal/ItemsDictionary.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Http
  namespace: Microsoft.AspNetCore.Http.Internal
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ItemsDictionary.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.AspNetCore.Http.Internal
  commentId: N:Microsoft.AspNetCore.Http.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Http.Internal
  nameWithType: Microsoft.AspNetCore.Http.Internal
  fullName: Microsoft.AspNetCore.Http.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<Object, Object>
  nameWithType: IDictionary<Object, Object>
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>
  nameWithType.vb: IDictionary(Of Object, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object)
  name.vb: IDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<Object, Object>>
  nameWithType: ICollection<KeyValuePair<Object, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<Object, Object>>
  nameWithType: IEnumerable<KeyValuePair<Object, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.Item(System.Object)
  commentId: P:System.Collections.Generic.IDictionary{System.Object,System.Object}.Item(System.Object)
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[Object]
  nameWithType: IDictionary<Object, Object>.Item[Object]
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Item[System.Object]
  nameWithType.vb: IDictionary(Of Object, Object).Item(Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<Object, Object>.Item
    fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of Object, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.Add(System.Object,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.Object,System.Object}.Add(System.Object,System.Object)
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(Object, Object)
  nameWithType: IDictionary<Object, Object>.Add(Object, Object)
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Add(System.Object, System.Object)
  nameWithType.vb: IDictionary(Of Object, Object).Add(Object, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<Object, Object>.Add
    fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of Object, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.ContainsKey(System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.Object,System.Object}.ContainsKey(System.Object)
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(Object)
  nameWithType: IDictionary<Object, Object>.ContainsKey(Object)
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.ContainsKey(System.Object)
  nameWithType.vb: IDictionary(Of Object, Object).ContainsKey(Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).ContainsKey(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<Object, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of Object, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.Object, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.Object,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<Object, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Keys
  nameWithType.vb: IDictionary(Of Object, Object).Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Keys
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.Remove(System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.Object,System.Object}.Remove(System.Object)
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(Object)
  nameWithType: IDictionary<Object, Object>.Remove(Object)
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Remove(System.Object)
  nameWithType.vb: IDictionary(Of Object, Object).Remove(Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<Object, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of Object, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.TryGetValue(System.Object,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{System.Object,System.Object}.TryGetValue(System.Object,System.Object@)
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(Object, Object)
  nameWithType: IDictionary<Object, Object>.TryGetValue(Object, Object)
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.TryGetValue(System.Object, System.Object)
  nameWithType.vb: IDictionary(Of Object, Object).TryGetValue(Object, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).TryGetValue(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<Object, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of Object, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.Object, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.Object,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.Object,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{System.Object,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<Object, Object>.Values
  fullName: System.Collections.Generic.IDictionary<System.Object, System.Object>.Values
  nameWithType.vb: IDictionary(Of Object, Object).Values
  fullname.vb: System.Collections.Generic.IDictionary(Of System.Object, System.Object).Values
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<Object, Object>)
  nameWithType: ICollection<KeyValuePair<Object, Object>>.Add(KeyValuePair<Object, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).Add(KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: Add(KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<Object, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of Object, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.Object,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<Object, Object>
  nameWithType: KeyValuePair<Object, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.Object, System.Object>
  nameWithType.vb: KeyValuePair(Of Object, Object)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)
  name.vb: KeyValuePair(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<Object, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<Object, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of Object, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<Object, Object>)
  nameWithType: ICollection<KeyValuePair<Object, Object>>.Contains(KeyValuePair<Object, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).Contains(KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: Contains(KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<Object, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of Object, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.Object,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<Object, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<Object, Object>>.CopyTo(KeyValuePair<Object, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.Object, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).CopyTo(KeyValuePair(Of Object, Object)(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of Object, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<Object, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of Object, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.Object,System.Object}[]
  name: KeyValuePair<Object, Object>[]
  nameWithType: KeyValuePair<Object, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<System.Object, System.Object>[]
  nameWithType.vb: KeyValuePair(Of Object, Object)()
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)()
  name.vb: KeyValuePair(Of Object, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<Object, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<Object, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.Object,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<Object, Object>)
  nameWithType: ICollection<KeyValuePair<Object, Object>>.Remove(KeyValuePair<Object, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.Object, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of Object, Object)).Remove(KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: Remove(KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<Object, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of Object, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<Object, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Object, Object)).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<Object, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of Object, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Object,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<Object, Object>>
  nameWithType: IEnumerator<KeyValuePair<Object, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Object, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of Object, Object))
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.Object, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of Object, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
