### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  id: ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.AdditionalValues
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderModelName
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BindingSource
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ContainerType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ConvertEmptyStringToNull
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DataTypeName
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DefaultOrder
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Description
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayFormatString
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayName
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementMetadata
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumGroupedDisplayNamesAndValues
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumNamesAndValues
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(System.Object)
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetHashCode
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HasNonDefaultEditFormat
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HideSurroundingHtml
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HtmlEncode
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Identity
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingAllowed
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingRequired
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsCollectionType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsComplexType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsFlagsEnum
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReadOnly
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReferenceOrNullableType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsRequired
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.MetadataKind
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelBindingMessageProvider
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.NullDisplayText
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Placeholder
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyFilterProvider
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyGetter
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyName
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertySetter
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForDisplay
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForEdit
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.SimpleDisplayProperty
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.TemplateHint
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidateChildren
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidatorMetadata
  langs:
  - csharp
  - vb
  name: ModelMetadata
  nameWithType: ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelMetadata
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nA metadata representation of a model type, property or parameter.\n"
  example: []
  syntax:
    content: 'public abstract class ModelMetadata : IEquatable<ModelMetadata>'
    content.vb: >-
      Public MustInherit Class ModelMetadata
          Implements IEquatable(Of ModelMetadata)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DefaultOrder
  commentId: F:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DefaultOrder
  id: DefaultOrder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: DefaultOrder
  nameWithType: ModelMetadata.DefaultOrder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DefaultOrder
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DefaultOrder
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nThe default value of <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static readonly int DefaultOrder
    content.vb: Public Shared ReadOnly DefaultOrder As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ModelMetadata(ModelMetadataIdentity)
  nameWithType: ModelMetadata.ModelMetadata(ModelMetadataIdentity)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ModelMetadata(ModelMetadataIdentity identity)
    content.vb: Protected Sub New(identity As ModelMetadataIdentity)
    parameters:
    - id: identity
      type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ContainerType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ContainerType
  id: ContainerType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ContainerType
  nameWithType: ModelMetadata.ContainerType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ContainerType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ContainerType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the container type of this metadata if it represents a property, otherwise <code>null</code>.\n"
  example: []
  syntax:
    content: public Type ContainerType { get; }
    content.vb: Public ReadOnly Property ContainerType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.MetadataKind
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.MetadataKind
  id: MetadataKind
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: MetadataKind
  nameWithType: ModelMetadata.MetadataKind
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.MetadataKind
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MetadataKind
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 44
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating the kind of metadata element represented by the current instance.\n"
  example: []
  syntax:
    content: public ModelMetadataKind MetadataKind { get; }
    content.vb: Public ReadOnly Property MetadataKind As ModelMetadataKind
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  id: ModelType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ModelType
  nameWithType: ModelMetadata.ModelType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the model type represented by the current instance.\n"
  example: []
  syntax:
    content: public Type ModelType { get; }
    content.vb: Public ReadOnly Property ModelType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyName
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyName
  id: PropertyName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: PropertyName
  nameWithType: ModelMetadata.PropertyName
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: PropertyName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the property name represented by the current instance.\n"
  example: []
  syntax:
    content: public string PropertyName { get; }
    content.vb: Public ReadOnly Property PropertyName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Identity
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Identity
  id: Identity
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: ModelMetadata.Identity
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Identity
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Identity
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 65
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the key for the current instance.\n"
  example: []
  syntax:
    content: protected ModelMetadataIdentity Identity { get; }
    content.vb: Protected ReadOnly Property Identity As ModelMetadataIdentity
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.AdditionalValues
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.AdditionalValues
  id: AdditionalValues
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: AdditionalValues
  nameWithType: ModelMetadata.AdditionalValues
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.AdditionalValues
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AdditionalValues
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a collection of additional information about the model.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyDictionary<object, object> AdditionalValues { get; }
    content.vb: Public MustOverride ReadOnly Property AdditionalValues As IReadOnlyDictionary(Of Object, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Object,System.Object}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  id: Properties
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ModelMetadata.Properties
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Properties
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 75
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the collection of <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref> instances for the model's properties.\n"
  example: []
  syntax:
    content: public abstract ModelPropertyCollection Properties { get; }
    content.vb: Public MustOverride ReadOnly Property Properties As ModelPropertyCollection
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderModelName
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderModelName
  id: BinderModelName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: BinderModelName
  nameWithType: ModelMetadata.BinderModelName
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderModelName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BinderModelName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 80
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the name of a model if specified explicitly using <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract string BinderModelName { get; }
    content.vb: Public MustOverride ReadOnly Property BinderModelName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderType
  id: BinderType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: BinderType
  nameWithType: ModelMetadata.BinderType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BinderType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BinderType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 86
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of an <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder\" data-throw-if-not-resolved=\"false\"></xref> of a model if specified explicitly using\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract Type BinderType { get; }
    content.vb: Public MustOverride ReadOnly Property BinderType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BindingSource
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BindingSource
  id: BindingSource
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: BindingSource
  nameWithType: ModelMetadata.BindingSource
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.BindingSource
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindingSource
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a binder metadata for this model.\n"
  example: []
  syntax:
    content: public abstract BindingSource BindingSource { get; }
    content.vb: Public MustOverride ReadOnly Property BindingSource As BindingSource
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ConvertEmptyStringToNull
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ConvertEmptyStringToNull
  id: ConvertEmptyStringToNull
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ConvertEmptyStringToNull
  nameWithType: ModelMetadata.ConvertEmptyStringToNull
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ConvertEmptyStringToNull
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ConvertEmptyStringToNull
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not to convert an empty string value to <code>null</code> when\nrepresenting a model as text.\n"
  example: []
  syntax:
    content: public abstract bool ConvertEmptyStringToNull { get; }
    content.vb: Public MustOverride ReadOnly Property ConvertEmptyStringToNull As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DataTypeName
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DataTypeName
  id: DataTypeName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: DataTypeName
  nameWithType: ModelMetadata.DataTypeName
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DataTypeName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DataTypeName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 104
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the name of the model's datatype.  Overrides <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> in some\ndisplay scenarios.\n"
  example: []
  syntax:
    content: public abstract string DataTypeName { get; }
    content.vb: Public MustOverride ReadOnly Property DataTypeName As String
    parameters: []
    return:
      type: System.String
      description: <code>null</code> unless set manually or through additional metadata e.g. attributes.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Description
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Description
  id: Description
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ModelMetadata.Description
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Description
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Description
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 109
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the description of the model.\n"
  example: []
  syntax:
    content: public abstract string Description { get; }
    content.vb: Public MustOverride ReadOnly Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayFormatString
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayFormatString
  id: DisplayFormatString
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: DisplayFormatString
  nameWithType: ModelMetadata.DisplayFormatString
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayFormatString
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DisplayFormatString
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 115
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the composite format <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> (see\nhttp://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to display the model.\n"
  example: []
  syntax:
    content: public abstract string DisplayFormatString { get; }
    content.vb: Public MustOverride ReadOnly Property DisplayFormatString As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayName
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayName
  id: DisplayName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: ModelMetadata.DisplayName
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.DisplayName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DisplayName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 120
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the display name of the model.\n"
  example: []
  syntax:
    content: public abstract string DisplayName { get; }
    content.vb: Public MustOverride ReadOnly Property DisplayName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  id: EditFormatString
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: EditFormatString
  nameWithType: ModelMetadata.EditFormatString
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: EditFormatString
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 126
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the composite format <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> (see\nhttp://msdn.microsoft.com/en-us/library/txafckwd.aspx) used to edit the model.\n"
  example: []
  syntax:
    content: public abstract string EditFormatString { get; }
    content.vb: Public MustOverride ReadOnly Property EditFormatString As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementMetadata
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementMetadata
  id: ElementMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ElementMetadata
  nameWithType: ModelMetadata.ElementMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementMetadata
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ElementMetadata
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 138
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref> for elements of <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> if that <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>\nimplements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract ModelMetadata ElementMetadata { get; }
    content.vb: Public MustOverride ReadOnly Property ElementMetadata As ModelMetadata
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
      description: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref> for <code>T</code> if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> implements\n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref> for <code>object</code> if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref>\nimplements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> but not <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref>. <code>null</code> otherwise i.e. when\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType\" data-throw-if-not-resolved=\"false\"></xref> is <code>false</code>.\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumGroupedDisplayNamesAndValues
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumGroupedDisplayNamesAndValues
  id: EnumGroupedDisplayNamesAndValues
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: EnumGroupedDisplayNamesAndValues
  nameWithType: ModelMetadata.EnumGroupedDisplayNamesAndValues
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumGroupedDisplayNamesAndValues
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: EnumGroupedDisplayNamesAndValues
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 148
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the ordered and grouped display names and values of all <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> values in\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<KeyValuePair<EnumGroupAndName, string>> EnumGroupedDisplayNamesAndValues { get; }
    content.vb: Public MustOverride ReadOnly Property EnumGroupedDisplayNamesAndValues As IEnumerable(Of KeyValuePair(Of EnumGroupAndName, String))
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String}}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Collections.Generic.KeyValuePair%602\" data-throw-if-not-resolved=\"false\"></xref> of mappings between\n<xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> field groups, names and values. <code>null</code> if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum\" data-throw-if-not-resolved=\"false\"></xref> is <code>false</code>.\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumNamesAndValues
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumNamesAndValues
  id: EnumNamesAndValues
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: EnumNamesAndValues
  nameWithType: ModelMetadata.EnumNamesAndValues
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EnumNamesAndValues
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: EnumNamesAndValues
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 157
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the names and values of all <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> values in <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyDictionary<string, string> EnumNamesAndValues { get; }
    content.vb: Public MustOverride ReadOnly Property EnumNamesAndValues As IReadOnlyDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
      description: "\nAn <xref href=\"System.Collections.Generic.IReadOnlyDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> of mappings between <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> field names\nand values. <code>null</code> if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum\" data-throw-if-not-resolved=\"false\"></xref> is <code>false</code>.\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HasNonDefaultEditFormat
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HasNonDefaultEditFormat
  id: HasNonDefaultEditFormat
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: HasNonDefaultEditFormat
  nameWithType: ModelMetadata.HasNonDefaultEditFormat
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HasNonDefaultEditFormat
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: HasNonDefaultEditFormat
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 163
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString\" data-throw-if-not-resolved=\"false\"></xref> has a non-<code>null</code>, non-empty\nvalue different from the default for the datatype.\n"
  example: []
  syntax:
    content: public abstract bool HasNonDefaultEditFormat { get; }
    content.vb: Public MustOverride ReadOnly Property HasNonDefaultEditFormat As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HtmlEncode
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HtmlEncode
  id: HtmlEncode
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: HtmlEncode
  nameWithType: ModelMetadata.HtmlEncode
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HtmlEncode
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: HtmlEncode
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 169
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether the value should be HTML-encoded.\n"
  example: []
  syntax:
    content: public abstract bool HtmlEncode { get; }
    content.vb: Public MustOverride ReadOnly Property HtmlEncode As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: If <code>true</code>, value should be HTML-encoded. Default is <code>true</code>.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HideSurroundingHtml
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HideSurroundingHtml
  id: HideSurroundingHtml
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: HideSurroundingHtml
  nameWithType: ModelMetadata.HideSurroundingHtml
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.HideSurroundingHtml
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: HideSurroundingHtml
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 182
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether the \"HiddenInput\" display template should return\n<code>string.Empty</code> (not the expression value) and whether the \"HiddenInput\" editor template should not\nalso return the expression value (together with the hidden &lt;input&gt; element).\n"
  remarks: "\nIf <code>true</code>, also causes the default <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> display and editor templates to return HTML\nlacking the usual per-property &lt;div&gt; wrapper around the associated property. Thus the default\n<xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> display template effectively skips the property and the default <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>\neditor template returns only the hidden &lt;input&gt; element for the property.\n"
  example: []
  syntax:
    content: public abstract bool HideSurroundingHtml { get; }
    content.vb: Public MustOverride ReadOnly Property HideSurroundingHtml As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingAllowed
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingAllowed
  id: IsBindingAllowed
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsBindingAllowed
  nameWithType: ModelMetadata.IsBindingAllowed
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingAllowed
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsBindingAllowed
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 192
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not the model value can be bound by model binding. This is only\napplicable when the current instance represents a property.\n"
  remarks: "\nIf <code>true</code> then the model value is considered supported by model binding and can be set\nbased on provided input in the request.\n"
  example: []
  syntax:
    content: public abstract bool IsBindingAllowed { get; }
    content.vb: Public MustOverride ReadOnly Property IsBindingAllowed As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingRequired
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingRequired
  id: IsBindingRequired
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsBindingRequired
  nameWithType: ModelMetadata.IsBindingRequired
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsBindingRequired
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsBindingRequired
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 202
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not the model value is required by model binding. This is only\napplicable when the current instance represents a property.\n"
  remarks: "\nIf <code>true</code> then the model value is considered required by model binding and must have a value\nsupplied in the request to be considered valid.\n"
  example: []
  syntax:
    content: public abstract bool IsBindingRequired { get; }
    content.vb: Public MustOverride ReadOnly Property IsBindingRequired As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  id: IsEnum
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsEnum
  nameWithType: ModelMetadata.IsEnum
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsEnum
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 211
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref> is for an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract bool IsEnum { get; }
    content.vb: Public MustOverride ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if <code>type.IsEnum</code> (<code>type.GetTypeInfo().IsEnum</code> for DNX Core 5.0) is <code>true</code> for\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref>; <code>false</code> otherwise.\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsFlagsEnum
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsFlagsEnum
  id: IsFlagsEnum
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsFlagsEnum
  nameWithType: ModelMetadata.IsFlagsEnum
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsFlagsEnum
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsFlagsEnum
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 221
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref> is for an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> with an\nassociated <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract bool IsFlagsEnum { get; }
    content.vb: Public MustOverride ReadOnly Property IsFlagsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum\" data-throw-if-not-resolved=\"false\"></xref> is <code>true</code> and <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType\" data-throw-if-not-resolved=\"false\"></xref> has an\nassociated <xref href=\"System.FlagsAttribute\" data-throw-if-not-resolved=\"false\"></xref>; <code>false</code> otherwise.\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReadOnly
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ModelMetadata.IsReadOnly
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsReadOnly
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 227
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not the model value is read-only. This is only applicable when\nthe current instance represents a property.\n"
  example: []
  syntax:
    content: public abstract bool IsReadOnly { get; }
    content.vb: Public MustOverride ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsRequired
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsRequired
  id: IsRequired
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsRequired
  nameWithType: ModelMetadata.IsRequired
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsRequired
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsRequired
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 242
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not the model value is required. This is only applicable when\nthe current instance represents a property.\n"
  remarks: "\n<p>\nIf <code>true</code> then the model value is considered required by validators.\n</p>\n<p>\nBy default an implicit <code>System.ComponentModel.DataAnnotations.RequiredAttribute</code> will be added\nif not present when <code>true.</code>.\n</p>\n"
  example: []
  syntax:
    content: public abstract bool IsRequired { get; }
    content.vb: Public MustOverride ReadOnly Property IsRequired As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelBindingMessageProvider
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelBindingMessageProvider
  id: ModelBindingMessageProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ModelBindingMessageProvider
  nameWithType: ModelMetadata.ModelBindingMessageProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelBindingMessageProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelBindingMessageProvider
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 247
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public abstract IModelBindingMessageProvider ModelBindingMessageProvider { get; }
    content.vb: Public MustOverride ReadOnly Property ModelBindingMessageProvider As IModelBindingMessageProvider
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  id: Order
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Order
  nameWithType: ModelMetadata.Order
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Order
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 258
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating where the current metadata should be ordered relative to other properties\nin its containing type.\n"
  remarks: "\n<p>For example this property is used to order items in <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The default order is <code>10000</code>.</p>\n"
  example: []
  syntax:
    content: public abstract int Order { get; }
    content.vb: Public MustOverride ReadOnly Property Order As Integer
    parameters: []
    return:
      type: System.Int32
      description: The order value of the current metadata.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Placeholder
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Placeholder
  id: Placeholder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Placeholder
  nameWithType: ModelMetadata.Placeholder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Placeholder
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Placeholder
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 263
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the text to display as a placeholder value for an editor.\n"
  example: []
  syntax:
    content: public abstract string Placeholder { get; }
    content.vb: Public MustOverride ReadOnly Property Placeholder As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.NullDisplayText
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.NullDisplayText
  id: NullDisplayText
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: NullDisplayText
  nameWithType: ModelMetadata.NullDisplayText
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.NullDisplayText
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: NullDisplayText
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 268
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the text to display when the model is <code>null</code>.\n"
  example: []
  syntax:
    content: public abstract string NullDisplayText { get; }
    content.vb: Public MustOverride ReadOnly Property NullDisplayText As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyFilterProvider
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyFilterProvider
  id: PropertyFilterProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: PropertyFilterProvider
  nameWithType: ModelMetadata.PropertyFilterProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyFilterProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: PropertyFilterProvider
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 274
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider\" data-throw-if-not-resolved=\"false\"></xref>, which can determine which properties\nshould be model bound.\n"
  example: []
  syntax:
    content: public abstract IPropertyFilterProvider PropertyFilterProvider { get; }
    content.vb: Public MustOverride ReadOnly Property PropertyFilterProvider As IPropertyFilterProvider
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForDisplay
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForDisplay
  id: ShowForDisplay
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ShowForDisplay
  nameWithType: ModelMetadata.ShowForDisplay
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForDisplay
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ShowForDisplay
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 279
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value that indicates whether the property should be displayed in read-only views.\n"
  example: []
  syntax:
    content: public abstract bool ShowForDisplay { get; }
    content.vb: Public MustOverride ReadOnly Property ShowForDisplay As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForEdit
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForEdit
  id: ShowForEdit
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ShowForEdit
  nameWithType: ModelMetadata.ShowForEdit
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ShowForEdit
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ShowForEdit
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 284
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value that indicates whether the property should be displayed in editable views.\n"
  example: []
  syntax:
    content: public abstract bool ShowForEdit { get; }
    content.vb: Public MustOverride ReadOnly Property ShowForEdit As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.SimpleDisplayProperty
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.SimpleDisplayProperty
  id: SimpleDisplayProperty
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: SimpleDisplayProperty
  nameWithType: ModelMetadata.SimpleDisplayProperty
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.SimpleDisplayProperty
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SimpleDisplayProperty
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 289
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets  a value which is the name of the property used to display the model.\n"
  example: []
  syntax:
    content: public abstract string SimpleDisplayProperty { get; }
    content.vb: Public MustOverride ReadOnly Property SimpleDisplayProperty As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.TemplateHint
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.TemplateHint
  id: TemplateHint
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: TemplateHint
  nameWithType: ModelMetadata.TemplateHint
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.TemplateHint
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: TemplateHint
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 294
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a string used by the templating system to discover display-templates and editor-templates.\n"
  example: []
  syntax:
    content: public abstract string TemplateHint { get; }
    content.vb: Public MustOverride ReadOnly Property TemplateHint As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidateChildren
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidateChildren
  id: ValidateChildren
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ValidateChildren
  nameWithType: ModelMetadata.ValidateChildren
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidateChildren
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValidateChildren
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 299
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value that indicates whether properties or elements of the model should be validated.\n"
  example: []
  syntax:
    content: public abstract bool ValidateChildren { get; }
    content.vb: Public MustOverride ReadOnly Property ValidateChildren As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidatorMetadata
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidatorMetadata
  id: ValidatorMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ValidatorMetadata
  nameWithType: ModelMetadata.ValidatorMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ValidatorMetadata
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValidatorMetadata
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 304
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a collection of metadata items for validators.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyList<object> ValidatorMetadata { get; }
    content.vb: Public MustOverride ReadOnly Property ValidatorMetadata As IReadOnlyList(Of Object)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Object}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementType
  id: ElementType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: ModelMetadata.ElementType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ElementType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ElementType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 310
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> for elements of <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> if that <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>\nimplements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Type ElementType { get; }
    content.vb: Public ReadOnly Property ElementType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsComplexType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsComplexType
  id: IsComplexType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsComplexType
  nameWithType: ModelMetadata.IsComplexType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsComplexType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsComplexType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 319
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> is a simple type.\n"
  remarks: "\nA simple type is defined as a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> which has a\n<xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> that can convert from <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsComplexType { get; }
    content.vb: Public ReadOnly Property IsComplexType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  id: IsNullableValueType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsNullableValueType
  nameWithType: ModelMetadata.IsNullableValueType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsNullableValueType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 324
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"System.Nullable%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsNullableValueType { get; }
    content.vb: Public ReadOnly Property IsNullableValueType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsCollectionType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsCollectionType
  id: IsCollectionType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsCollectionType
  nameWithType: ModelMetadata.IsCollectionType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsCollectionType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsCollectionType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 332
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> is a collection type.\n"
  remarks: "\nA collection type is defined as a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> which is assignable to <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsCollectionType { get; }
    content.vb: Public ReadOnly Property IsCollectionType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  id: IsEnumerableType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsEnumerableType
  nameWithType: ModelMetadata.IsEnumerableType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsEnumerableType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 341
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> is an enumerable type.\n"
  remarks: "\nAn enumerable type is defined as a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> which is assignable to\n<xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, and is not a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool IsEnumerableType { get; }
    content.vb: Public ReadOnly Property IsEnumerableType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReferenceOrNullableType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReferenceOrNullableType
  id: IsReferenceOrNullableType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: IsReferenceOrNullableType
  nameWithType: ModelMetadata.IsReferenceOrNullableType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsReferenceOrNullableType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsReferenceOrNullableType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 346
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value indicating whether or not <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> allows <code>null</code> values.\n"
  example: []
  syntax:
    content: public bool IsReferenceOrNullableType { get; }
    content.vb: Public ReadOnly Property IsReferenceOrNullableType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  id: UnderlyingOrModelType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: UnderlyingOrModelType
  nameWithType: ModelMetadata.UnderlyingOrModelType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: UnderlyingOrModelType
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 355
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the underlying type argument if <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Nullable%601\" data-throw-if-not-resolved=\"false\"></xref>.\nOtherwise gets <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIdentical to <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType\" data-throw-if-not-resolved=\"false\"></xref> unless <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType\" data-throw-if-not-resolved=\"false\"></xref> is <code>true</code>.\n"
  example: []
  syntax:
    content: public Type UnderlyingOrModelType { get; }
    content.vb: Public ReadOnly Property UnderlyingOrModelType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyGetter
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyGetter
  id: PropertyGetter
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: PropertyGetter
  nameWithType: ModelMetadata.PropertyGetter
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertyGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: PropertyGetter
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 360
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a property getter delegate to get the property value from a model object.\n"
  example: []
  syntax:
    content: public abstract Func<object, object> PropertyGetter { get; }
    content.vb: Public MustOverride ReadOnly Property PropertyGetter As Func(Of Object, Object)
    parameters: []
    return:
      type: System.Func{System.Object,System.Object}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertySetter
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertySetter
  id: PropertySetter
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: PropertySetter
  nameWithType: ModelMetadata.PropertySetter
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.PropertySetter
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: PropertySetter
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 365
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a property setter delegate to set the property value on a model object.\n"
  example: []
  syntax:
    content: public abstract Action<object, object> PropertySetter { get; }
    content.vb: Public MustOverride ReadOnly Property PropertySetter As Action(Of Object, Object)
    parameters: []
    return:
      type: System.Action{System.Object,System.Object}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  id: GetDisplayName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: GetDisplayName()
  nameWithType: ModelMetadata.GetDisplayName()
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetDisplayName
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 375
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a display name for the model.\n"
  remarks: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName\" data-throw-if-not-resolved=\"false\"></xref> will return the first of the following expressions which has a\nnon-<code>null</code> value: <code>DisplayName</code>, <code>PropertyName</code>, <code>ModelType.Name</code>.\n"
  example: []
  syntax:
    content: public string GetDisplayName()
    content.vb: Public Function GetDisplayName As String
    return:
      type: System.String
      description: The display name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  id: Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Equals(ModelMetadata)
  nameWithType: ModelMetadata.Equals(ModelMetadata)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Equals
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 381
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  example: []
  syntax:
    content: public bool Equals(ModelMetadata other)
    content.vb: Public Function Equals(other As ModelMetadata) As Boolean
    parameters:
    - id: other
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ModelMetadata.Equals(Object)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Equals
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 399
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetHashCode
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ModelMetadata.GetHashCode()
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelMetadata.cs
    startLine: 405
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ModelMetadata>
  nameWithType: IEquatable<ModelMetadata>
  fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>
  nameWithType.vb: IEquatable(Of ModelMetadata)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  name.vb: IEquatable(Of ModelMetadata)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: Order
  nameWithType: ModelMetadata.Order
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Order
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelMetadata
  nameWithType: ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  isExternal: false
  name: ModelMetadataIdentity
  nameWithType: ModelMetadataIdentity
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  isExternal: false
  name: ModelMetadataKind
  nameWithType: ModelMetadataKind
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataKind
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Object,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<Object, Object>
  nameWithType: IReadOnlyDictionary<Object, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.Object, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of Object, Object)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.Object, System.Object)
  name.vb: IReadOnlyDictionary(Of Object, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelPropertyCollection
  nameWithType: ModelPropertyCollection
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IModelNameProvider
  nameWithType: IModelNameProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelNameProvider
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IModelBinder
  nameWithType: IModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IBinderTypeProviderMetadata
  nameWithType: IBinderTypeProviderMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IBinderTypeProviderMetadata
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: BindingSource
  nameWithType: BindingSource
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: ModelType
  nameWithType: ModelMetadata.ModelType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.ModelType
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: IsEnumerableType
  nameWithType: ModelMetadata.IsEnumerableType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnumerableType
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Enum
  commentId: T:System.Enum
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: UnderlyingOrModelType
  nameWithType: ModelMetadata.UnderlyingOrModelType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.UnderlyingOrModelType
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: IsEnum
  nameWithType: ModelMetadata.IsEnum
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsEnum
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<EnumGroupAndName, String>>
  nameWithType: IEnumerable<KeyValuePair<EnumGroupAndName, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of EnumGroupAndName, String))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of EnumGroupAndName, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
    name: EnumGroupAndName
    nameWithType: EnumGroupAndName
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
    name: EnumGroupAndName
    nameWithType: EnumGroupAndName
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, String>
  nameWithType: IReadOnlyDictionary<String, String>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>
  nameWithType.vb: IReadOnlyDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.String)
  name.vb: IReadOnlyDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: EditFormatString
  nameWithType: ModelMetadata.EditFormatString
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.EditFormatString
- uid: System.FlagsAttribute
  commentId: T:System.FlagsAttribute
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  isExternal: false
  name: IModelBindingMessageProvider
  nameWithType: IModelBindingMessageProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: Properties
  nameWithType: ModelMetadata.Properties
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.Properties
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IPropertyFilterProvider
  nameWithType: IPropertyFilterProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider
- uid: System.Collections.Generic.IReadOnlyList{System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Object>
  nameWithType: IReadOnlyList<Object>
  fullName: System.Collections.Generic.IReadOnlyList<System.Object>
  nameWithType.vb: IReadOnlyList(Of Object)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.Object)
  name.vb: IReadOnlyList(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.TypeConverter
  commentId: T:System.ComponentModel.TypeConverter
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: IsNullableValueType
  nameWithType: ModelMetadata.IsNullableValueType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.IsNullableValueType
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Object, Object>
  nameWithType: Func<Object, Object>
  fullName: System.Func<System.Object, System.Object>
  nameWithType.vb: Func(Of Object, Object)
  fullname.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,System.Object}
  commentId: T:System.Action{System.Object,System.Object}
  parent: System
  definition: System.Action`2
  name: Action<Object, Object>
  nameWithType: Action<Object, Object>
  fullName: System.Action<System.Object, System.Object>
  nameWithType.vb: Action(Of Object, Object)
  fullname.vb: System.Action(Of System.Object, System.Object)
  name.vb: Action(Of Object, Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  isExternal: false
  name: GetDisplayName()
  nameWithType: ModelMetadata.GetDisplayName()
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
    name: GetDisplayName
    nameWithType: ModelMetadata.GetDisplayName
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
    name: GetDisplayName
    nameWithType: ModelMetadata.GetDisplayName
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.GetDisplayName
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  parent: System.IEquatable{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ModelMetadata)
  nameWithType: IEquatable<ModelMetadata>.Equals(ModelMetadata)
  fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>.Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  nameWithType.vb: IEquatable(Of ModelMetadata).Equals(ModelMetadata)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata).Equals(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ModelMetadata>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ModelMetadata).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
