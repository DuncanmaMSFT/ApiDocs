### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  id: ViewLocationCacheKey
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.AreaName
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ControllerName
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(System.Object)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.GetHashCode
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.IsMainPage
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationExpanderValues
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewName
  langs:
  - csharp
  - vb
  name: ViewLocationCacheKey
  nameWithType: ViewLocationCacheKey
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewLocationCacheKey
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nKey for entries in <xref href=\"Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewLookupCache\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public struct ViewLocationCacheKey : IEquatable<ViewLocationCacheKey>'
    content.vb: >-
      Public Structure ViewLocationCacheKey
          Implements IEquatable(Of ViewLocationCacheKey)
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: ViewLocationCacheKey(String, Boolean)
  nameWithType: ViewLocationCacheKey.ViewLocationCacheKey(String, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationCacheKey(System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ViewLocationCacheKey(string viewName, bool isMainPage)
    content.vb: Public Sub New(viewName As String, isMainPage As Boolean)
    parameters:
    - id: viewName
      type: System.String
      description: The view name or path.
    - id: isMainPage
      type: System.Boolean
      description: Determines if the page being found is the main page for an action.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.#ctor(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})
  id: '#ctor(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: ViewLocationCacheKey(String, String, String, Boolean, IReadOnlyDictionary<String, String>)
  nameWithType: ViewLocationCacheKey.ViewLocationCacheKey(String, String, String, Boolean, IReadOnlyDictionary<String, String>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationCacheKey(System.String, System.String, System.String, System.Boolean, System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ViewLocationCacheKey(string viewName, string controllerName, string areaName, bool isMainPage, IReadOnlyDictionary<string, string> values)
    content.vb: Public Sub New(viewName As String, controllerName As String, areaName As String, isMainPage As Boolean, values As IReadOnlyDictionary(Of String, String))
    parameters:
    - id: viewName
      type: System.String
      description: The view name.
    - id: controllerName
      type: System.String
      description: The controller name.
    - id: areaName
      type: System.String
      description: The area name.
    - id: isMainPage
      type: System.Boolean
      description: Determines if the page being found is the main page for an action.
    - id: values
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
      description: Values from <xref href="Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander" data-throw-if-not-resolved="false"></xref> instances.
  nameWithType.vb: ViewLocationCacheKey.ViewLocationCacheKey(String, String, String, Boolean, IReadOnlyDictionary(Of String, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationCacheKey(System.String, System.String, System.String, System.Boolean, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.String))
  name.vb: ViewLocationCacheKey(String, String, String, Boolean, IReadOnlyDictionary(Of String, String))
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewName
  id: ViewName
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: ViewName
  nameWithType: ViewLocationCacheKey.ViewName
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewName
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 56
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the view name.\n"
  example: []
  syntax:
    content: public string ViewName { get; }
    content.vb: Public ReadOnly Property ViewName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ControllerName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ControllerName
  id: ControllerName
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: ControllerName
  nameWithType: ViewLocationCacheKey.ControllerName
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ControllerName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ControllerName
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 61
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the controller name.\n"
  example: []
  syntax:
    content: public string ControllerName { get; }
    content.vb: Public ReadOnly Property ControllerName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.AreaName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.AreaName
  id: AreaName
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: AreaName
  nameWithType: ViewLocationCacheKey.AreaName
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.AreaName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AreaName
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the area name.\n"
  example: []
  syntax:
    content: public string AreaName { get; }
    content.vb: Public ReadOnly Property AreaName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.IsMainPage
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.IsMainPage
  id: IsMainPage
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: IsMainPage
  nameWithType: ViewLocationCacheKey.IsMainPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.IsMainPage
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsMainPage
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nDetermines if the page being found is the main page for an action.\n"
  example: []
  syntax:
    content: public bool IsMainPage { get; }
    content.vb: Public ReadOnly Property IsMainPage As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationExpanderValues
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationExpanderValues
  id: ViewLocationExpanderValues
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: ViewLocationExpanderValues
  nameWithType: ViewLocationCacheKey.ViewLocationExpanderValues
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.ViewLocationExpanderValues
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewLocationExpanderValues
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the values populated by <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<string, string> ViewLocationExpanderValues { get; }
    content.vb: Public ReadOnly Property ViewLocationExpanderValues As IReadOnlyDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  id: Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: Equals(ViewLocationCacheKey)
  nameWithType: ViewLocationCacheKey.Equals(ViewLocationCacheKey)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Equals
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  example: []
  syntax:
    content: public bool Equals(ViewLocationCacheKey y)
    content.vb: Public Function Equals(y As ViewLocationCacheKey) As Boolean
    parameters:
    - id: y
      type: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
    return:
      type: System.Boolean
  implements:
  - System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ViewLocationCacheKey.Equals(Object)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Equals
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 115
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.GetHashCode
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.GetHashCode
  id: GetHashCode
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ViewLocationCacheKey.GetHashCode()
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetHashCode
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheKey.cs
    startLine: 126
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewLookupCache
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.ViewLookupCache
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Internal
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal
- uid: System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}
  commentId: T:System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ViewLocationCacheKey>
  nameWithType: IEquatable<ViewLocationCacheKey>
  fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey>
  nameWithType.vb: IEquatable(Of ViewLocationCacheKey)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  name.vb: IEquatable(Of ViewLocationCacheKey)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
    name: ViewLocationCacheKey
    nameWithType: ViewLocationCacheKey
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
    name: ViewLocationCacheKey
    nameWithType: ViewLocationCacheKey
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: ViewLocationCacheKey
  nameWithType: ViewLocationCacheKey
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: IViewLocationExpander
  nameWithType: IViewLocationExpander
  fullName: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, String>
  nameWithType: IReadOnlyDictionary<String, String>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.String>
  nameWithType.vb: IReadOnlyDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.String)
  name.vb: IReadOnlyDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  commentId: M:System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  parent: System.IEquatable{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ViewLocationCacheKey)
  nameWithType: IEquatable<ViewLocationCacheKey>.Equals(ViewLocationCacheKey)
  fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey>.Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  nameWithType.vb: IEquatable(Of ViewLocationCacheKey).Equals(ViewLocationCacheKey)
  fullname.vb: System.IEquatable(Of Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey).Equals(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ViewLocationCacheKey>.Equals
    fullName: System.IEquatable<Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
    name: ViewLocationCacheKey
    nameWithType: ViewLocationCacheKey
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ViewLocationCacheKey).Equals
    fullName: System.IEquatable(Of Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
    name: ViewLocationCacheKey
    nameWithType: ViewLocationCacheKey
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
