### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  id: FilterDescriptor
  parent: Microsoft.AspNetCore.Mvc.Filters
  children:
  - Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Int32)
  - Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Filter
  - Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
  - Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Scope
  langs:
  - csharp
  - vb
  name: FilterDescriptor
  nameWithType: FilterDescriptor
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: FilterDescriptor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nDescriptor for an <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<xref href=\"Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor\" data-throw-if-not-resolved=\"false\"></xref> describes an <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata\" data-throw-if-not-resolved=\"false\"></xref> with an order and scope.\n\nOrder and scope control the execution order of filters. Filters with a higher value of Order execute\nlater in the pipeline.\n\nWhen filters have the same Order, the Scope value is used to determine the order of execution. Filters\nwith a higher value of Scope execute later in the pipeline. See <code>Microsoft.AspNetCore.Mvc.FilterScope</code>\nfor commonly used scopes.\n\nFor <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter\" data-throw-if-not-resolved=\"false\"></xref> implementions, the filter runs only after an exception has occurred,\nand so the observed order of execution will be opposite that of other filters.\n"
  example: []
  syntax:
    content: public class FilterDescriptor
    content.vb: Public Class FilterDescriptor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Int32)
  commentId: M:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Int32)
  id: '#ctor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata,System.Int32)'
  parent: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  langs:
  - csharp
  - vb
  name: FilterDescriptor(IFilterMetadata, Int32)
  nameWithType: FilterDescriptor.FilterDescriptor(IFilterMetadata, Int32)
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.FilterDescriptor(Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
    startLine: 35
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf the <em>filter</em> implements <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter\" data-throw-if-not-resolved=\"false\"></xref>, then the value of\n<xref href=\"Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order\" data-throw-if-not-resolved=\"false\"></xref> will be taken from <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise the value\nof <xref href=\"Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order\" data-throw-if-not-resolved=\"false\"></xref> will default to <code>0</code>.\n"
  example: []
  syntax:
    content: public FilterDescriptor(IFilterMetadata filter, int filterScope)
    content.vb: Public Sub New(filter As IFilterMetadata, filterScope As Integer)
    parameters:
    - id: filter
      type: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
      description: The <xref href="Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata" data-throw-if-not-resolved="false"></xref>.
    - id: filterScope
      type: System.Int32
      description: The filter scope.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Filter
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Filter
  id: Filter
  parent: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: FilterDescriptor.Filter
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Filter
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Filter
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
    startLine: 56
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nThe <xref href=\"Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public IFilterMetadata Filter { get; }
    content.vb: Public ReadOnly Property Filter As IFilterMetadata
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
  id: Order
  parent: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  langs:
  - csharp
  - vb
  name: Order
  nameWithType: FilterDescriptor.Order
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Order
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
    startLine: 61
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nThe filter order.\n"
  example: []
  syntax:
    content: public int Order { get; set; }
    content.vb: Public Property Order As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Scope
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Scope
  id: Scope
  parent: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: FilterDescriptor.Scope
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Scope
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Scope
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/Filters/FilterDescriptor.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.Filters
  summary: "\nThe filter scope.\n"
  example: []
  syntax:
    content: public int Scope { get; }
    content.vb: Public ReadOnly Property Scope As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
  parent: Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: IFilterMetadata
  nameWithType: IFilterMetadata
  fullName: Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
  parent: Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: FilterDescriptor
  nameWithType: FilterDescriptor
  fullName: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor
- uid: Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter
  parent: Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: IExceptionFilter
  nameWithType: IExceptionFilter
  fullName: Microsoft.AspNetCore.Mvc.Filters.IExceptionFilter
- uid: Microsoft.AspNetCore.Mvc.Filters
  commentId: N:Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Filters
  nameWithType: Microsoft.AspNetCore.Mvc.Filters
  fullName: Microsoft.AspNetCore.Mvc.Filters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  commentId: T:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  parent: Microsoft.AspNetCore.Mvc.Filters
  isExternal: false
  name: IOrderedFilter
  nameWithType: IOrderedFilter
  fullName: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
- uid: Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.FilterDescriptor.Order
- uid: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  commentId: P:Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
  parent: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter
  isExternal: false
  name: Order
  nameWithType: IOrderedFilter.Order
  fullName: Microsoft.AspNetCore.Mvc.Filters.IOrderedFilter.Order
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
