### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  id: ChunkInheritanceUtility
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.#ctor(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost,Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  - Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.GetInheritedChunkTreeResults(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree},System.String)
  langs:
  - csharp
  - vb
  name: ChunkInheritanceUtility
  nameWithType: ChunkInheritanceUtility
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ChunkInheritanceUtility
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nA utility type for supporting inheritance of directives into a page from applicable <code>_ViewImports</code> pages.\n"
  example: []
  syntax:
    content: public class ChunkInheritanceUtility
    content.vb: Public Class ChunkInheritanceUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.#ctor(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost,Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.#ctor(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost,Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  id: '#ctor(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost,Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})'
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  langs:
  - csharp
  - vb
  name: ChunkInheritanceUtility(MvcRazorHost, IChunkTreeCache, IReadOnlyList<Chunk>)
  nameWithType: ChunkInheritanceUtility.ChunkInheritanceUtility(MvcRazorHost, IChunkTreeCache, IReadOnlyList<Chunk>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.ChunkInheritanceUtility(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost, Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.Chunk>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ChunkInheritanceUtility(MvcRazorHost razorHost, IChunkTreeCache chunkTreeCache, IReadOnlyList<Chunk> defaultInheritedChunks)
    content.vb: Public Sub New(razorHost As MvcRazorHost, chunkTreeCache As IChunkTreeCache, defaultInheritedChunks As IReadOnlyList(Of Chunk))
    parameters:
    - id: razorHost
      type: Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
      description: The <xref href="Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost" data-throw-if-not-resolved="false"></xref> used to parse <code>_ViewImports</code> pages.
    - id: chunkTreeCache
      type: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache
      description: >
        <xref href="Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache" data-throw-if-not-resolved="false"></xref> that caches <xref href="Microsoft.AspNetCore.Razor.Chunks.ChunkTree" data-throw-if-not-resolved="false"></xref> instances.
    - id: defaultInheritedChunks
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
      description: Sequence of <xref href="Microsoft.AspNetCore.Razor.Chunks.Chunk" data-throw-if-not-resolved="false"></xref>s inherited by default.
  nameWithType.vb: ChunkInheritanceUtility.ChunkInheritanceUtility(MvcRazorHost, IChunkTreeCache, IReadOnlyList(Of Chunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.ChunkInheritanceUtility(Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost, Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.Chunk))
  name.vb: ChunkInheritanceUtility(MvcRazorHost, IChunkTreeCache, IReadOnlyList(Of Chunk))
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.GetInheritedChunkTreeResults(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.GetInheritedChunkTreeResults(System.String)
  id: GetInheritedChunkTreeResults(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  langs:
  - csharp
  - vb
  name: GetInheritedChunkTreeResults(String)
  nameWithType: ChunkInheritanceUtility.GetInheritedChunkTreeResults(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.GetInheritedChunkTreeResults(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetInheritedChunkTreeResults
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nGets an ordered <xref href=\"System.Collections.Generic.IReadOnlyList%601\" data-throw-if-not-resolved=\"false\"></xref> of parsed <xref href=\"Microsoft.AspNetCore.Razor.Chunks.ChunkTree\" data-throw-if-not-resolved=\"false\"></xref>s and\nfile paths for each <code>_ViewImports</code> that is applicable to the page located at\n<em>pagePath</em>. The list is ordered so that the <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult\" data-throw-if-not-resolved=\"false\"></xref>'s\n<xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult.ChunkTree\" data-throw-if-not-resolved=\"false\"></xref> for the <code>_ViewImports</code> closest to the\n<em>pagePath</em> in the file system appears first.\n"
  remarks: "\nThe resulting <xref href=\"System.Collections.Generic.IReadOnlyList%601\" data-throw-if-not-resolved=\"false\"></xref> is ordered so that the result\nfor a _ViewImport closest to the application root appears first and the _ViewImport\nclosest to the page appears last i.e.\n[ /_ViewImport, /Views/_ViewImport, /Views/Home/_ViewImport ]\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<ChunkTreeResult> GetInheritedChunkTreeResults(string pagePath)
    content.vb: Public Overridable Function GetInheritedChunkTreeResults(pagePath As String) As IReadOnlyList(Of ChunkTreeResult)
    parameters:
    - id: pagePath
      type: System.String
      description: The path of the page to locate inherited chunks for.
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult}
      description: >-
        A <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref> of parsed <code>_ViewImports</code>

        <xref href="Microsoft.AspNetCore.Razor.Chunks.ChunkTree" data-throw-if-not-resolved="false"></xref>s and their file paths.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree},System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree},System.String)
  id: MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree},System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  langs:
  - csharp
  - vb
  name: MergeInheritedChunkTrees(ChunkTree, IReadOnlyList<ChunkTree>, String)
  nameWithType: ChunkInheritanceUtility.MergeInheritedChunkTrees(ChunkTree, IReadOnlyList<ChunkTree>, String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.ChunkTree>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MergeInheritedChunkTrees
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/ChunkInheritanceUtility.cs
    startLine: 111
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nMerges <xref href=\"Microsoft.AspNetCore.Razor.Chunks.Chunk\" data-throw-if-not-resolved=\"false\"></xref> inherited by default and <xref href=\"Microsoft.AspNetCore.Razor.Chunks.ChunkTree\" data-throw-if-not-resolved=\"false\"></xref> instances produced by parsing\n<code>_ViewImports</code> files into the specified <em>chunkTree</em>.\n"
  example: []
  syntax:
    content: public void MergeInheritedChunkTrees(ChunkTree chunkTree, IReadOnlyList<ChunkTree> inheritedChunkTrees, string defaultModel)
    content.vb: Public Sub MergeInheritedChunkTrees(chunkTree As ChunkTree, inheritedChunkTrees As IReadOnlyList(Of ChunkTree), defaultModel As String)
    parameters:
    - id: chunkTree
      type: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
      description: The <xref href="Microsoft.AspNetCore.Razor.Chunks.ChunkTree" data-throw-if-not-resolved="false"></xref> to merge in to.
    - id: inheritedChunkTrees
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree}
      description: >-
        <xref href="System.Collections.Generic.IReadOnlyList%601" data-throw-if-not-resolved="false"></xref> inherited from <code>_ViewImports</code>
            files.
    - id: defaultModel
      type: System.String
      description: The default model <xref href="System.Type" data-throw-if-not-resolved="false"></xref> name.
  nameWithType.vb: ChunkInheritanceUtility.MergeInheritedChunkTrees(ChunkTree, IReadOnlyList(Of ChunkTree), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility.MergeInheritedChunkTrees(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.ChunkTree), System.String)
  name.vb: MergeInheritedChunkTrees(ChunkTree, IReadOnlyList(Of ChunkTree), String)
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Directives
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Directives
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
  isExternal: false
  name: ChunkInheritanceUtility
  nameWithType: ChunkInheritanceUtility
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkInheritanceUtility
- uid: Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: MvcRazorHost
  nameWithType: MvcRazorHost
  fullName: Microsoft.AspNetCore.Mvc.Razor.MvcRazorHost
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: IChunkTreeCache
  nameWithType: IChunkTreeCache
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkTreeCache
- uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.ChunkTree
  parent: Microsoft.AspNetCore.Razor.Chunks
  isExternal: true
  name: ChunkTree
  nameWithType: ChunkTree
  fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
- uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.Chunk
  parent: Microsoft.AspNetCore.Razor.Chunks
  isExternal: true
  name: Chunk
  nameWithType: Chunk
  fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Chunk>
  nameWithType: IReadOnlyList<Chunk>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.Chunk>
  nameWithType.vb: IReadOnlyList(Of Chunk)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.Chunk)
  name.vb: IReadOnlyList(Of Chunk)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: Microsoft.AspNetCore.Razor.Chunks
  commentId: N:Microsoft.AspNetCore.Razor.Chunks
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Chunks
  nameWithType: Microsoft.AspNetCore.Razor.Chunks
  fullName: Microsoft.AspNetCore.Razor.Chunks
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
  isExternal: false
  name: ChunkTreeResult
  nameWithType: ChunkTreeResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult.ChunkTree
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult.ChunkTree
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ChunkTreeResult>
  nameWithType: IReadOnlyList<ChunkTreeResult>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult>
  nameWithType.vb: IReadOnlyList(Of ChunkTreeResult)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult)
  name.vb: IReadOnlyList(Of ChunkTreeResult)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
    name: ChunkTreeResult
    nameWithType: ChunkTreeResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
    name: ChunkTreeResult
    nameWithType: ChunkTreeResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.ChunkTreeResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.ChunkTree}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ChunkTree>
  nameWithType: IReadOnlyList<ChunkTree>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.ChunkTree>
  nameWithType.vb: IReadOnlyList(Of ChunkTree)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.ChunkTree)
  name.vb: IReadOnlyList(Of ChunkTree)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
