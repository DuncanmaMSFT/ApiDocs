### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  id: DelegatingEnumerable`2
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml
  children:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.Add(System.Object)
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.GetEnumerator
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: DelegatingEnumerable<TWrapped, TDeclared>
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DelegatingEnumerable
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nSerializes <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> types by delegating them through a concrete implementation.\n"
  example: []
  syntax:
    content: 'public class DelegatingEnumerable<TWrapped, TDeclared> : IEnumerable<TWrapped>, IEnumerable'
    content.vb: >-
      Public Class DelegatingEnumerable(Of TWrapped, TDeclared)
          Implements IEnumerable(Of TWrapped), IEnumerable
    typeParameters:
    - id: TWrapped
      description: "The wrapping or original type of the <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> \nto proxy."
    - id: TDeclared
      description: "The type parameter of the original <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> \nto proxy."
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{TWrapped}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared)
  name.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  langs:
  - csharp
  - vb
  name: DelegatingEnumerable()
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nInitializes a <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable%602\" data-throw-if-not-resolved=\"false\"></xref>. \n"
  remarks: "\nThis constructor is necessary for <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref> \nto serialize.\n"
  example: []
  syntax:
    content: public DelegatingEnumerable()
    content.vb: Public Sub New
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared).DelegatingEnumerable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared).DelegatingEnumerable()
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.#ctor(System.Collections.Generic.IEnumerable{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  id: '#ctor(System.Collections.Generic.IEnumerable{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)'
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  langs:
  - csharp
  - vb
  name: DelegatingEnumerable(IEnumerable<TDeclared>, IWrapperProvider)
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable(IEnumerable<TDeclared>, IWrapperProvider)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable(System.Collections.Generic.IEnumerable<TDeclared>, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 40
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nInitializes a <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable%602\" data-throw-if-not-resolved=\"false\"></xref> with the original\n<xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> and the wrapper provider for wrapping individual elements.\n"
  example: []
  syntax:
    content: public DelegatingEnumerable(IEnumerable<TDeclared> source, IWrapperProvider elementWrapperProvider)
    content.vb: Public Sub New(source As IEnumerable(Of TDeclared), elementWrapperProvider As IWrapperProvider)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TDeclared}}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> instance to get the enumerator from.
    - id: elementWrapperProvider
      type: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
      description: The wrapper provider for wrapping individual elements.
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared).DelegatingEnumerable(IEnumerable(Of TDeclared), IWrapperProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared).DelegatingEnumerable(System.Collections.Generic.IEnumerable(Of TDeclared), Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  name.vb: DelegatingEnumerable(IEnumerable(Of TDeclared), IWrapperProvider)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.GetEnumerator
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>.GetEnumerator()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetEnumerator
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 56
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nGets a delegating enumerator of the original <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> source which is being\nwrapped.\n"
  example: []
  syntax:
    content: public IEnumerator<TWrapped> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of TWrapped)
    return:
      type: System.Collections.Generic.IEnumerator{{TWrapped}}
      description: The delegating enumerator of the original <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> source.
  implements:
  - System.Collections.Generic.IEnumerable{{TWrapped}}.GetEnumerator
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared).GetEnumerator()
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.Add(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.Add(System.Object)
  id: Add(System.Object)
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>.Add(Object)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Add
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nThe serializer requires every type it encounters can be serialized and deserialized.\nThis type will never be used for deserialization, but we are required to implement the add\nmethod so that the type can be serialized. This will never be called.\n"
  example: []
  syntax:
    content: public void Add(object item)
    content.vb: Public Sub Add(item As Object)
    parameters:
    - id: item
      type: System.Object
      description: The item to add. Unused.
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared).Add(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared).Add(System.Object)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>.IEnumerable.GetEnumerator()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerable.cs
    startLine: 77
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nGets a delegating enumerator of the original <xref href=\"System.Collections.Generic.IEnumerable%601\" data-throw-if-not-resolved=\"false\"></xref> source which is being\nwrapped.\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: The delegating enumerator of the original <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> source.
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml
  commentId: N:Microsoft.AspNetCore.Mvc.Formatters.Xml
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Formatters.Xml
  nameWithType: Microsoft.AspNetCore.Mvc.Formatters.Xml
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{TWrapped}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TWrapped>
  nameWithType: IEnumerable<TWrapped>
  fullName: System.Collections.Generic.IEnumerable<TWrapped>
  nameWithType.vb: IEnumerable(Of TWrapped)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TWrapped)
  name.vb: IEnumerable(Of TWrapped)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  isExternal: false
  name: DelegatingEnumerable<TWrapped, TDeclared>
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
  fullname.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared)
  name.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
    name: DelegatingEnumerable
    nameWithType: DelegatingEnumerable
    fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
    name: DelegatingEnumerable
    nameWithType: DelegatingEnumerable
    fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.Serialization.DataContractSerializer
  commentId: T:System.Runtime.Serialization.DataContractSerializer
  parent: System.Runtime.Serialization
  isExternal: true
  name: DataContractSerializer
  nameWithType: DataContractSerializer
  fullName: System.Runtime.Serialization.DataContractSerializer
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Collections.Generic.IEnumerable{{TDeclared}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TDeclared>
  nameWithType: IEnumerable<TDeclared>
  fullName: System.Collections.Generic.IEnumerable<TDeclared>
  nameWithType.vb: IEnumerable(Of TDeclared)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TDeclared)
  name.vb: IEnumerable(Of TDeclared)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml
  isExternal: false
  name: IWrapperProvider
  nameWithType: IWrapperProvider
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
- uid: System.Collections.Generic.IEnumerable{{TWrapped}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TWrapped}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TWrapped>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TWrapped>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TWrapped).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of TWrapped).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TWrapped>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TWrapped>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TWrapped).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TWrapped).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TWrapped}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TWrapped>
  nameWithType: IEnumerator<TWrapped>
  fullName: System.Collections.Generic.IEnumerator<TWrapped>
  nameWithType.vb: IEnumerator(Of TWrapped)
  fullname.vb: System.Collections.Generic.IEnumerator(Of TWrapped)
  name.vb: IEnumerator(Of TWrapped)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
