### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  id: ModelStateEntry
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.AttemptedValue
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Children
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.GetModelStateForProperty(System.String)
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
  - Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.ValidationState
  langs:
  - csharp
  - vb
  name: ModelStateEntry
  nameWithType: ModelStateEntry
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelStateEntry
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nAn entry in a <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class ModelStateEntry
    content.vb: Public MustInherit Class ModelStateEntry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
  id: RawValue
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: RawValue
  nameWithType: ModelStateEntry.RawValue
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: RawValue
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the raw value from the request associated with this entry.\n"
  example: []
  syntax:
    content: public object RawValue { get; set; }
    content.vb: Public Property RawValue As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.AttemptedValue
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.AttemptedValue
  id: AttemptedValue
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: AttemptedValue
  nameWithType: ModelStateEntry.AttemptedValue
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.AttemptedValue
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AttemptedValue
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the set of values contained in <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue\" data-throw-if-not-resolved=\"false\"></xref>, joined into a comma-separated string.\n"
  example: []
  syntax:
    content: public string AttemptedValue { get; set; }
    content.vb: Public Property AttemptedValue As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors
  id: Errors
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: Errors
  nameWithType: ModelStateEntry.Errors
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Errors
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Errors
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection\" data-throw-if-not-resolved=\"false\"></xref> for this entry.\n"
  example: []
  syntax:
    content: public ModelErrorCollection Errors { get; }
    content.vb: Public ReadOnly Property Errors As ModelErrorCollection
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.ValidationState
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.ValidationState
  id: ValidationState
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: ValidationState
  nameWithType: ModelStateEntry.ValidationState
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.ValidationState
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValidationState
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState\" data-throw-if-not-resolved=\"false\"></xref> for this entry.\n"
  example: []
  syntax:
    content: public ModelValidationState ValidationState { get; set; }
    content.vb: Public Property ValidationState As ModelValidationState
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
  id: IsContainerNode
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: IsContainerNode
  nameWithType: ModelStateEntry.IsContainerNode
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsContainerNode
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets a value that determines if the current instance of <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry\" data-throw-if-not-resolved=\"false\"></xref> is a container node.\nContainer nodes represent prefix nodes that aren't explicitly added to the\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract bool IsContainerNode { get; }
    content.vb: Public MustOverride ReadOnly Property IsContainerNode As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.GetModelStateForProperty(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.GetModelStateForProperty(System.String)
  id: GetModelStateForProperty(System.String)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: GetModelStateForProperty(String)
  nameWithType: ModelStateEntry.GetModelStateForProperty(String)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.GetModelStateForProperty(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetModelStateForProperty
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 56
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry\" data-throw-if-not-resolved=\"false\"></xref> for a sub-property with the specified <em>propertyName</em>.\n"
  remarks: This method returns any existing entry, even those with <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode" data-throw-if-not-resolved="false"></xref> with value <code>true</code>..
  example: []
  syntax:
    content: public abstract ModelStateEntry GetModelStateForProperty(string propertyName)
    content.vb: Public MustOverride Function GetModelStateForProperty(propertyName As String) As ModelStateEntry
    parameters:
    - id: propertyName
      type: System.String
      description: The property name to lookup.
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry" data-throw-if-not-resolved="false"></xref> if a sub-property was found; otherwise <code>null</code>.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Children
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Children
  id: Children
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: ModelStateEntry.Children
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.Children
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Children
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/ModelStateEntry.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry\" data-throw-if-not-resolved=\"false\"></xref> values for sub-properties.\n"
  remarks: This method returns all existing entries, even those with <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode" data-throw-if-not-resolved="false"></xref> with value <code>true</code>.
  example: []
  syntax:
    content: public abstract IReadOnlyList<ModelStateEntry> Children { get; }
    content.vb: Public MustOverride ReadOnly Property Children As IReadOnlyList(Of ModelStateEntry)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry}
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelStateDictionary
  nameWithType: ModelStateDictionary
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.RawValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelErrorCollection
  nameWithType: ModelErrorCollection
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelErrorCollection
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelValidationState
  nameWithType: ModelValidationState
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelStateEntry
  nameWithType: ModelStateEntry
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry.IsContainerNode
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ModelStateEntry>
  nameWithType: IReadOnlyList<ModelStateEntry>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry>
  nameWithType.vb: IReadOnlyList(Of ModelStateEntry)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry)
  name.vb: IReadOnlyList(Of ModelStateEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
    name: ModelStateEntry
    nameWithType: ModelStateEntry
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
    name: ModelStateEntry
    nameWithType: ModelStateEntry
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
