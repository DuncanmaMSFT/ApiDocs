### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  id: ComplexTypeModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder})
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
  langs:
  - csharp
  - vb
  name: ComplexTypeModelBinder
  nameWithType: ComplexTypeModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ComplexTypeModelBinder
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder\" data-throw-if-not-resolved=\"false\"></xref> implementation for binding complex types.\n"
  example: []
  syntax:
    content: 'public class ComplexTypeModelBinder : IModelBinder'
    content.vb: >-
      Public Class ComplexTypeModelBinder
          Implements IModelBinder
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder})
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder})
  id: '#ctor(System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder})'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder>)
  nameWithType: ComplexTypeModelBinder.ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder>)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ComplexTypeModelBinder(IDictionary<ModelMetadata, IModelBinder> propertyBinders)
    content.vb: Public Sub New(propertyBinders As IDictionary(Of ModelMetadata, IModelBinder))
    parameters:
    - id: propertyBinders
      type: System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder}
      description: "\nThe <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> of binders to use for binding properties.\n"
  nameWithType.vb: ComplexTypeModelBinder.ComplexTypeModelBinder(IDictionary(Of ModelMetadata, IModelBinder))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder))
  name.vb: ComplexTypeModelBinder(IDictionary(Of ModelMetadata, IModelBinder))
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  id: BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: BindModelAsync(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.BindModelAsync(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindModelAsync
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  example: []
  syntax:
    content: public Task BindModelAsync(ModelBindingContext bindingContext)
    content.vb: Public Function BindModelAsync(bindingContext As ModelBindingContext) As Task
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  id: CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: CanBindProperty(ModelBindingContext, ModelMetadata)
  nameWithType: ComplexTypeModelBinder.CanBindProperty(ModelBindingContext, ModelMetadata)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CanBindProperty
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 116
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nGets a value indicating whether or not the model property identified by <em>propertyMetadata</em>\ncan be bound.\n"
  example: []
  syntax:
    content: protected virtual bool CanBindProperty(ModelBindingContext bindingContext, ModelMetadata propertyMetadata)
    content.vb: Protected Overridable Function CanBindProperty(bindingContext As ModelBindingContext, propertyMetadata As ModelMetadata) As Boolean
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext" data-throw-if-not-resolved="false"></xref> for the container model.
    - id: propertyMetadata
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" data-throw-if-not-resolved="false"></xref> for the model property.
    return:
      type: System.Boolean
      description: <code>true</code> if the model property can be bound, otherwise <code>false</code>.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  id: BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: BindProperty(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.BindProperty(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindProperty
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 150
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nAttempts to bind a property of the model.\n"
  example: []
  syntax:
    content: protected virtual Task BindProperty(ModelBindingContext bindingContext)
    content.vb: Protected Overridable Function BindProperty(bindingContext As ModelBindingContext) As Task
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext" data-throw-if-not-resolved="false"></xref> for the model property.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that when completed will set <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result\" data-throw-if-not-resolved=\"false\"></xref> to the\nresult of model binding.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  id: CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: CreateModel(ModelBindingContext)
  nameWithType: ComplexTypeModelBinder.CreateModel(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CreateModel
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 313
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreates suitable <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> for given <em>bindingContext</em>.\n"
  example: []
  syntax:
    content: protected virtual object CreateModel(ModelBindingContext bindingContext)
    content.vb: Protected Overridable Function CreateModel(bindingContext As ModelBindingContext) As Object
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> compatible with <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.ModelType" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
  id: SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext,System.String,Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  langs:
  - csharp
  - vb
  name: SetProperty(ModelBindingContext, String, ModelMetadata, ModelBindingResult)
  nameWithType: ComplexTypeModelBinder.SetProperty(ModelBindingContext, String, ModelMetadata, ModelBindingResult)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext, System.String, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SetProperty
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/ComplexTypeModelBinder.cs
    startLine: 340
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nUpdates a property in the current <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void SetProperty(ModelBindingContext bindingContext, string modelName, ModelMetadata propertyMetadata, ModelBindingResult result)
    content.vb: Protected Overridable Sub SetProperty(bindingContext As ModelBindingContext, modelName As String, propertyMetadata As ModelMetadata, result As ModelBindingResult)
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext" data-throw-if-not-resolved="false"></xref>.
    - id: modelName
      type: System.String
      description: The model name.
    - id: propertyMetadata
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" data-throw-if-not-resolved="false"></xref> for the property to set.
    - id: result
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult" data-throw-if-not-resolved="false"></xref> for the property's new value.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IModelBinder
  nameWithType: IModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
  isExternal: false
  name: ComplexTypeModelBinder
  nameWithType: ComplexTypeModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder}
  commentId: T:System.Collections.Generic.IDictionary{Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata,Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<ModelMetadata, IModelBinder>
  nameWithType: IDictionary<ModelMetadata, IModelBinder>
  fullName: System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder>
  nameWithType.vb: IDictionary(Of ModelMetadata, IModelBinder)
  fullname.vb: System.Collections.Generic.IDictionary(Of Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
  name.vb: IDictionary(Of ModelMetadata, IModelBinder)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    name: IModelBinder
    nameWithType: IModelBinder
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
    name: ModelMetadata
    nameWithType: ModelMetadata
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
    name: IModelBinder
    nameWithType: IModelBinder
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  isExternal: false
  name: BindModelAsync(ModelBindingContext)
  nameWithType: IModelBinder.BindModelAsync(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    name: BindModelAsync
    nameWithType: IModelBinder.BindModelAsync
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    name: ModelBindingContext
    nameWithType: ModelBindingContext
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    name: BindModelAsync
    nameWithType: IModelBinder.BindModelAsync
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    name: ModelBindingContext
    nameWithType: ModelBindingContext
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelBindingContext
  nameWithType: ModelBindingContext
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelMetadata
  nameWithType: ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  isExternal: false
  name: Result
  nameWithType: ModelBindingContext.Result
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Result
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.ModelType
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.ModelType
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  isExternal: false
  name: ModelType
  nameWithType: ModelBindingContext.ModelType
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.ModelType
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Model
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Model
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  isExternal: false
  name: Model
  nameWithType: ModelBindingContext.Model
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.Model
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelBindingResult
  nameWithType: ModelBindingResult
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
