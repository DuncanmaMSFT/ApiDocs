### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  id: ViewHierarchyUtility
  parent: Microsoft.AspNetCore.Mvc.Razor
  children:
  - Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewImportsLocations(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewStartLocations(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.ViewImportsFileName
  langs:
  - csharp
  - vb
  name: ViewHierarchyUtility
  nameWithType: ViewHierarchyUtility
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewHierarchyUtility
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nContains methods to locate <code>_ViewStart.cshtml</code> and <code>_ViewImports.cshtml</code>\n"
  example: []
  syntax:
    content: public static class ViewHierarchyUtility
    content.vb: Public Module ViewHierarchyUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.ViewImportsFileName
  commentId: F:Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.ViewImportsFileName
  id: ViewImportsFileName
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  langs:
  - csharp
  - vb
  name: ViewImportsFileName
  nameWithType: ViewHierarchyUtility.ViewImportsFileName
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.ViewImportsFileName
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewImportsFileName
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nFile name of <code>_ViewImports.cshtml</code> file\n"
  example: []
  syntax:
    content: public static readonly string ViewImportsFileName
    content.vb: Public Shared ReadOnly ViewImportsFileName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewStartLocations(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewStartLocations(System.String)
  id: GetViewStartLocations(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  langs:
  - csharp
  - vb
  name: GetViewStartLocations(String)
  nameWithType: ViewHierarchyUtility.GetViewStartLocations(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewStartLocations(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetViewStartLocations
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
    startLine: 35
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the view start locations that are applicable to the specified path.\n"
  remarks: "\nThis method returns paths starting from the directory of <em>applicationRelativePath</em> and\nmoves upwards until it hits the application root.\ne.g.\n/Views/Home/View.cshtml -&gt; [ /Views/Home/_ViewStart.cshtml, /Views/_ViewStart.cshtml, /_ViewStart.cshtml ]\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetViewStartLocations(string applicationRelativePath)
    content.vb: Public Shared Function GetViewStartLocations(applicationRelativePath As String) As IEnumerable(Of String)
    parameters:
    - id: applicationRelativePath
      type: System.String
      description: >-
        The application relative path of the file to locate

        <code>_ViewStart</code>s for.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A sequence of paths that represent potential view start locations.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewImportsLocations(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewImportsLocations(System.String)
  id: GetViewImportsLocations(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility
  langs:
  - csharp
  - vb
  name: GetViewImportsLocations(String)
  nameWithType: ViewHierarchyUtility.GetViewImportsLocations(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewHierarchyUtility.GetViewImportsLocations(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetViewImportsLocations
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/ViewHierarchyUtility.cs
    startLine: 53
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the locations for <code>_ViewImports</code>s that are applicable to the specified path.\n"
  remarks: "\nThis method returns paths starting from the directory of <em>applicationRelativePath</em> and\nmoves upwards until it hits the application root.\ne.g.\n/Views/Home/View.cshtml -&gt; [ /Views/Home/_ViewImports.cshtml, /Views/_ViewImports.cshtml,\n                             /_ViewImports.cshtml ]\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetViewImportsLocations(string applicationRelativePath)
    content.vb: Public Shared Function GetViewImportsLocations(applicationRelativePath As String) As IEnumerable(Of String)
    parameters:
    - id: applicationRelativePath
      type: System.String
      description: >-
        The application relative path of the file to locate

        <code>_ViewImports</code>s for.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: A sequence of paths that represent potential <code>_ViewImports</code> locations.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
