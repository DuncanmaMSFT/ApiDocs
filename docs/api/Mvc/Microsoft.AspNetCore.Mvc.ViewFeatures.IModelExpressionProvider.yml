### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider
  id: IModelExpressionProvider
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  children:
  - Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  langs:
  - csharp
  - vb
  name: IModelExpressionProvider
  nameWithType: IModelExpressionProvider
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/IModelExpressionProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IModelExpressionProvider
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/IModelExpressionProvider.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nProvides <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression\" data-throw-if-not-resolved=\"false\"></xref> for a Lambda expression.\n"
  example: []
  syntax:
    content: public interface IModelExpressionProvider
    content.vb: Public Interface IModelExpressionProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: CreateModelExpression``2(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider
  langs:
  - csharp
  - vb
  name: CreateModelExpression<TModel, TValue>(ViewDataDictionary<TModel>, Expression<Func<TModel, TValue>>)
  nameWithType: IModelExpressionProvider.CreateModelExpression<TModel, TValue>(ViewDataDictionary<TModel>, Expression<Func<TModel, TValue>>)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression<TModel, TValue>(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>, System.Linq.Expressions.Expression<System.Func<TModel, TValue>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/IModelExpressionProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CreateModelExpression
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/IModelExpressionProvider.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression\" data-throw-if-not-resolved=\"false\"></xref> instance describing the given <em>expression</em>.\n"
  example: []
  syntax:
    content: ModelExpression CreateModelExpression<TModel, TValue>(ViewDataDictionary<TModel> viewData, Expression<Func<TModel, TValue>> expression)
    content.vb: Function CreateModelExpression(Of TModel, TValue)(viewData As ViewDataDictionary(Of TModel), expression As Expression(Of Func(Of TModel, TValue))) As ModelExpression
    parameters:
    - id: viewData
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{{TModel}}
      description: "The <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%601\" data-throw-if-not-resolved=\"false\"></xref> containing the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%601.Model\" data-throw-if-not-resolved=\"false\"></xref> \nagainst which <em>expression</em> is evaluated. "
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{TModel},{TValue}}}
      description: An expression to be evaluated against the current model.
    typeParameters:
    - id: TModel
      description: The type of the <em>viewData</em>'s <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%601.Model" data-throw-if-not-resolved="false"></xref>.
    - id: TValue
      description: The type of the <em>expression</em> result.
    return:
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression
      description: A new <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression" data-throw-if-not-resolved="false"></xref> instance describing the given <em>expression</em>.
  nameWithType.vb: IModelExpressionProvider.CreateModelExpression(Of TModel, TValue)(ViewDataDictionary(Of TModel), Expression(Of Func(Of TModel, TValue)))
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider.CreateModelExpression(Of TModel, TValue)(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(Of TModel), System.Linq.Expressions.Expression(Of System.Func(Of TModel, TValue)))
  name.vb: CreateModelExpression(Of TModel, TValue)(ViewDataDictionary(Of TModel), Expression(Of Func(Of TModel, TValue)))
references:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: ModelExpression
  nameWithType: ModelExpression
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures
  commentId: N:Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ViewFeatures
  nameWithType: Microsoft.AspNetCore.Mvc.ViewFeatures
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.Model
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1.Model
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
  isExternal: false
  name: ViewDataDictionary<TModel>
  nameWithType: ViewDataDictionary<TModel>
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>
  nameWithType.vb: ViewDataDictionary(Of TModel)
  fullname.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(Of TModel)
  name.vb: ViewDataDictionary(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{{TModel}}
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary{`0}
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  definition: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
  name: ViewDataDictionary<TModel>
  nameWithType: ViewDataDictionary<TModel>
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>
  nameWithType.vb: ViewDataDictionary(Of TModel)
  fullname.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(Of TModel)
  name.vb: ViewDataDictionary(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TModel},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TModel, TValue>>
  nameWithType: Expression<Func<TModel, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TModel, TValue>>
  nameWithType.vb: Expression(Of Func(Of TModel, TValue))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TModel, TValue))
  name.vb: Expression(Of Func(Of TModel, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
