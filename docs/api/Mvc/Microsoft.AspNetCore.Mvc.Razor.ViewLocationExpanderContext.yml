### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  id: ViewLocationExpanderContext
  parent: Microsoft.AspNetCore.Mvc.Razor
  children:
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.String,System.String,System.Boolean)
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ActionContext
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.AreaName
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ControllerName
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.IsMainPage
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.Values
  - Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ViewName
  langs:
  - csharp
  - vb
  name: ViewLocationExpanderContext
  nameWithType: ViewLocationExpanderContext
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewLocationExpanderContext
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nA context for containing information for <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class ViewLocationExpanderContext
    content.vb: Public Class ViewLocationExpanderContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.String,System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.String,System.String,System.Boolean)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ActionContext,System.String,System.String,System.String,System.Boolean)'
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: ViewLocationExpanderContext(ActionContext, String, String, String, Boolean)
  nameWithType: ViewLocationExpanderContext.ViewLocationExpanderContext(ActionContext, String, String, String, Boolean)
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ViewLocationExpanderContext(Microsoft.AspNetCore.Mvc.ActionContext, System.String, System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ViewLocationExpanderContext(ActionContext actionContext, string viewName, string controllerName, string areaName, bool isMainPage)
    content.vb: Public Sub New(actionContext As ActionContext, viewName As String, controllerName As String, areaName As String, isMainPage As Boolean)
    parameters:
    - id: actionContext
      type: Microsoft.AspNetCore.Mvc.ActionContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ActionContext" data-throw-if-not-resolved="false"></xref> for the current executing action.
    - id: viewName
      type: System.String
      description: The view name.
    - id: controllerName
      type: System.String
      description: The controller name.
    - id: areaName
      type: System.String
      description: The area name.
    - id: isMainPage
      type: System.Boolean
      description: Determines if the page being found is the main page for an action.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ActionContext
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ActionContext
  id: ActionContext
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: ActionContext
  nameWithType: ViewLocationExpanderContext.ActionContext
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ActionContext
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ActionContext
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ActionContext\" data-throw-if-not-resolved=\"false\"></xref> for the current executing action.\n"
  example: []
  syntax:
    content: public ActionContext ActionContext { get; }
    content.vb: Public ReadOnly Property ActionContext As ActionContext
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ActionContext
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ViewName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ViewName
  id: ViewName
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: ViewName
  nameWithType: ViewLocationExpanderContext.ViewName
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ViewName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewName
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 53
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the view name.\n"
  example: []
  syntax:
    content: public string ViewName { get; }
    content.vb: Public ReadOnly Property ViewName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ControllerName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ControllerName
  id: ControllerName
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: ControllerName
  nameWithType: ViewLocationExpanderContext.ControllerName
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.ControllerName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ControllerName
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the controller name.\n"
  example: []
  syntax:
    content: public string ControllerName { get; }
    content.vb: Public ReadOnly Property ControllerName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.AreaName
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.AreaName
  id: AreaName
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: AreaName
  nameWithType: ViewLocationExpanderContext.AreaName
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.AreaName
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AreaName
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets the area name.\n"
  example: []
  syntax:
    content: public string AreaName { get; }
    content.vb: Public ReadOnly Property AreaName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.IsMainPage
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.IsMainPage
  id: IsMainPage
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: IsMainPage
  nameWithType: ViewLocationExpanderContext.IsMainPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.IsMainPage
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsMainPage
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 68
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nDetermines if the page being found is the main page for an action.\n"
  example: []
  syntax:
    content: public bool IsMainPage { get; }
    content.vb: Public ReadOnly Property IsMainPage As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.Values
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.Values
  id: Values
  parent: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ViewLocationExpanderContext.Values
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext.Values
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Values
    path: src/Microsoft.AspNetCore.Mvc.Razor/ViewLocationExpanderContext.cs
    startLine: 74
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets or sets the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> that is populated with values as part of\n<xref href=\"Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IDictionary<string, string> Values { get; set; }
    content.vb: Public Property Values As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: IViewLocationExpander
  nameWithType: IViewLocationExpander
  fullName: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: ViewLocationExpanderContext
  nameWithType: ViewLocationExpanderContext
  fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
- uid: Microsoft.AspNetCore.Mvc.ActionContext
  commentId: T:Microsoft.AspNetCore.Mvc.ActionContext
  parent: Microsoft.AspNetCore.Mvc
  isExternal: false
  name: ActionContext
  nameWithType: ActionContext
  fullName: Microsoft.AspNetCore.Mvc.ActionContext
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Mvc
  commentId: N:Microsoft.AspNetCore.Mvc
  isExternal: false
  name: Microsoft.AspNetCore.Mvc
  nameWithType: Microsoft.AspNetCore.Mvc
  fullName: Microsoft.AspNetCore.Mvc
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
  parent: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander
  isExternal: false
  name: PopulateValues(ViewLocationExpanderContext)
  nameWithType: IViewLocationExpander.PopulateValues(ViewLocationExpanderContext)
  fullName: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
    name: PopulateValues
    nameWithType: IViewLocationExpander.PopulateValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
    name: ViewLocationExpanderContext
    nameWithType: ViewLocationExpanderContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues(Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext)
    name: PopulateValues
    nameWithType: IViewLocationExpander.PopulateValues
    fullName: Microsoft.AspNetCore.Mvc.Razor.IViewLocationExpander.PopulateValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
    name: ViewLocationExpanderContext
    nameWithType: ViewLocationExpanderContext
    fullName: Microsoft.AspNetCore.Mvc.Razor.ViewLocationExpanderContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
