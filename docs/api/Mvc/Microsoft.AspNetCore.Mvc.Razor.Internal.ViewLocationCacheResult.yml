### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  id: ViewLocationCacheResult
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem})
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.SearchedLocations
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewStartEntries
  langs:
  - csharp
  - vb
  name: ViewLocationCacheResult
  nameWithType: ViewLocationCacheResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewLocationCacheResult
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nResult of view location cache lookup.\n"
  example: []
  syntax:
    content: public class ViewLocationCacheResult
    content.vb: Public Class ViewLocationCacheResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem})
  id: '#ctor(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem})'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: ViewLocationCacheResult(ViewLocationCacheItem, IReadOnlyList<ViewLocationCacheItem>)
  nameWithType: ViewLocationCacheResult.ViewLocationCacheResult(ViewLocationCacheItem, IReadOnlyList<ViewLocationCacheItem>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewLocationCacheResult(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult\" data-throw-if-not-resolved=\"false\"></xref>\nfor a view that was successfully found at the specified location.\n"
  example: []
  syntax:
    content: public ViewLocationCacheResult(ViewLocationCacheItem view, IReadOnlyList<ViewLocationCacheItem> viewStarts)
    content.vb: Public Sub New(view As ViewLocationCacheItem, viewStarts As IReadOnlyList(Of ViewLocationCacheItem))
    parameters:
    - id: view
      type: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
      description: The <xref href="Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem" data-throw-if-not-resolved="false"></xref> for the found view.
    - id: viewStarts
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem}
      description: <xref href="Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem" data-throw-if-not-resolved="false"></xref>s for applicable _ViewStarts.
  nameWithType.vb: ViewLocationCacheResult.ViewLocationCacheResult(ViewLocationCacheItem, IReadOnlyList(Of ViewLocationCacheItem))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewLocationCacheResult(Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem))
  name.vb: ViewLocationCacheResult(ViewLocationCacheItem, IReadOnlyList(Of ViewLocationCacheItem))
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.#ctor(System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.String})'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: ViewLocationCacheResult(IEnumerable<String>)
  nameWithType: ViewLocationCacheResult.ViewLocationCacheResult(IEnumerable<String>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewLocationCacheResult(System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult\" data-throw-if-not-resolved=\"false\"></xref> for a\nfailed view lookup.\n"
  example: []
  syntax:
    content: public ViewLocationCacheResult(IEnumerable<string> searchedLocations)
    content.vb: Public Sub New(searchedLocations As IEnumerable(Of String))
    parameters:
    - id: searchedLocations
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Locations that were searched.
  nameWithType.vb: ViewLocationCacheResult.ViewLocationCacheResult(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewLocationCacheResult(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: ViewLocationCacheResult(IEnumerable(Of String))
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
  id: ViewEntry
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: ViewEntry
  nameWithType: ViewLocationCacheResult.ViewEntry
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewEntry
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\n<xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem\" data-throw-if-not-resolved=\"false\"></xref> for the located view.\n"
  remarks: <code>null</code> if <xref href="Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success" data-throw-if-not-resolved="false"></xref> is <code>false</code>.
  example: []
  syntax:
    content: public ViewLocationCacheItem ViewEntry { get; }
    content.vb: Public ReadOnly Property ViewEntry As ViewLocationCacheItem
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewStartEntries
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewStartEntries
  id: ViewStartEntries
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: ViewStartEntries
  nameWithType: ViewLocationCacheResult.ViewStartEntries
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewStartEntries
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewStartEntries
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\n<xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem\" data-throw-if-not-resolved=\"false\"></xref>s for applicable _ViewStarts.\n"
  remarks: <code>null</code> if <xref href="Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success" data-throw-if-not-resolved="false"></xref> is <code>false</code>.
  example: []
  syntax:
    content: public IReadOnlyList<ViewLocationCacheItem> ViewStartEntries { get; }
    content.vb: Public ReadOnly Property ViewStartEntries As IReadOnlyList(Of ViewLocationCacheItem)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.SearchedLocations
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.SearchedLocations
  id: SearchedLocations
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: SearchedLocations
  nameWithType: ViewLocationCacheResult.SearchedLocations
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.SearchedLocations
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SearchedLocations
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 68
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nThe sequence of locations that were searched.\n"
  remarks: "\nWhen <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success\" data-throw-if-not-resolved=\"false\"></xref> is <code>true</code> this includes all paths that were search prior to finding\na view at <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry\" data-throw-if-not-resolved=\"false\"></xref>. When <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success\" data-throw-if-not-resolved=\"false\"></xref> is <code>false</code>, this includes\nall search paths.\n"
  example: []
  syntax:
    content: public IEnumerable<string> SearchedLocations { get; }
    content.vb: Public ReadOnly Property SearchedLocations As IEnumerable(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
  id: Success
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: ViewLocationCacheResult.Success
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Success
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheResult.cs
    startLine: 73
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets a value that indicates whether the view was successfully found.\n"
  example: []
  syntax:
    content: public bool Success { get; }
    content.vb: Public ReadOnly Property Success As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Internal
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  isExternal: false
  name: ViewLocationCacheResult
  nameWithType: ViewLocationCacheResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: ViewLocationCacheItem
  nameWithType: ViewLocationCacheItem
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ViewLocationCacheItem>
  nameWithType: IReadOnlyList<ViewLocationCacheItem>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem>
  nameWithType.vb: IReadOnlyList(Of ViewLocationCacheItem)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem)
  name.vb: IReadOnlyList(Of ViewLocationCacheItem)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
    name: ViewLocationCacheItem
    nameWithType: ViewLocationCacheItem
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
    name: ViewLocationCacheItem
    nameWithType: ViewLocationCacheItem
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.Success
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult.ViewEntry
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
