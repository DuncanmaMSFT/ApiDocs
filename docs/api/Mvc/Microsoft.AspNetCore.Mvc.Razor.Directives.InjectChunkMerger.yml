### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  id: InjectChunkMerger
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.#ctor(System.String)
  - Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  - Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  langs:
  - csharp
  - vb
  name: InjectChunkMerger
  nameWithType: InjectChunkMerger
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: InjectChunkMerger
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nA <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger\" data-throw-if-not-resolved=\"false\"></xref> that merges <xref href=\"Microsoft.AspNetCore.Mvc.Razor.InjectChunk\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: 'public class InjectChunkMerger : IChunkMerger'
    content.vb: >-
      Public Class InjectChunkMerger
          Implements IChunkMerger
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  langs:
  - csharp
  - vb
  name: InjectChunkMerger(String)
  nameWithType: InjectChunkMerger.InjectChunkMerger(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.InjectChunkMerger(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public InjectChunkMerger(string modelType)
    content.vb: Public Sub New(modelType As String)
    parameters:
    - id: modelType
      type: System.String
      description: The model type to be used to replace &lt;TModel&gt; tokens.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  id: VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  langs:
  - csharp
  - vb
  name: VisitChunk(Chunk)
  nameWithType: InjectChunkMerger.VisitChunk(Chunk)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: VisitChunk
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  example: []
  syntax:
    content: public void VisitChunk(Chunk chunk)
    content.vb: Public Sub VisitChunk(chunk As Chunk)
    parameters:
    - id: chunk
      type: Microsoft.AspNetCore.Razor.Chunks.Chunk
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  id: MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  langs:
  - csharp
  - vb
  name: MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  nameWithType: InjectChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.Chunk>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MergeInheritedChunks
    path: src/Microsoft.AspNetCore.Mvc.Razor.Host/Directives/InjectChunkMerger.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor.Host
  namespace: Microsoft.AspNetCore.Mvc.Razor.Directives
  example: []
  syntax:
    content: public void MergeInheritedChunks(ChunkTree chunkTree, IReadOnlyList<Chunk> inheritedChunks)
    content.vb: Public Sub MergeInheritedChunks(chunkTree As ChunkTree, inheritedChunks As IReadOnlyList(Of Chunk))
    parameters:
    - id: chunkTree
      type: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    - id: inheritedChunks
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  nameWithType.vb: InjectChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.Chunk))
  name.vb: MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: IChunkMerger
  nameWithType: IChunkMerger
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
- uid: Microsoft.AspNetCore.Mvc.Razor.InjectChunk
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.InjectChunk
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: InjectChunk
  nameWithType: InjectChunk
  fullName: Microsoft.AspNetCore.Mvc.Razor.InjectChunk
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Directives
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Directives
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Directives
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
  isExternal: false
  name: InjectChunkMerger
  nameWithType: InjectChunkMerger
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.InjectChunkMerger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  isExternal: true
  name: VisitChunk(Chunk)
  nameWithType: IChunkMerger.VisitChunk(Chunk)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
    name: VisitChunk
    nameWithType: IChunkMerger.VisitChunk
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk(Microsoft.AspNetCore.Razor.Chunks.Chunk)
    name: VisitChunk
    nameWithType: IChunkMerger.VisitChunk
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.VisitChunk
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.Chunk
  parent: Microsoft.AspNetCore.Razor.Chunks
  isExternal: true
  name: Chunk
  nameWithType: Chunk
  fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
- uid: Microsoft.AspNetCore.Razor.Chunks
  commentId: N:Microsoft.AspNetCore.Razor.Chunks
  isExternal: false
  name: Microsoft.AspNetCore.Razor.Chunks
  nameWithType: Microsoft.AspNetCore.Razor.Chunks
  fullName: Microsoft.AspNetCore.Razor.Chunks
- uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
  parent: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger
  isExternal: true
  name: MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  nameWithType: IChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList<Chunk>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.Chunk>)
  nameWithType.vb: IChunkMerger.MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  fullname.vb: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.Chunk))
  name.vb: MergeInheritedChunks(ChunkTree, IReadOnlyList(Of Chunk))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
    name: MergeInheritedChunks
    nameWithType: IChunkMerger.MergeInheritedChunks
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks(Microsoft.AspNetCore.Razor.Chunks.ChunkTree,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk})
    name: MergeInheritedChunks
    nameWithType: IChunkMerger.MergeInheritedChunks
    fullName: Microsoft.AspNetCore.Mvc.Razor.Directives.IChunkMerger.MergeInheritedChunks
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    name: ChunkTree
    nameWithType: ChunkTree
    fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
  commentId: T:Microsoft.AspNetCore.Razor.Chunks.ChunkTree
  parent: Microsoft.AspNetCore.Razor.Chunks
  isExternal: true
  name: ChunkTree
  nameWithType: ChunkTree
  fullName: Microsoft.AspNetCore.Razor.Chunks.ChunkTree
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Razor.Chunks.Chunk}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Chunk>
  nameWithType: IReadOnlyList<Chunk>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Razor.Chunks.Chunk>
  nameWithType.vb: IReadOnlyList(Of Chunk)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Razor.Chunks.Chunk)
  name.vb: IReadOnlyList(Of Chunk)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Razor.Chunks.Chunk
    name: Chunk
    nameWithType: Chunk
    fullName: Microsoft.AspNetCore.Razor.Chunks.Chunk
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
