### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder
  commentId: T:Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder
  id: IControllerArgumentBinder
  parent: Microsoft.AspNetCore.Mvc.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder.BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: IControllerArgumentBinder
  nameWithType: IControllerArgumentBinder
  fullName: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Internal/IControllerArgumentBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IControllerArgumentBinder
    path: src/Microsoft.AspNetCore.Mvc.Core/Internal/IControllerArgumentBinder.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Internal
  summary: "\nProvides a dictionary of action arguments.\n"
  example: []
  syntax:
    content: public interface IControllerArgumentBinder
    content.vb: Public Interface IControllerArgumentBinder
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder.BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder.BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder
  langs:
  - csharp
  - vb
  name: BindArgumentsAsync(ControllerContext, Object, IDictionary<String, Object>)
  nameWithType: IControllerArgumentBinder.BindArgumentsAsync(ControllerContext, Object, IDictionary<String, Object>)
  fullName: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder.BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/Internal/IControllerArgumentBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindArgumentsAsync
    path: src/Microsoft.AspNetCore.Mvc.Core/Internal/IControllerArgumentBinder.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.Internal
  summary: "\nAsyncronously binds a dictionary of the parameter-argument name-value pairs,\nwhich can be used to invoke the action. Also binds properties explicitly marked properties on the \n<em>controller</em>.\n"
  example: []
  syntax:
    content: Task BindArgumentsAsync(ControllerContext controllerContext, object controller, IDictionary<string, object> arguments)
    content.vb: Function BindArgumentsAsync(controllerContext As ControllerContext, controller As Object, arguments As IDictionary(Of String, Object)) As Task
    parameters:
    - id: controllerContext
      type: Microsoft.AspNetCore.Mvc.ControllerContext
      description: The <xref href="Microsoft.AspNetCore.Mvc.ControllerContext" data-throw-if-not-resolved="false"></xref> associated with the current action.
    - id: controller
      type: System.Object
      description: The controller object which contains the action.
    - id: arguments
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: The arguments dictionary.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> which, when completed signals the completion of argument binding.
  nameWithType.vb: IControllerArgumentBinder.BindArgumentsAsync(ControllerContext, Object, IDictionary(Of String, Object))
  fullName.vb: Microsoft.AspNetCore.Mvc.Internal.IControllerArgumentBinder.BindArgumentsAsync(Microsoft.AspNetCore.Mvc.ControllerContext, System.Object, System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: BindArgumentsAsync(ControllerContext, Object, IDictionary(Of String, Object))
references:
- uid: Microsoft.AspNetCore.Mvc.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Internal
  fullName: Microsoft.AspNetCore.Mvc.Internal
- uid: Microsoft.AspNetCore.Mvc.ControllerContext
  commentId: T:Microsoft.AspNetCore.Mvc.ControllerContext
  parent: Microsoft.AspNetCore.Mvc
  isExternal: false
  name: ControllerContext
  nameWithType: ControllerContext
  fullName: Microsoft.AspNetCore.Mvc.ControllerContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc
  commentId: N:Microsoft.AspNetCore.Mvc
  isExternal: false
  name: Microsoft.AspNetCore.Mvc
  nameWithType: Microsoft.AspNetCore.Mvc
  fullName: Microsoft.AspNetCore.Mvc
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
