### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  id: JsonArrayPool`1
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(System.Buffers.ArrayPool{`0})
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  - Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  langs:
  - csharp
  - vb
  name: JsonArrayPool<T>
  nameWithType: JsonArrayPool<T>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: JsonArrayPool
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 9
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: 'public class JsonArrayPool<T> : IArrayPool<T>'
    content.vb: >-
      Public Class JsonArrayPool(Of T)
          Implements IArrayPool(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - Newtonsoft.Json.IArrayPool{{T}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: JsonArrayPool(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T)
  name.vb: JsonArrayPool(Of T)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(System.Buffers.ArrayPool{`0})
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.#ctor(System.Buffers.ArrayPool{`0})
  id: '#ctor(System.Buffers.ArrayPool{`0})'
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: JsonArrayPool(ArrayPool<T>)
  nameWithType: JsonArrayPool<T>.JsonArrayPool(ArrayPool<T>)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.JsonArrayPool(System.Buffers.ArrayPool<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public JsonArrayPool(ArrayPool<T> inner)
    content.vb: Public Sub New(inner As ArrayPool(Of T))
    parameters:
    - id: inner
      type: System.Buffers.ArrayPool{{T}}
  nameWithType.vb: JsonArrayPool(Of T).JsonArrayPool(ArrayPool(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).JsonArrayPool(System.Buffers.ArrayPool(Of T))
  name.vb: JsonArrayPool(ArrayPool(Of T))
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Rent(System.Int32)
  id: Rent(System.Int32)
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: Rent(Int32)
  nameWithType: JsonArrayPool<T>.Rent(Int32)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Rent(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Rent
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public T[] Rent(int minimumLength)
    content.vb: Public Function Rent(minimumLength As Integer) As T()
    parameters:
    - id: minimumLength
      type: System.Int32
    return:
      type: '{T}[]'
  implements:
  - Newtonsoft.Json.IArrayPool{{T}}.Rent(System.Int32)
  nameWithType.vb: JsonArrayPool(Of T).Rent(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Rent(System.Int32)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1.Return(`0[])
  id: Return(`0[])
  parent: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool`1
  langs:
  - csharp
  - vb
  name: Return(T[])
  nameWithType: JsonArrayPool<T>.Return(T[])
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool<T>.Return(T[])
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Return
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Json/Internal/JsonArrayPool.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Json
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  syntax:
    content: public void Return(T[] array)
    content.vb: Public Sub Return(array As T())
    parameters:
    - id: array
      type: '{T}[]'
  implements:
  - Newtonsoft.Json.IArrayPool{{T}}.Return({T}[])
  nameWithType.vb: JsonArrayPool(Of T).Return(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal.JsonArrayPool(Of T).Return(T())
  name.vb: Return(T())
references:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Json.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Newtonsoft.Json.IArrayPool{{T}}
  commentId: T:Newtonsoft.Json.IArrayPool{`0}
  parent: Newtonsoft.Json
  definition: Newtonsoft.Json.IArrayPool`1
  name: IArrayPool<T>
  nameWithType: IArrayPool<T>
  fullName: Newtonsoft.Json.IArrayPool<T>
  nameWithType.vb: IArrayPool(Of T)
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T)
  name.vb: IArrayPool(Of T)
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1
    name: IArrayPool
    nameWithType: IArrayPool
    fullName: Newtonsoft.Json.IArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1
    name: IArrayPool
    nameWithType: IArrayPool
    fullName: Newtonsoft.Json.IArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Newtonsoft.Json.IArrayPool`1
  commentId: T:Newtonsoft.Json.IArrayPool`1
  isExternal: true
  name: IArrayPool<T>
  nameWithType: IArrayPool<T>
  fullName: Newtonsoft.Json.IArrayPool<T>
  nameWithType.vb: IArrayPool(Of T)
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T)
  name.vb: IArrayPool(Of T)
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1
    name: IArrayPool
    nameWithType: IArrayPool
    fullName: Newtonsoft.Json.IArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1
    name: IArrayPool
    nameWithType: IArrayPool
    fullName: Newtonsoft.Json.IArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json
  commentId: N:Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  nameWithType: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: System.Buffers.ArrayPool{{T}}
  commentId: T:System.Buffers.ArrayPool{`0}
  parent: System.Buffers
  definition: System.Buffers.ArrayPool`1
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>
  fullName: System.Buffers.ArrayPool<T>
  nameWithType.vb: ArrayPool(Of T)
  fullname.vb: System.Buffers.ArrayPool(Of T)
  name.vb: ArrayPool(Of T)
  spec.csharp:
  - uid: System.Buffers.ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: System.Buffers.ArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Buffers.ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: System.Buffers.ArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Buffers.ArrayPool`1
  commentId: T:System.Buffers.ArrayPool`1
  isExternal: true
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>
  fullName: System.Buffers.ArrayPool<T>
  nameWithType.vb: ArrayPool(Of T)
  fullname.vb: System.Buffers.ArrayPool(Of T)
  name.vb: ArrayPool(Of T)
  spec.csharp:
  - uid: System.Buffers.ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: System.Buffers.ArrayPool
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Buffers.ArrayPool`1
    name: ArrayPool
    nameWithType: ArrayPool
    fullName: System.Buffers.ArrayPool
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Buffers
  commentId: N:System.Buffers
  isExternal: false
  name: System.Buffers
  nameWithType: System.Buffers
  fullName: System.Buffers
- uid: Newtonsoft.Json.IArrayPool{{T}}.Rent(System.Int32)
  commentId: M:Newtonsoft.Json.IArrayPool{`0}.Rent(System.Int32)
  parent: Newtonsoft.Json.IArrayPool{{T}}
  definition: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
  name: Rent(Int32)
  nameWithType: IArrayPool<T>.Rent(Int32)
  fullName: Newtonsoft.Json.IArrayPool<T>.Rent(System.Int32)
  nameWithType.vb: IArrayPool(Of T).Rent(Int32)
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T).Rent(System.Int32)
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
    name: Rent
    nameWithType: IArrayPool<T>.Rent
    fullName: Newtonsoft.Json.IArrayPool<T>.Rent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
    name: Rent
    nameWithType: IArrayPool(Of T).Rent
    fullName: Newtonsoft.Json.IArrayPool(Of T).Rent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
  commentId: M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
  isExternal: true
  name: Rent(Int32)
  nameWithType: IArrayPool<T>.Rent(Int32)
  fullName: Newtonsoft.Json.IArrayPool<T>.Rent(System.Int32)
  nameWithType.vb: IArrayPool(Of T).Rent(Int32)
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T).Rent(System.Int32)
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
    name: Rent
    nameWithType: IArrayPool<T>.Rent
    fullName: Newtonsoft.Json.IArrayPool<T>.Rent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)
    name: Rent
    nameWithType: IArrayPool(Of T).Rent
    fullName: Newtonsoft.Json.IArrayPool(Of T).Rent
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.IArrayPool{{T}}.Return({T}[])
  commentId: M:Newtonsoft.Json.IArrayPool{`0}.Return(`0[])
  parent: Newtonsoft.Json.IArrayPool{{T}}
  definition: Newtonsoft.Json.IArrayPool`1.Return(`0[])
  name: Return(T[])
  nameWithType: IArrayPool<T>.Return(T[])
  fullName: Newtonsoft.Json.IArrayPool<T>.Return(T[])
  nameWithType.vb: IArrayPool(Of T).Return(T())
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T).Return(T())
  name.vb: Return(T())
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1.Return(`0[])
    name: Return
    nameWithType: IArrayPool<T>.Return
    fullName: Newtonsoft.Json.IArrayPool<T>.Return
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1.Return(`0[])
    name: Return
    nameWithType: IArrayPool(Of T).Return
    fullName: Newtonsoft.Json.IArrayPool(Of T).Return
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Newtonsoft.Json.IArrayPool`1.Return(`0[])
  commentId: M:Newtonsoft.Json.IArrayPool`1.Return(`0[])
  isExternal: true
  name: Return(T[])
  nameWithType: IArrayPool<T>.Return(T[])
  fullName: Newtonsoft.Json.IArrayPool<T>.Return(T[])
  nameWithType.vb: IArrayPool(Of T).Return(T())
  fullname.vb: Newtonsoft.Json.IArrayPool(Of T).Return(T())
  name.vb: Return(T())
  spec.csharp:
  - uid: Newtonsoft.Json.IArrayPool`1.Return(`0[])
    name: Return
    nameWithType: IArrayPool<T>.Return
    fullName: Newtonsoft.Json.IArrayPool<T>.Return
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.IArrayPool`1.Return(`0[])
    name: Return
    nameWithType: IArrayPool(Of T).Return
    fullName: Newtonsoft.Json.IArrayPool(Of T).Return
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
