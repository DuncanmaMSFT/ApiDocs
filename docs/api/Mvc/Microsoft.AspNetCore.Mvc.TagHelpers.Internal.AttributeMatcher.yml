### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher
  commentId: T:Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher
  id: AttributeMatcher
  parent: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  children:
  - Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode``1(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}},System.Func{``0,``0,System.Int32},``0@)
  langs:
  - csharp
  - vb
  name: AttributeMatcher
  nameWithType: AttributeMatcher
  fullName: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.TagHelpers/Internal/AttributeMatcher.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AttributeMatcher
    path: src/Microsoft.AspNetCore.Mvc.TagHelpers/Internal/AttributeMatcher.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Mvc.TagHelpers
  namespace: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  summary: "\nMethods for determining how an <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" data-throw-if-not-resolved=\"false\"></xref> should run based on the attributes that were specified.\n"
  example: []
  syntax:
    content: public static class AttributeMatcher
    content.vb: Public Module AttributeMatcher
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode``1(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}},System.Func{``0,``0,System.Int32},``0@)
  commentId: M:Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode``1(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}},System.Func{``0,``0,System.Int32},``0@)
  id: TryDetermineMode``1(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}},System.Func{``0,``0,System.Int32},``0@)
  parent: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher
  langs:
  - csharp
  - vb
  name: TryDetermineMode<TMode>(TagHelperContext, IReadOnlyList<ModeAttributes<TMode>>, Func<TMode, TMode, Int32>, out TMode)
  nameWithType: AttributeMatcher.TryDetermineMode<TMode>(TagHelperContext, IReadOnlyList<ModeAttributes<TMode>>, Func<TMode, TMode, Int32>, out TMode)
  fullName: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode<TMode>(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes<TMode>>, System.Func<TMode, TMode, System.Int32>, out TMode)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.TagHelpers/Internal/AttributeMatcher.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: TryDetermineMode
    path: src/Microsoft.AspNetCore.Mvc.TagHelpers/Internal/AttributeMatcher.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Mvc.TagHelpers
  namespace: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  summary: "\nDetermines the most effective mode a <xref href=\"Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" data-throw-if-not-resolved=\"false\"></xref> can run in based on which modes have\nall their required attributes present.\n"
  example: []
  syntax:
    content: public static bool TryDetermineMode<TMode>(TagHelperContext context, IReadOnlyList<ModeAttributes<TMode>> modeInfos, Func<TMode, TMode, int> compare, out TMode result)
    content.vb: Public Shared Function TryDetermineMode(Of TMode)(context As TagHelperContext, modeInfos As IReadOnlyList(Of ModeAttributes(Of TMode)), compare As Func(Of TMode, TMode, Integer), ByRef result As TMode) As Boolean
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
      description: The <xref href="Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext" data-throw-if-not-resolved="false"></xref>.
    - id: modeInfos
      type: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{{TMode}}}
      description: The modes and their required attributes.
    - id: compare
      type: System.Func{{TMode},{TMode},System.Int32}
      description: A comparer delegate.
    - id: result
      type: '{TMode}'
      description: The resulting most effective mode.
    typeParameters:
    - id: TMode
      description: The type representing the <xref href="Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper" data-throw-if-not-resolved="false"></xref>'s modes.
    return:
      type: System.Boolean
      description: <code>true</code> if a mode was determined, otherwise <code>false</code>.
  nameWithType.vb: AttributeMatcher.TryDetermineMode(Of TMode)(TagHelperContext, IReadOnlyList(Of ModeAttributes(Of TMode)), Func(Of TMode, TMode, Int32), ByRef TMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.AttributeMatcher.TryDetermineMode(Of TMode)(Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext, System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes(Of TMode)), System.Func(Of TMode, TMode, System.Int32), ByRef TMode)
  name.vb: TryDetermineMode(Of TMode)(TagHelperContext, IReadOnlyList(Of ModeAttributes(Of TMode)), Func(Of TMode, TMode, Int32), ByRef TMode)
references:
- uid: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: true
  name: ITagHelper
  nameWithType: ITagHelper
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper
- uid: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
  fullName: Microsoft.AspNetCore.Mvc.TagHelpers.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Razor.TagHelpers
  commentId: N:Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: false
  name: Microsoft.AspNetCore.Razor.TagHelpers
  nameWithType: Microsoft.AspNetCore.Razor.TagHelpers
  fullName: Microsoft.AspNetCore.Razor.TagHelpers
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  commentId: T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
  parent: Microsoft.AspNetCore.Razor.TagHelpers
  isExternal: true
  name: TagHelperContext
  nameWithType: TagHelperContext
  fullName: Microsoft.AspNetCore.Razor.TagHelpers.TagHelperContext
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{{TMode}}}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ModeAttributes<TMode>>
  nameWithType: IReadOnlyList<ModeAttributes<TMode>>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes<TMode>>
  nameWithType.vb: IReadOnlyList(Of ModeAttributes(Of TMode))
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes(Of TMode))
  name.vb: IReadOnlyList(Of ModeAttributes(Of TMode))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes`1
    name: ModeAttributes
    nameWithType: ModeAttributes
    fullName: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes
  - name: <
    nameWithType: <
    fullName: <
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes`1
    name: ModeAttributes
    nameWithType: ModeAttributes
    fullName: Microsoft.AspNetCore.Mvc.TagHelpers.Internal.ModeAttributes
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TMode},{TMode},System.Int32}
  commentId: T:System.Func{``0,``0,System.Int32}
  parent: System
  definition: System.Func`3
  name: Func<TMode, TMode, Int32>
  nameWithType: Func<TMode, TMode, Int32>
  fullName: System.Func<TMode, TMode, System.Int32>
  nameWithType.vb: Func(Of TMode, TMode, Int32)
  fullname.vb: System.Func(Of TMode, TMode, System.Int32)
  name.vb: Func(Of TMode, TMode, Int32)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMode
    nameWithType: TMode
    fullName: TMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TMode}'
  commentId: '!:TMode'
  definition: TMode
  name: TMode
  nameWithType: TMode
  fullName: TMode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TMode
  isExternal: false
  name: TMode
  nameWithType: TMode
  fullName: TMode
