### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  id: IModelBindingMessageProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.AttemptedValueIsInvalidAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingBindRequiredValueAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingKeyOrValueAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.UnknownValueIsInvalidAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueIsInvalidAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustBeANumberAccessor
  - Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustNotBeNullAccessor
  langs:
  - csharp
  - vb
  name: IModelBindingMessageProvider
  nameWithType: IModelBindingMessageProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IModelBindingMessageProvider
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nProvider for error messages the model binding system detects.\n"
  example: []
  syntax:
    content: public interface IModelBindingMessageProvider
    content.vb: Public Interface IModelBindingMessageProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingBindRequiredValueAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingBindRequiredValueAccessor
  id: MissingBindRequiredValueAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: MissingBindRequiredValueAccessor
  nameWithType: IModelBindingMessageProvider.MissingBindRequiredValueAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingBindRequiredValueAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MissingBindRequiredValueAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message the model binding system adds when a property with an associated\n<code>BindRequiredAttribute</code> is not bound.\n"
  example: []
  syntax:
    content: Func<string, string> MissingBindRequiredValueAccessor { get; }
    content.vb: ReadOnly Property MissingBindRequiredValueAccessor As Func(Of String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "A value for the '{0}' property was not provided.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingKeyOrValueAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingKeyOrValueAccessor
  id: MissingKeyOrValueAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: MissingKeyOrValueAccessor
  nameWithType: IModelBindingMessageProvider.MissingKeyOrValueAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.MissingKeyOrValueAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MissingKeyOrValueAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message the model binding system adds when either the key or the value of a\n<xref href=\"System.Collections.Generic.KeyValuePair%602\" data-throw-if-not-resolved=\"false\"></xref> is bound but not both.\n"
  example: []
  syntax:
    content: Func<string> MissingKeyOrValueAccessor { get; }
    content.vb: ReadOnly Property MissingKeyOrValueAccessor As Func(Of String)
    parameters: []
    return:
      type: System.Func{System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "A value is required.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustNotBeNullAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustNotBeNullAccessor
  id: ValueMustNotBeNullAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: ValueMustNotBeNullAccessor
  nameWithType: IModelBindingMessageProvider.ValueMustNotBeNullAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustNotBeNullAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValueMustNotBeNullAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message the model binding system adds when a <code>null</code> value is bound to a\nnon-<xref href=\"System.Nullable\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  example: []
  syntax:
    content: Func<string, string> ValueMustNotBeNullAccessor { get; }
    content.vb: ReadOnly Property ValueMustNotBeNullAccessor As Func(Of String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "The value '{0}' is invalid.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.AttemptedValueIsInvalidAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.AttemptedValueIsInvalidAccessor
  id: AttemptedValueIsInvalidAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: AttemptedValueIsInvalidAccessor
  nameWithType: IModelBindingMessageProvider.AttemptedValueIsInvalidAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.AttemptedValueIsInvalidAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: AttemptedValueIsInvalidAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message the model binding system adds when <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.Exception\" data-throw-if-not-resolved=\"false\"></xref> is of type\n<xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> and value is known.\n"
  example: []
  syntax:
    content: Func<string, string, string> AttemptedValueIsInvalidAccessor { get; }
    content.vb: ReadOnly Property AttemptedValueIsInvalidAccessor As Func(Of String, String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "The value '{0}' is not valid for {1}.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.UnknownValueIsInvalidAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.UnknownValueIsInvalidAccessor
  id: UnknownValueIsInvalidAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: UnknownValueIsInvalidAccessor
  nameWithType: IModelBindingMessageProvider.UnknownValueIsInvalidAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.UnknownValueIsInvalidAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: UnknownValueIsInvalidAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 45
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message the model binding system adds when <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.Exception\" data-throw-if-not-resolved=\"false\"></xref> is of type\n<xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref> and value is unknown.\n"
  example: []
  syntax:
    content: Func<string, string> UnknownValueIsInvalidAccessor { get; }
    content.vb: ReadOnly Property UnknownValueIsInvalidAccessor As Func(Of String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "The supplied value is invalid for {0}.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueIsInvalidAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueIsInvalidAccessor
  id: ValueIsInvalidAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: ValueIsInvalidAccessor
  nameWithType: IModelBindingMessageProvider.ValueIsInvalidAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueIsInvalidAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValueIsInvalidAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nFallback error message HTML and tag helpers display when a property is invalid but the\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelError\" data-throw-if-not-resolved=\"false\"></xref>s have <code>null</code> <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.ErrorMessage\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  example: []
  syntax:
    content: Func<string, string> ValueIsInvalidAccessor { get; }
    content.vb: ReadOnly Property ValueIsInvalidAccessor As Func(Of String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "The value '{0}' is invalid.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustBeANumberAccessor
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustBeANumberAccessor
  id: ValueMustBeANumberAccessor
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider
  langs:
  - csharp
  - vb
  name: ValueMustBeANumberAccessor
  nameWithType: IModelBindingMessageProvider.ValueMustBeANumberAccessor
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IModelBindingMessageProvider.ValueMustBeANumberAccessor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ValueMustBeANumberAccessor
    path: src/Microsoft.AspNetCore.Mvc.Abstractions/ModelBinding/Metadata/IModelBindingMessageProvider.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Mvc.Abstractions
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  summary: "\nError message HTML and tag helpers add for client-side validation of numeric formats. Visible in the\nbrowser if the field for a <code>float</code> property (for example) does not have a correctly-formatted value.\n"
  example: []
  syntax:
    content: Func<string, string> ValueMustBeANumberAccessor { get; }
    content.vb: ReadOnly Property ValueMustBeANumberAccessor As Func(Of String, String)
    parameters: []
    return:
      type: System.Func{System.String,System.String}
      description: Default <xref href="System.String" data-throw-if-not-resolved="false"></xref> is "The field {0} must be a number.".
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Metadata
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,System.String}
  commentId: T:System.Func{System.String,System.String}
  parent: System
  definition: System.Func`2
  name: Func<String, String>
  nameWithType: Func<String, String>
  fullName: System.Func<System.String, System.String>
  nameWithType.vb: Func(Of String, String)
  fullname.vb: System.Func(Of System.String, System.String)
  name.vb: Func(Of String, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullname.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable
  commentId: T:System.Nullable
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.Exception
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.Exception
- uid: System.FormatException
  commentId: T:System.FormatException
- uid: System.OverflowException
  commentId: T:System.OverflowException
- uid: System.Func{System.String,System.String,System.String}
  commentId: T:System.Func{System.String,System.String,System.String}
  parent: System
  definition: System.Func`3
  name: Func<String, String, String>
  nameWithType: Func<String, String, String>
  fullName: System.Func<System.String, System.String, System.String>
  nameWithType.vb: Func(Of String, String, String)
  fullname.vb: System.Func(Of System.String, System.String, System.String)
  name.vb: Func(Of String, String, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelError
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelError
  nameWithType: ModelError
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelError
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.ErrorMessage
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelError.ErrorMessage
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
