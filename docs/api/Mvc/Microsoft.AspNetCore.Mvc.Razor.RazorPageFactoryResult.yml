### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  id: RazorPageFactoryResult
  parent: Microsoft.AspNetCore.Mvc.Razor
  children:
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.ExpirationTokens
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactory
  - Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
  langs:
  - csharp
  - vb
  name: RazorPageFactoryResult
  nameWithType: RazorPageFactoryResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: RazorPageFactoryResult
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nResult of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public struct RazorPageFactoryResult
    content.vb: Public Structure RazorPageFactoryResult
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  id: '#ctor(System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})'
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  langs:
  - csharp
  - vb
  name: RazorPageFactoryResult(IList<IChangeToken>)
  nameWithType: RazorPageFactoryResult.RazorPageFactoryResult(IList<IChangeToken>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactoryResult(System.Collections.Generic.IList<Microsoft.Extensions.Primitives.IChangeToken>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult\" data-throw-if-not-resolved=\"false\"></xref> with the\nspecified <em>expirationTokens</em>.\n"
  example: []
  syntax:
    content: public RazorPageFactoryResult(IList<IChangeToken> expirationTokens)
    content.vb: Public Sub New(expirationTokens As IList(Of IChangeToken))
    parameters:
    - id: expirationTokens
      type: System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken}
      description: One or more <xref href="Microsoft.Extensions.Primitives.IChangeToken" data-throw-if-not-resolved="false"></xref> instances.
  nameWithType.vb: RazorPageFactoryResult.RazorPageFactoryResult(IList(Of IChangeToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactoryResult(System.Collections.Generic.IList(Of Microsoft.Extensions.Primitives.IChangeToken))
  name.vb: RazorPageFactoryResult(IList(Of IChangeToken))
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})
  id: '#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken})'
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  langs:
  - csharp
  - vb
  name: RazorPageFactoryResult(Func<IRazorPage>, IList<IChangeToken>)
  nameWithType: RazorPageFactoryResult.RazorPageFactoryResult(Func<IRazorPage>, IList<IChangeToken>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactoryResult(System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>, System.Collections.Generic.IList<Microsoft.Extensions.Primitives.IChangeToken>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult\" data-throw-if-not-resolved=\"false\"></xref> with the\nspecified <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IRazorPage\" data-throw-if-not-resolved=\"false\"></xref> factory.\n"
  example: []
  syntax:
    content: public RazorPageFactoryResult(Func<IRazorPage> razorPageFactory, IList<IChangeToken> expirationTokens)
    content.vb: Public Sub New(razorPageFactory As Func(Of IRazorPage), expirationTokens As IList(Of IChangeToken))
    parameters:
    - id: razorPageFactory
      type: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
      description: The <xref href="Microsoft.AspNetCore.Mvc.Razor.IRazorPage" data-throw-if-not-resolved="false"></xref> factory.
    - id: expirationTokens
      type: System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken}
      description: One or more <xref href="Microsoft.Extensions.Primitives.IChangeToken" data-throw-if-not-resolved="false"></xref> instances.
  nameWithType.vb: RazorPageFactoryResult.RazorPageFactoryResult(Func(Of IRazorPage), IList(Of IChangeToken))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactoryResult(System.Func(Of Microsoft.AspNetCore.Mvc.Razor.IRazorPage), System.Collections.Generic.IList(Of Microsoft.Extensions.Primitives.IChangeToken))
  name.vb: RazorPageFactoryResult(Func(Of IRazorPage), IList(Of IChangeToken))
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactory
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactory
  id: RazorPageFactory
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  langs:
  - csharp
  - vb
  name: RazorPageFactory
  nameWithType: RazorPageFactoryResult.RazorPageFactory
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.RazorPageFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: RazorPageFactory
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nThe <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IRazorPage\" data-throw-if-not-resolved=\"false\"></xref> factory.\n"
  remarks: This property is <code>null</code> when <xref href="Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success" data-throw-if-not-resolved="false"></xref> is <code>false</code>.
  example: []
  syntax:
    content: public Func<IRazorPage> RazorPageFactory { get; }
    content.vb: Public ReadOnly Property RazorPageFactory As Func(Of IRazorPage)
    parameters: []
    return:
      type: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.ExpirationTokens
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.ExpirationTokens
  id: ExpirationTokens
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  langs:
  - csharp
  - vb
  name: ExpirationTokens
  nameWithType: RazorPageFactoryResult.ExpirationTokens
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.ExpirationTokens
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ExpirationTokens
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nOne or more <xref href=\"Microsoft.Extensions.Primitives.IChangeToken\" data-throw-if-not-resolved=\"false\"></xref>s associated with this instance of\n<xref href=\"Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IList<IChangeToken> ExpirationTokens { get; }
    content.vb: Public ReadOnly Property ExpirationTokens As IList(Of IChangeToken)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
  id: Success
  parent: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: RazorPageFactoryResult.Success
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Success
    path: src/Microsoft.AspNetCore.Mvc.Razor/RazorPageFactoryResult.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor
  summary: "\nGets a value that determines if the page was successfully located.\n"
  example: []
  syntax:
    content: public bool Success { get; }
    content.vb: Public ReadOnly Property Success As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
  parent: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider
  isExternal: true
  name: CreateFactory(String)
  nameWithType: IRazorPageFactoryProvider.CreateFactory(String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
    name: CreateFactory
    nameWithType: IRazorPageFactoryProvider.CreateFactory
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory(System.String)
    name: CreateFactory
    nameWithType: IRazorPageFactoryProvider.CreateFactory
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider.CreateFactory
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: IRazorPageFactoryProvider
  nameWithType: IRazorPageFactoryProvider
  fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPageFactoryProvider
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: RazorPageFactoryResult
  nameWithType: RazorPageFactoryResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
- uid: System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken}
  commentId: T:System.Collections.Generic.IList{Microsoft.Extensions.Primitives.IChangeToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<IChangeToken>
  nameWithType: IList<IChangeToken>
  fullName: System.Collections.Generic.IList<Microsoft.Extensions.Primitives.IChangeToken>
  nameWithType.vb: IList(Of IChangeToken)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Extensions.Primitives.IChangeToken)
  name.vb: IList(Of IChangeToken)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Primitives.IChangeToken
    name: IChangeToken
    nameWithType: IChangeToken
    fullName: Microsoft.Extensions.Primitives.IChangeToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Primitives.IChangeToken
    name: IChangeToken
    nameWithType: IChangeToken
    fullName: Microsoft.Extensions.Primitives.IChangeToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: IRazorPage
  nameWithType: IRazorPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
- uid: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  commentId: T:System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  parent: System
  definition: System.Func`1
  name: Func<IRazorPage>
  nameWithType: Func<IRazorPage>
  fullName: System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>
  nameWithType.vb: Func(Of IRazorPage)
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Mvc.Razor.IRazorPage)
  name.vb: Func(Of IRazorPage)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
    name: IRazorPage
    nameWithType: IRazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
    name: IRazorPage
    nameWithType: IRazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.RazorPageFactoryResult.Success
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
