### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  id: ViewDataDictionary
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  children:
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Type)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Type)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.String,System.Object)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Clear
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ContainsKey(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Count
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String,System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.FormatValue(System.Object,System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.GetViewDataInfo(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.IsReadOnly
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Item(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Keys
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelState
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.String)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TemplateInfo
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String,System.Object@)
  - Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Values
  langs:
  - csharp
  - vb
  name: ViewDataDictionary
  nameWithType: ViewDataDictionary
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewDataDictionary
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  syntax:
    content: 'public class ViewDataDictionary : IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable'
    content.vb: >-
      Public Class ViewDataDictionary
          Implements IDictionary(Of String, Object), ICollection(Of KeyValuePair(Of String, Object)), IEnumerable(Of KeyValuePair(Of String, Object)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(IModelMetadataProvider, ModelStateDictionary)
  nameWithType: ViewDataDictionary.ViewDataDictionary(IModelMetadataProvider, ModelStateDictionary)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: For use when creating a <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" data-throw-if-not-resolved="false"></xref> for a new top-level scope.
  example: []
  syntax:
    content: public ViewDataDictionary(IModelMetadataProvider metadataProvider, ModelStateDictionary modelState)
    content.vb: Public Sub New(metadataProvider As IModelMetadataProvider, modelState As ModelStateDictionary)
    parameters:
    - id: metadataProvider
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
      description: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider\" data-throw-if-not-resolved=\"false\"></xref> instance used to create <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer\" data-throw-if-not-resolved=\"false\"></xref>\ninstances.\n"
    - id: modelState
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
      description: <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" data-throw-if-not-resolved="false"></xref> instance for this scope.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(ViewDataDictionary)
  nameWithType: ViewDataDictionary.ViewDataDictionary(ViewDataDictionary)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class based entirely on an existing\ninstance.\n"
  remarks: "\n<p>\nFor use when copying a <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> instance and the declared <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref>\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> will not change e.g. when copying from a <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%601\" data-throw-if-not-resolved=\"false\"></xref>\ninstance to a base <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> instance.\n</p>\n<p>\nThis constructor should not be used in any context where <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> may be set to a value\nincompatible with the declared type of <em>source</em>.\n</p>\n"
  example: []
  syntax:
    content: public ViewDataDictionary(ViewDataDictionary source)
    content.vb: Public Sub New(source As ViewDataDictionary)
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
      description: <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" data-throw-if-not-resolved="false"></xref> instance to copy initial values from.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,System.Type)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(IModelMetadataProvider, Type)
  nameWithType: ViewDataDictionary.ViewDataDictionary(IModelMetadataProvider, Type)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 85
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: "\nFor use when creating a derived <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> for a new top-level scope.\n"
  example: []
  syntax:
    content: protected ViewDataDictionary(IModelMetadataProvider metadataProvider, Type declaredModelType)
    content.vb: Protected Sub New(metadataProvider As IModelMetadataProvider, declaredModelType As Type)
    parameters:
    - id: metadataProvider
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
      description: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider\" data-throw-if-not-resolved=\"false\"></xref> instance used to create <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer\" data-throw-if-not-resolved=\"false\"></xref>\ninstances.\n"
    - id: declaredModelType
      type: System.Type
      description: "\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> values expected. Used to set <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Type)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.Type)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(IModelMetadataProvider, ModelStateDictionary, Type)
  nameWithType: ViewDataDictionary.ViewDataDictionary(IModelMetadataProvider, ModelStateDictionary, Type)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  remarks: "\nFor use when creating a derived <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> for a new top-level scope.\n"
  example: []
  syntax:
    content: protected ViewDataDictionary(IModelMetadataProvider metadataProvider, ModelStateDictionary modelState, Type declaredModelType)
    content.vb: Protected Sub New(metadataProvider As IModelMetadataProvider, modelState As ModelStateDictionary, declaredModelType As Type)
    parameters:
    - id: metadataProvider
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
      description: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider\" data-throw-if-not-resolved=\"false\"></xref> instance used to create <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer\" data-throw-if-not-resolved=\"false\"></xref>\ninstances.\n"
    - id: modelState
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
      description: <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" data-throw-if-not-resolved="false"></xref> instance for this scope.
    - id: declaredModelType
      type: System.Type
      description: "\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> values expected. Used to set <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Type)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Type)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(ViewDataDictionary, Type)
  nameWithType: ViewDataDictionary.ViewDataDictionary(ViewDataDictionary, Type)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 157
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class based in part on an existing\ninstance.\n"
  remarks: "\n<p>\nFor use when copying a <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> instance and new instance's declared\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is known but <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> should be copied from the existing\ninstance e.g. when copying from a base <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> instance to a\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%601\" data-throw-if-not-resolved=\"false\"></xref> instance.\n</p>\n<p>\nThis constructor may <code>throw</code> if <code>source.Model</code> is non-<code>null</code> and incompatible with\n<em>declaredModelType</em>. Pass <code>model: null</code> to\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.%23ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary%2cSystem.Object%2cSystem.Type)\" data-throw-if-not-resolved=\"false\"></xref> to ignore <code>source.Model</code>.\n</p>\n"
  example: []
  syntax:
    content: protected ViewDataDictionary(ViewDataDictionary source, Type declaredModelType)
    content.vb: Protected Sub New(source As ViewDataDictionary, declaredModelType As Type)
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
      description: <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" data-throw-if-not-resolved="false"></xref> instance to copy initial values from.
    - id: declaredModelType
      type: System.Type
      description: "\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> values expected. Used to set <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)'
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ViewDataDictionary(ViewDataDictionary, Object, Type)
  nameWithType: ViewDataDictionary.ViewDataDictionary(ViewDataDictionary, Object, Type)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ViewDataDictionary(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary, System.Object, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 183
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> class based in part on an existing\ninstance. This constructor is careful to avoid exceptions <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> may throw when\n<em>model</em> is <code>null</code>.\n"
  remarks: "\n<p>\nFor use when copying a <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref> instance and new instance's declared\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> are known.\n</p>\n<p>\nThis constructor may <code>throw</code> if <em>model</em> is non-<code>null</code> and incompatible with\n<em>declaredModelType</em>.\n</p>\n"
  example: []
  syntax:
    content: protected ViewDataDictionary(ViewDataDictionary source, object model, Type declaredModelType)
    content.vb: Protected Sub New(source As ViewDataDictionary, model As Object, declaredModelType As Type)
    parameters:
    - id: source
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
      description: <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" data-throw-if-not-resolved="false"></xref> instance to copy initial values from.
    - id: model
      type: System.Object
      description: Value for the <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" data-throw-if-not-resolved="false"></xref> property.
    - id: declaredModelType
      type: System.Type
      description: "\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> values expected. Used to set <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
  id: Model
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: ViewDataDictionary.Model
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Model
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 268
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets or sets the current model.\n"
  example: []
  syntax:
    content: public object Model { get; set; }
    content.vb: Public Property Model As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelState
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelState
  id: ModelState
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ModelState
  nameWithType: ViewDataDictionary.ModelState
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelState
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelState
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 284
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ModelStateDictionary ModelState { get; }
    content.vb: Public ReadOnly Property ModelState As ModelStateDictionary
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  id: ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ModelMetadata
  nameWithType: ViewDataDictionary.ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelMetadata
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 294
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata\" data-throw-if-not-resolved=\"false\"></xref> for an expression, the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> (if\nnon-<code>null</code>), or the declared <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nValue is never <code>null</code> but may describe the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> class in some cases. This may for\nexample occur in controllers.\n"
  example: []
  syntax:
    content: public ModelMetadata ModelMetadata { get; }
    content.vb: Public ReadOnly Property ModelMetadata As ModelMetadata
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  id: ModelExplorer
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ModelExplorer
  nameWithType: ViewDataDictionary.ModelExplorer
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ModelExplorer
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 305
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ModelExplorer ModelExplorer { get; set; }
    content.vb: Public Property ModelExplorer As ModelExplorer
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TemplateInfo
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TemplateInfo
  id: TemplateInfo
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: TemplateInfo
  nameWithType: ViewDataDictionary.TemplateInfo
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TemplateInfo
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: TemplateInfo
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 310
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public TemplateInfo TemplateInfo { get; }
    content.vb: Public ReadOnly Property TemplateInfo As TemplateInfo
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Item(System.String)
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: ViewDataDictionary.Item[String]
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Item[System.String]
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: this[]
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 315
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public object this[string index] { get; set; }
    content.vb: Public Property Item(index As String) As Object
    parameters:
    - id: index
      type: System.String
    return:
      type: System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  nameWithType.vb: ViewDataDictionary.Item(String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Item(System.String)
  name.vb: Item(String)
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Count
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Count
  id: Count
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ViewDataDictionary.Count
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Count
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 330
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.IsReadOnly
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ViewDataDictionary.IsReadOnly
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: IsReadOnly
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 336
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Keys
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Keys
  id: Keys
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: ViewDataDictionary.Keys
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Keys
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Keys
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 342
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public ICollection<string> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Values
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Values
  id: Values
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ViewDataDictionary.Values
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Values
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Values
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 348
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public ICollection<object> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of Object)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Object}
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String)
  id: Eval(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Eval(String)
  nameWithType: ViewDataDictionary.Eval(String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Eval
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 369
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets value of named <em>expression</em> in this <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nLooks up <em>expression</em> in the dictionary first. Falls back to evaluating it against\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public object Eval(string expression)
    content.vb: Public Function Eval(expression As String) As Object
    parameters:
    - id: expression
      type: System.String
      description: Expression name, relative to the current model.
    return:
      type: System.Object
      description: Value of named <em>expression</em> in this <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String,System.String)
  id: Eval(System.String,System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Eval(String, String)
  nameWithType: ViewDataDictionary.Eval(String, String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Eval(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Eval
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 391
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets value of named <em>expression</em> in this <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref>, formatted\nusing given <em>format</em>.\n"
  remarks: "\nLooks up <em>expression</em> in the dictionary first. Falls back to evaluating it against\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string Eval(string expression, string format)
    content.vb: Public Function Eval(expression As String, format As String) As String
    parameters:
    - id: expression
      type: System.String
      description: Expression name, relative to the current model.
    - id: format
      type: System.String
      description: "\nThe composite format <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).\n"
    return:
      type: System.String
      description: "\nValue of named <em>expression</em> in this <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref>, formatted using\ngiven <em>format</em>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.FormatValue(System.Object,System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.FormatValue(System.Object,System.String)
  id: FormatValue(System.Object,System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: FormatValue(Object, String)
  nameWithType: ViewDataDictionary.FormatValue(Object, String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.FormatValue(System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: FormatValue
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 405
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nFormats the given <em>value</em> using given <em>format</em>.\n"
  example: []
  syntax:
    content: public static string FormatValue(object value, string format)
    content.vb: Public Shared Function FormatValue(value As Object, format As String) As String
    parameters:
    - id: value
      type: System.Object
      description: The value to format.
    - id: format
      type: System.String
      description: "\nThe composite format <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> (see http://msdn.microsoft.com/en-us/library/txafckwd.aspx).\n"
    return:
      type: System.String
      description: The formatted <xref href="System.String" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.GetViewDataInfo(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.GetViewDataInfo(System.String)
  id: GetViewDataInfo(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: GetViewDataInfo(String)
  nameWithType: ViewDataDictionary.GetViewDataInfo(String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.GetViewDataInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetViewDataInfo
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 435
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nGets <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo\" data-throw-if-not-resolved=\"false\"></xref> for named <em>expression</em> in this\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nLooks up <em>expression</em> in the dictionary first. Falls back to evaluating it against\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ViewDataInfo GetViewDataInfo(string expression)
    content.vb: Public Function GetViewDataInfo(expression As String) As ViewDataInfo
    parameters:
    - id: expression
      type: System.String
      description: Expression name, relative to the current model.
    return:
      type: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo
      description: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo\" data-throw-if-not-resolved=\"false\"></xref> for named <em>expression</em> in this\n<xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  id: SetModel(System.Object)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: SetModel(Object)
  nameWithType: ViewDataDictionary.SetModel(Object)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: SetModel
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 445
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  summary: "\nSet <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer\" data-throw-if-not-resolved=\"false\"></xref> to ensure <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.Model\" data-throw-if-not-resolved=\"false\"></xref>\nreflect the new <em>value</em>.\n"
  example: []
  syntax:
    content: protected virtual void SetModel(object value)
    content.vb: Protected Overridable Sub SetModel(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: New <xref href="Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" data-throw-if-not-resolved="false"></xref> value.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.String,System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Add(String, Object)
  nameWithType: ViewDataDictionary.Add(String, Object)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Add
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 529
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public void Add(string key, object value)
    content.vb: Public Sub Add(key As String, value As Object)
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Object
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ContainsKey(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: ViewDataDictionary.ContainsKey(String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ContainsKey
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 540
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool ContainsKey(string key)
    content.vb: Public Function ContainsKey(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: ViewDataDictionary.Remove(String)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Remove
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 551
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool Remove(string key)
    content.vb: Public Function Remove(key As String) As Boolean
    parameters:
    - id: key
      type: System.String
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String,System.Object@)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out Object)
  nameWithType: ViewDataDictionary.TryGetValue(String, out Object)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String, out System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: TryGetValue
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 562
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool TryGetValue(string key, out object value)
    content.vb: Public Function TryGetValue(key As String, ByRef value As Object) As Boolean
    parameters:
    - id: key
      type: System.String
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  nameWithType.vb: ViewDataDictionary.TryGetValue(String, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.TryGetValue(System.String, ByRef System.Object)
  name.vb: TryGetValue(String, ByRef Object)
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<String, Object>)
  nameWithType: ViewDataDictionary.Add(KeyValuePair<String, Object>)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Add
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 573
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public void Add(KeyValuePair<string, object> item)
    content.vb: Public Sub Add(item As KeyValuePair(Of String, Object))
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: ViewDataDictionary.Add(KeyValuePair(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Add(KeyValuePair(Of String, Object))
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Clear
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Clear
  id: Clear
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ViewDataDictionary.Clear()
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Clear
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 579
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<String, Object>)
  nameWithType: ViewDataDictionary.Contains(KeyValuePair<String, Object>)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Contains
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 585
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<string, object> item)
    content.vb: Public Function Contains(item As KeyValuePair(Of String, Object)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: ViewDataDictionary.Contains(KeyValuePair(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Contains(KeyValuePair(Of String, Object))
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: ViewDataDictionary.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CopyTo
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 591
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of String, Object)(), arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
    - id: arrayIndex
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  nameWithType.vb: ViewDataDictionary.CopyTo(KeyValuePair(Of String, Object)(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, Object)(), Int32)
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  id: Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<String, Object>)
  nameWithType: ViewDataDictionary.Remove(KeyValuePair<String, Object>)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Remove
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 602
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<string, object> item)
    content.vb: Public Function Remove(item As KeyValuePair(Of String, Object)) As Boolean
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  nameWithType.vb: ViewDataDictionary.Remove(KeyValuePair(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Remove(KeyValuePair(Of String, Object))
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Object}}#GetEnumerator
  isEii: true
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  nameWithType: ViewDataDictionary.IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 608
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: IEnumerator<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of String, Object)) Implements IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  nameWithType.vb: ViewDataDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  fullName.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>.GetEnumerator()
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ViewDataDictionary.IEnumerable.GetEnumerator()
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/ViewDataDictionary.cs
    startLine: 614
  assemblies:
  - Microsoft.AspNetCore.Mvc.ViewFeatures
  namespace: Microsoft.AspNetCore.Mvc.ViewFeatures
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ViewDataDictionary.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures
  commentId: N:Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ViewFeatures
  nameWithType: Microsoft.AspNetCore.Mvc.ViewFeatures
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<String, Object>>
  nameWithType: ICollection<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: ICollection(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: ViewDataDictionary
  nameWithType: ViewDataDictionary
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IModelMetadataProvider
  nameWithType: IModelMetadataProvider
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: ModelExplorer
  nameWithType: ModelExplorer
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelStateDictionary
  nameWithType: ModelStateDictionary
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
  isExternal: false
  name: ViewDataDictionary<TModel>
  nameWithType: ViewDataDictionary<TModel>
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<TModel>
  nameWithType.vb: ViewDataDictionary(Of TModel)
  fullname.vb: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary(Of TModel)
  name.vb: ViewDataDictionary(Of TModel)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1
    name: ViewDataDictionary
    nameWithType: ViewDataDictionary
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TModel
    nameWithType: TModel
    fullName: TModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  isExternal: false
  name: ModelMetadata
  nameWithType: ViewDataDictionary.ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelMetadata
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.#ctor(Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary,System.Object,System.Type)
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  commentId: M:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  isExternal: true
  name: SetModel(Object)
  nameWithType: ViewDataDictionary.SetModel(Object)
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
    name: SetModel
    nameWithType: ViewDataDictionary.SetModel
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel(System.Object)
    name: SetModel
    nameWithType: ViewDataDictionary.SetModel
    fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.SetModel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelMetadata
  nameWithType: ModelMetadata
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: TemplateInfo
  nameWithType: TemplateInfo
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Item(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[String]
  nameWithType: IDictionary<String, Object>.Item[String]
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item[System.String]
  nameWithType.vb: IDictionary(Of String, Object).Item(String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<String, Object>.Item
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of String, Object).Item
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<String, Object>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<String, Object>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Keys
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<String, Object>.Keys
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Keys
  nameWithType.vb: IDictionary(Of String, Object).Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Keys
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  commentId: P:System.Collections.Generic.IDictionary{System.String,System.Object}.Values
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<String, Object>.Values
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Values
  nameWithType.vb: IDictionary(Of String, Object).Values
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Values
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo
  commentId: T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures
  isExternal: false
  name: ViewDataInfo
  nameWithType: ViewDataInfo
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataInfo
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
  parent: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary
  isExternal: false
  name: ModelExplorer
  nameWithType: ViewDataDictionary.ModelExplorer
  fullName: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.ModelExplorer
- uid: Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.Model
  commentId: P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer.Model
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Add(System.String,System.Object)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(String, Object)
  nameWithType: IDictionary<String, Object>.Add(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).Add(String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<String, Object>.Add
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of String, Object).Add
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.ContainsKey(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(String)
  nameWithType: IDictionary<String, Object>.ContainsKey(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey(System.String)
  nameWithType.vb: IDictionary(Of String, Object).ContainsKey(String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<String, Object>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of String, Object).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.Remove(System.String)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(String)
  nameWithType: IDictionary<String, Object>.Remove(String)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove(System.String)
  nameWithType.vb: IDictionary(Of String, Object).Remove(String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<String, Object>.Remove
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of String, Object).Remove
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  commentId: M:System.Collections.Generic.IDictionary{System.String,System.Object}.TryGetValue(System.String,System.Object@)
  parent: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(String, Object)
  nameWithType: IDictionary<String, Object>.TryGetValue(String, Object)
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue(System.String, System.Object)
  nameWithType.vb: IDictionary(Of String, Object).TryGetValue(String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue(System.String, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<String, Object>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<System.String, System.Object>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of String, Object).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of System.String, System.Object).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Add(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Add(KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Add(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<String, Object>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<String, Object>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<String, Object>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Contains(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Contains(KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Contains(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<String, Object>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<String, Object>[], Int32)
  nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo(KeyValuePair<String, Object>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).CopyTo(KeyValuePair(Of String, Object)(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo(System.Collections.Generic.KeyValuePair(Of System.String, System.Object)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of String, Object)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<String, Object>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}[]
  name: KeyValuePair<String, Object>[]
  nameWithType: KeyValuePair<String, Object>[]
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>[]
  nameWithType.vb: KeyValuePair(Of String, Object)()
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)()
  name.vb: KeyValuePair(Of String, Object)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<String, Object>)
  nameWithType: ICollection<KeyValuePair<String, Object>>.Remove(KeyValuePair<String, Object>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of String, Object)).Remove(KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove(System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: Remove(KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<String, Object>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of String, Object)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, Object>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, Object>>
  nameWithType: IEnumerator<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerator(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
