### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  id: CompilerCache
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider,System.Collections.Generic.IDictionary{System.String,System.Type})
  - Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  langs:
  - csharp
  - vb
  name: CompilerCache
  nameWithType: CompilerCache
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CompilerCache
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nCaches the result of runtime compilation of Razor files for the duration of the application lifetime.\n"
  example: []
  syntax:
    content: 'public class CompilerCache : ICompilerCache'
    content.vb: >-
      Public Class CompilerCache
          Implements ICompilerCache
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider)
  id: '#ctor(Microsoft.Extensions.FileProviders.IFileProvider)'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  langs:
  - csharp
  - vb
  name: CompilerCache(IFileProvider)
  nameWithType: CompilerCache.CompilerCache(IFileProvider)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.CompilerCache(Microsoft.Extensions.FileProviders.IFileProvider)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CompilerCache(IFileProvider fileProvider)
    content.vb: Public Sub New(fileProvider As IFileProvider)
    parameters:
    - id: fileProvider
      type: Microsoft.Extensions.FileProviders.IFileProvider
      description: <xref href="Microsoft.Extensions.FileProviders.IFileProvider" data-throw-if-not-resolved="false"></xref> used to locate Razor views.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider,System.Collections.Generic.IDictionary{System.String,System.Type})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.#ctor(Microsoft.Extensions.FileProviders.IFileProvider,System.Collections.Generic.IDictionary{System.String,System.Type})
  id: '#ctor(Microsoft.Extensions.FileProviders.IFileProvider,System.Collections.Generic.IDictionary{System.String,System.Type})'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  langs:
  - csharp
  - vb
  name: CompilerCache(IFileProvider, IDictionary<String, Type>)
  nameWithType: CompilerCache.CompilerCache(IFileProvider, IDictionary<String, Type>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.CompilerCache(Microsoft.Extensions.FileProviders.IFileProvider, System.Collections.Generic.IDictionary<System.String, System.Type>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache\" data-throw-if-not-resolved=\"false\"></xref> populated with precompiled views\nspecified by <em>precompiledViews</em>.\n"
  example: []
  syntax:
    content: public CompilerCache(IFileProvider fileProvider, IDictionary<string, Type> precompiledViews)
    content.vb: Public Sub New(fileProvider As IFileProvider, precompiledViews As IDictionary(Of String, Type))
    parameters:
    - id: fileProvider
      type: Microsoft.Extensions.FileProviders.IFileProvider
      description: <xref href="Microsoft.Extensions.FileProviders.IFileProvider" data-throw-if-not-resolved="false"></xref> used to locate Razor views.
    - id: precompiledViews
      type: System.Collections.Generic.IDictionary{System.String,System.Type}
      description: >-
        A mapping of application relative paths of view to the precompiled view

        <xref href="System.Type" data-throw-if-not-resolved="false"></xref>s.
  nameWithType.vb: CompilerCache.CompilerCache(IFileProvider, IDictionary(Of String, Type))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.CompilerCache(Microsoft.Extensions.FileProviders.IFileProvider, System.Collections.Generic.IDictionary(Of System.String, System.Type))
  name.vb: CompilerCache(IFileProvider, IDictionary(Of String, Type))
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  id: GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  langs:
  - csharp
  - vb
  name: GetOrAdd(String, Func<RelativeFileInfo, CompilationResult>)
  nameWithType: CompilerCache.GetOrAdd(String, Func<RelativeFileInfo, CompilationResult>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.GetOrAdd(System.String, System.Func<Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: GetOrAdd
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/CompilerCache.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  example: []
  syntax:
    content: public CompilerCacheResult GetOrAdd(string relativePath, Func<RelativeFileInfo, CompilationResult> compile)
    content.vb: Public Function GetOrAdd(relativePath As String, compile As Func(Of RelativeFileInfo, CompilationResult)) As CompilerCacheResult
    parameters:
    - id: relativePath
      type: System.String
    - id: compile
      type: System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult}
    return:
      type: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCacheResult
  implements:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  nameWithType.vb: CompilerCache.GetOrAdd(String, Func(Of RelativeFileInfo, CompilationResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache.GetOrAdd(System.String, System.Func(Of Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult))
  name.vb: GetOrAdd(String, Func(Of RelativeFileInfo, CompilationResult))
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Internal
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: ICompilerCache
  nameWithType: ICompilerCache
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
  isExternal: false
  name: CompilerCache
  nameWithType: CompilerCache
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCache
- uid: Microsoft.Extensions.FileProviders.IFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.IFileProvider
  parent: Microsoft.Extensions.FileProviders
  isExternal: true
  name: IFileProvider
  nameWithType: IFileProvider
  fullName: Microsoft.Extensions.FileProviders.IFileProvider
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IDictionary{System.String,System.Type}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Type>
  nameWithType: IDictionary<String, Type>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Type>
  nameWithType.vb: IDictionary(Of String, Type)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Type)
  name.vb: IDictionary(Of String, Type)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache
  isExternal: true
  name: GetOrAdd(String, Func<RelativeFileInfo, CompilationResult>)
  nameWithType: ICompilerCache.GetOrAdd(String, Func<RelativeFileInfo, CompilationResult>)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String, System.Func<Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult>)
  nameWithType.vb: ICompilerCache.GetOrAdd(String, Func(Of RelativeFileInfo, CompilationResult))
  fullname.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String, System.Func(Of Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult))
  name.vb: GetOrAdd(String, Func(Of RelativeFileInfo, CompilationResult))
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
    name: GetOrAdd
    nameWithType: ICompilerCache.GetOrAdd
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
    name: RelativeFileInfo
    nameWithType: RelativeFileInfo
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
    name: CompilationResult
    nameWithType: CompilationResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd(System.String,System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult})
    name: GetOrAdd
    nameWithType: ICompilerCache.GetOrAdd
    fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ICompilerCache.GetOrAdd
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
    name: RelativeFileInfo
    nameWithType: RelativeFileInfo
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
    name: CompilationResult
    nameWithType: CompilationResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult}
  commentId: T:System.Func{Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo,Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult}
  parent: System
  definition: System.Func`2
  name: Func<RelativeFileInfo, CompilationResult>
  nameWithType: Func<RelativeFileInfo, CompilationResult>
  fullName: System.Func<Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult>
  nameWithType.vb: Func(Of RelativeFileInfo, CompilationResult)
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo, Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult)
  name.vb: Func(Of RelativeFileInfo, CompilationResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
    name: RelativeFileInfo
    nameWithType: RelativeFileInfo
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
    name: CompilationResult
    nameWithType: CompilationResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
    name: RelativeFileInfo
    nameWithType: RelativeFileInfo
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.RelativeFileInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
    name: CompilationResult
    nameWithType: CompilationResult
    fullName: Microsoft.AspNetCore.Mvc.Razor.Compilation.CompilationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCacheResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCacheResult
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: CompilerCacheResult
  nameWithType: CompilerCacheResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.CompilerCacheResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
