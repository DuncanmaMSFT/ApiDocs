### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  id: ViewLocationCacheItem
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  children:
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.String)
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.Location
  - Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.PageFactory
  langs:
  - csharp
  - vb
  name: ViewLocationCacheItem
  nameWithType: ViewLocationCacheItem
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ViewLocationCacheItem
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nAn item in <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public struct ViewLocationCacheItem
    content.vb: Public Structure ViewLocationCacheItem
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.String)
  commentId: M:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.String)
  id: '#ctor(System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage},System.String)'
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  langs:
  - csharp
  - vb
  name: ViewLocationCacheItem(Func<IRazorPage>, String)
  nameWithType: ViewLocationCacheItem.ViewLocationCacheItem(Func<IRazorPage>, String)
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.ViewLocationCacheItem(System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ViewLocationCacheItem(Func<IRazorPage> razorPageFactory, string location)
    content.vb: Public Sub New(razorPageFactory As Func(Of IRazorPage), location As String)
    parameters:
    - id: razorPageFactory
      type: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
      description: The <xref href="Microsoft.AspNetCore.Mvc.Razor.IRazorPage" data-throw-if-not-resolved="false"></xref> factory.
    - id: location
      type: System.String
      description: The application relative path of the <xref href="Microsoft.AspNetCore.Mvc.Razor.IRazorPage" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ViewLocationCacheItem.ViewLocationCacheItem(Func(Of IRazorPage), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.ViewLocationCacheItem(System.Func(Of Microsoft.AspNetCore.Mvc.Razor.IRazorPage), System.String)
  name.vb: ViewLocationCacheItem(Func(Of IRazorPage), String)
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.Location
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.Location
  id: Location
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: ViewLocationCacheItem.Location
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.Location
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Location
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the application relative path of the <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IRazorPage\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public string Location { get; }
    content.vb: Public ReadOnly Property Location As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.PageFactory
  commentId: P:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.PageFactory
  id: PageFactory
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  langs:
  - csharp
  - vb
  name: PageFactory
  nameWithType: ViewLocationCacheItem.PageFactory
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem.PageFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: PageFactory
    path: src/Microsoft.AspNetCore.Mvc.Razor/Internal/ViewLocationCacheItem.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Mvc.Razor
  namespace: Microsoft.AspNetCore.Mvc.Razor.Internal
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.Razor.IRazorPage\" data-throw-if-not-resolved=\"false\"></xref> factory.\n"
  example: []
  syntax:
    content: public Func<IRazorPage> PageFactory { get; }
    content.vb: Public ReadOnly Property PageFactory As Func(Of IRazorPage)
    parameters: []
    return:
      type: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
  isExternal: false
  name: ViewLocationCacheResult
  nameWithType: ViewLocationCacheResult
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheResult
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal
  commentId: N:Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor.Internal
  nameWithType: Microsoft.AspNetCore.Mvc.Razor.Internal
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
  parent: Microsoft.AspNetCore.Mvc.Razor.Internal
  isExternal: false
  name: ViewLocationCacheItem
  nameWithType: ViewLocationCacheItem
  fullName: Microsoft.AspNetCore.Mvc.Razor.Internal.ViewLocationCacheItem
- uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  commentId: T:Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  parent: Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: IRazorPage
  nameWithType: IRazorPage
  fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
- uid: System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  commentId: T:System.Func{Microsoft.AspNetCore.Mvc.Razor.IRazorPage}
  parent: System
  definition: System.Func`1
  name: Func<IRazorPage>
  nameWithType: Func<IRazorPage>
  fullName: System.Func<Microsoft.AspNetCore.Mvc.Razor.IRazorPage>
  nameWithType.vb: Func(Of IRazorPage)
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Mvc.Razor.IRazorPage)
  name.vb: Func(Of IRazorPage)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
    name: IRazorPage
    nameWithType: IRazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
    name: IRazorPage
    nameWithType: IRazorPage
    fullName: Microsoft.AspNetCore.Mvc.Razor.IRazorPage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Mvc.Razor
  commentId: N:Microsoft.AspNetCore.Mvc.Razor
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Razor
  nameWithType: Microsoft.AspNetCore.Mvc.Razor
  fullName: Microsoft.AspNetCore.Mvc.Razor
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
