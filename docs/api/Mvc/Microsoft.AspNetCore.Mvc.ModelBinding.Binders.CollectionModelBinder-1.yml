### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  id: CollectionModelBinder`1
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  children:
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CanCreateInstance(System.Type)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ConvertToCollectionType(System.Type,System.Collections.Generic.IEnumerable{`0})
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CopyToModel(System.Object,System.Collections.Generic.IEnumerable{`0})
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateEmptyCollection(System.Type)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateInstance(System.Type)
  - Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ElementBinder
  langs:
  - csharp
  - vb
  name: CollectionModelBinder<TElement>
  nameWithType: CollectionModelBinder<TElement>
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CollectionModelBinder
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\n<xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder\" data-throw-if-not-resolved=\"false\"></xref> implementation for binding collection values.\n"
  example: []
  syntax:
    content: 'public class CollectionModelBinder<TElement> : ICollectionModelBinder, IModelBinder'
    content.vb: >-
      Public Class CollectionModelBinder(Of TElement)
          Implements ICollectionModelBinder, IModelBinder
    typeParameters:
    - id: TElement
      description: Type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
  - Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: CollectionModelBinder(Of TElement)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement)
  name.vb: CollectionModelBinder(Of TElement)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
  id: '#ctor(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)'
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: CollectionModelBinder(IModelBinder)
  nameWithType: CollectionModelBinder<TElement>.CollectionModelBinder(IModelBinder)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CollectionModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public CollectionModelBinder(IModelBinder elementBinder)
    content.vb: Public Sub New(elementBinder As IModelBinder)
    parameters:
    - id: elementBinder
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
      description: The <xref href="Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder" data-throw-if-not-resolved="false"></xref> for binding elements.
  nameWithType.vb: CollectionModelBinder(Of TElement).CollectionModelBinder(IModelBinder)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).CollectionModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ElementBinder
  commentId: P:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ElementBinder
  id: ElementBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: ElementBinder
  nameWithType: CollectionModelBinder<TElement>.ElementBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.ElementBinder
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ElementBinder
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder\" data-throw-if-not-resolved=\"false\"></xref> instances for binding collection elements.\n"
  example: []
  syntax:
    content: protected IModelBinder ElementBinder { get; }
    content.vb: Protected ReadOnly Property ElementBinder As IModelBinder
    parameters: []
    return:
      type: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  nameWithType.vb: CollectionModelBinder(Of TElement).ElementBinder
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).ElementBinder
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  id: BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: BindModelAsync(ModelBindingContext)
  nameWithType: CollectionModelBinder<TElement>.BindModelAsync(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: BindModelAsync
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  example: []
  syntax:
    content: public virtual Task BindModelAsync(ModelBindingContext bindingContext)
    content.vb: Public Overridable Function BindModelAsync(bindingContext As ModelBindingContext) As Task
    parameters:
    - id: bindingContext
      type: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  nameWithType.vb: CollectionModelBinder(Of TElement).BindModelAsync(ModelBindingContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CanCreateInstance(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CanCreateInstance(System.Type)
  id: CanCreateInstance(System.Type)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: CanCreateInstance(Type)
  nameWithType: CollectionModelBinder<TElement>.CanCreateInstance(Type)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CanCreateInstance(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CanCreateInstance
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 116
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  example: []
  syntax:
    content: public virtual bool CanCreateInstance(Type targetType)
    content.vb: Public Overridable Function CanCreateInstance(targetType As Type) As Boolean
    parameters:
    - id: targetType
      type: System.Type
    return:
      type: System.Boolean
  implements:
  - Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
  nameWithType.vb: CollectionModelBinder(Of TElement).CanCreateInstance(Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).CanCreateInstance(System.Type)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateEmptyCollection(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateEmptyCollection(System.Type)
  id: CreateEmptyCollection(System.Type)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: CreateEmptyCollection(Type)
  nameWithType: CollectionModelBinder<TElement>.CreateEmptyCollection(Type)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CreateEmptyCollection(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CreateEmptyCollection
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 135
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreate an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> assignable to <em>targetType</em>.\n"
  remarks: Called when creating a default 'empty' model for a top level bind.
  example: []
  syntax:
    content: protected virtual object CreateEmptyCollection(Type targetType)
    content.vb: Protected Overridable Function CreateEmptyCollection(targetType As Type) As Object
    parameters:
    - id: targetType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the model.
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> assignable to <em>targetType</em>.
  nameWithType.vb: CollectionModelBinder(Of TElement).CreateEmptyCollection(Type)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).CreateEmptyCollection(System.Type)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateInstance(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: CreateInstance(Type)
  nameWithType: CollectionModelBinder<TElement>.CreateInstance(Type)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CreateInstance(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CreateInstance
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 151
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nCreate an instance of <em>targetType</em>.\n"
  example: []
  syntax:
    content: protected object CreateInstance(Type targetType)
    content.vb: Protected Function CreateInstance(targetType As Type) As Object
    parameters:
    - id: targetType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the model.
    return:
      type: System.Object
      description: An instance of <em>targetType</em>.
  nameWithType.vb: CollectionModelBinder(Of TElement).CreateInstance(Type)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).CreateInstance(System.Type)
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ConvertToCollectionType(System.Type,System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.ConvertToCollectionType(System.Type,System.Collections.Generic.IEnumerable{`0})
  id: ConvertToCollectionType(System.Type,System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: ConvertToCollectionType(Type, IEnumerable<TElement>)
  nameWithType: CollectionModelBinder<TElement>.ConvertToCollectionType(Type, IEnumerable<TElement>)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.ConvertToCollectionType(System.Type, System.Collections.Generic.IEnumerable<TElement>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: ConvertToCollectionType
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 310
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nGets an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> assignable to <em>targetType</em> that contains members from\n<em>collection</em>.\n"
  remarks: "\nExtensibility point that allows the bound collection to be manipulated or transformed before being\nreturned from the binder.\n"
  example: []
  syntax:
    content: protected virtual object ConvertToCollectionType(Type targetType, IEnumerable<TElement> collection)
    content.vb: Protected Overridable Function ConvertToCollectionType(targetType As Type, collection As IEnumerable(Of TElement)) As Object
    parameters:
    - id: targetType
      type: System.Type
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the model.
    - id: collection
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: "\nCollection of values retrieved from value providers. Or <code>null</code> if nothing was bound.\n"
    return:
      type: System.Object
      description: "\nAn <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> assignable to <em>targetType</em>. Or <code>null</code> if nothing was bound.\n"
  nameWithType.vb: CollectionModelBinder(Of TElement).ConvertToCollectionType(Type, IEnumerable(Of TElement))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).ConvertToCollectionType(System.Type, System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: ConvertToCollectionType(Type, IEnumerable(Of TElement))
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CopyToModel(System.Object,System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1.CopyToModel(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: CopyToModel(System.Object,System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  langs:
  - csharp
  - vb
  name: CopyToModel(Object, IEnumerable<TElement>)
  nameWithType: CollectionModelBinder<TElement>.CopyToModel(Object, IEnumerable<TElement>)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CopyToModel(System.Object, System.Collections.Generic.IEnumerable<TElement>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: CopyToModel
    path: src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Binders/CollectionModelBinder.cs
    startLine: 337
  assemblies:
  - Microsoft.AspNetCore.Mvc.Core
  namespace: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  summary: "\nAdds values from <em>sourceCollection</em> to given <em>target</em>.\n"
  example: []
  syntax:
    content: protected virtual void CopyToModel(object target, IEnumerable<TElement> sourceCollection)
    content.vb: Protected Overridable Sub CopyToModel(target As Object, sourceCollection As IEnumerable(Of TElement))
    parameters:
    - id: target
      type: System.Object
      description: <xref href="System.Object" data-throw-if-not-resolved="false"></xref> into which values are copied.
    - id: sourceCollection
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: "\nCollection of values retrieved from value providers. Or <code>null</code> if nothing was bound.\n"
  nameWithType.vb: CollectionModelBinder(Of TElement).CopyToModel(Object, IEnumerable(Of TElement))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement).CopyToModel(System.Object, System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: CopyToModel(Object, IEnumerable(Of TElement))
references:
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: IModelBinder
  nameWithType: IModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ICollectionModelBinder
  nameWithType: ICollectionModelBinder
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding
  commentId: N:Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.ModelBinding
  nameWithType: Microsoft.AspNetCore.Mvc.ModelBinding
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
  isExternal: false
  name: CollectionModelBinder<TElement>
  nameWithType: CollectionModelBinder<TElement>
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>
  nameWithType.vb: CollectionModelBinder(Of TElement)
  fullname.vb: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder(Of TElement)
  name.vb: CollectionModelBinder(Of TElement)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
    name: CollectionModelBinder
    nameWithType: CollectionModelBinder
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder`1
    name: CollectionModelBinder
    nameWithType: CollectionModelBinder
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
  isExternal: false
  name: BindModelAsync(ModelBindingContext)
  nameWithType: IModelBinder.BindModelAsync(ModelBindingContext)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    name: BindModelAsync
    nameWithType: IModelBinder.BindModelAsync
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    name: ModelBindingContext
    nameWithType: ModelBindingContext
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext)
    name: BindModelAsync
    nameWithType: IModelBinder.BindModelAsync
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder.BindModelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
    name: ModelBindingContext
    nameWithType: ModelBindingContext
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  commentId: T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
  parent: Microsoft.AspNetCore.Mvc.ModelBinding
  isExternal: false
  name: ModelBindingContext
  nameWithType: ModelBindingContext
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
  commentId: M:Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
  parent: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
  isExternal: true
  name: CanCreateInstance(Type)
  nameWithType: ICollectionModelBinder.CanCreateInstance(Type)
  fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
    name: CanCreateInstance
    nameWithType: ICollectionModelBinder.CanCreateInstance
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type)
    name: CanCreateInstance
    nameWithType: ICollectionModelBinder.CanCreateInstance
    fullName: Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  nameWithType.vb: IEnumerable(Of TElement)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
