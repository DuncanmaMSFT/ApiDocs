### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  id: DelegatingEnumerator`2
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml
  children:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Current
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Dispose
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.MoveNext
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Reset
  - Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.System#Collections#IEnumerator#Current
  langs:
  - csharp
  - vb
  name: DelegatingEnumerator<TWrapped, TDeclared>
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: DelegatingEnumerator
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nDelegates enumeration of elements to the original enumerator and wraps the items\nwith the supplied <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class DelegatingEnumerator<TWrapped, TDeclared> : IEnumerator<TWrapped>, IDisposable, IEnumerator'
    content.vb: >-
      Public Class DelegatingEnumerator(Of TWrapped, TDeclared)
          Implements IEnumerator(Of TWrapped), IDisposable, IEnumerator
    typeParameters:
    - id: TWrapped
      description: The type to which the individual elements need to be wrapped to.
    - id: TDeclared
      description: The original type of the element being wrapped.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator{{TWrapped}}
  - System.IDisposable
  - System.Collections.IEnumerator
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared)
  name.vb: DelegatingEnumerator(Of TWrapped, TDeclared)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  id: '#ctor(System.Collections.Generic.IEnumerator{`1},Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)'
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: DelegatingEnumerator(IEnumerator<TDeclared>, IWrapperProvider)
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.DelegatingEnumerator(IEnumerator<TDeclared>, IWrapperProvider)
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.DelegatingEnumerator(System.Collections.Generic.IEnumerator<TDeclared>, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  summary: "\nInitializes a <xref href=\"Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable%602\" data-throw-if-not-resolved=\"false\"></xref> which enumerates \nover the elements of the original enumerator and wraps them using the supplied\n<xref href=\"Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public DelegatingEnumerator(IEnumerator<TDeclared> inner, IWrapperProvider wrapperProvider)
    content.vb: Public Sub New(inner As IEnumerator(Of TDeclared), wrapperProvider As IWrapperProvider)
    parameters:
    - id: inner
      type: System.Collections.Generic.IEnumerator{{TDeclared}}
      description: The original enumerator.
    - id: wrapperProvider
      type: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
      description: The wrapper provider to wrap individual elements.
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).DelegatingEnumerator(IEnumerator(Of TDeclared), IWrapperProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).DelegatingEnumerator(System.Collections.Generic.IEnumerator(Of TDeclared), Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider)
  name.vb: DelegatingEnumerator(IEnumerator(Of TDeclared), IWrapperProvider)
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Current
  commentId: P:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Current
  id: Current
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.Current
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Current
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Current
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  example: []
  syntax:
    content: public TWrapped Current { get; }
    content.vb: Public ReadOnly Property Current As TWrapped
    parameters: []
    return:
      type: '{TWrapped}'
  implements:
  - System.Collections.Generic.IEnumerator{{TWrapped}}.Current
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).Current
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.System#Collections#IEnumerator#Current
  commentId: P:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: IEnumerator.Current
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.IEnumerator.Current
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.System.Collections.IEnumerator.Current
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: System.Collections.IEnumerator.Current
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  example: []
  syntax:
    content: object IEnumerator.Current { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.IEnumerator.Current
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).System.Collections.IEnumerator.Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).System.Collections.IEnumerator.Current
  name.vb: System.Collections.IEnumerator.Current
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Dispose
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.Dispose()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).Dispose()
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.MoveNext
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.MoveNext
  id: MoveNext
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: MoveNext()
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.MoveNext()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.MoveNext()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: MoveNext
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  example: []
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
  implements:
  - System.Collections.IEnumerator.MoveNext
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).MoveNext()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).MoveNext()
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Reset
  commentId: M:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2.Reset
  id: Reset
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator`2
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: DelegatingEnumerator<TWrapped, TDeclared>.Reset()
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Reset()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
      branch: master
      repo: https://github.com/aspnet/Mvc.git
    id: Reset
    path: src/Microsoft.AspNetCore.Mvc.Formatters.Xml/DelegatingEnumerator.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Mvc.Formatters.Xml
  namespace: Microsoft.AspNetCore.Mvc.Formatters.Xml
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  implements:
  - System.Collections.IEnumerator.Reset
  nameWithType.vb: DelegatingEnumerator(Of TWrapped, TDeclared).Reset()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator(Of TWrapped, TDeclared).Reset()
references:
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
  parent: Microsoft.AspNetCore.Mvc.Formatters.Xml
  isExternal: false
  name: IWrapperProvider
  nameWithType: IWrapperProvider
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml
  commentId: N:Microsoft.AspNetCore.Mvc.Formatters.Xml
  isExternal: false
  name: Microsoft.AspNetCore.Mvc.Formatters.Xml
  nameWithType: Microsoft.AspNetCore.Mvc.Formatters.Xml
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerator{{TWrapped}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TWrapped>
  nameWithType: IEnumerator<TWrapped>
  fullName: System.Collections.Generic.IEnumerator<TWrapped>
  nameWithType.vb: IEnumerator(Of TWrapped)
  fullname.vb: System.Collections.Generic.IEnumerator(Of TWrapped)
  name.vb: IEnumerator(Of TWrapped)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  commentId: T:Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
  isExternal: false
  name: DelegatingEnumerable<TWrapped, TDeclared>
  nameWithType: DelegatingEnumerable<TWrapped, TDeclared>
  fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>
  nameWithType.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
  fullname.vb: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable(Of TWrapped, TDeclared)
  name.vb: DelegatingEnumerable(Of TWrapped, TDeclared)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
    name: DelegatingEnumerable
    nameWithType: DelegatingEnumerable
    fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable`2
    name: DelegatingEnumerable
    nameWithType: DelegatingEnumerable
    fullName: Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TWrapped
    nameWithType: TWrapped
    fullName: TWrapped
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TDeclared}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TDeclared>
  nameWithType: IEnumerator<TDeclared>
  fullName: System.Collections.Generic.IEnumerator<TDeclared>
  nameWithType.vb: IEnumerator(Of TDeclared)
  fullname.vb: System.Collections.Generic.IEnumerator(Of TDeclared)
  name.vb: IEnumerator(Of TDeclared)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDeclared
    nameWithType: TDeclared
    fullName: TDeclared
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TWrapped}}.Current
  commentId: P:System.Collections.Generic.IEnumerator{`0}.Current
  parent: System.Collections.Generic.IEnumerator{{TWrapped}}
  definition: System.Collections.Generic.IEnumerator`1.Current
  name: Current
  nameWithType: IEnumerator<TWrapped>.Current
  fullName: System.Collections.Generic.IEnumerator<TWrapped>.Current
  nameWithType.vb: IEnumerator(Of TWrapped).Current
  fullname.vb: System.Collections.Generic.IEnumerator(Of TWrapped).Current
- uid: '{TWrapped}'
  commentId: '!:TWrapped'
  definition: TWrapped
  name: TWrapped
  nameWithType: TWrapped
  fullName: TWrapped
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  isExternal: true
  name: Current
  nameWithType: IEnumerator<T>.Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  nameWithType.vb: IEnumerator(Of T).Current
  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current
- uid: TWrapped
  commentId: '!:TWrapped'
  isExternal: false
  name: TWrapped
  nameWithType: TWrapped
  fullName: TWrapped
- uid: System.Collections.IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Current
  nameWithType: IEnumerator.Current
  fullName: System.Collections.IEnumerator.Current
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator.MoveNext
  commentId: M:System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: true
  name: MoveNext()
  nameWithType: IEnumerator.MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    nameWithType: IEnumerator.MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IEnumerator.Reset
  commentId: M:System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: true
  name: Reset()
  nameWithType: IEnumerator.Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    nameWithType: IEnumerator.Reset
    fullName: System.Collections.IEnumerator.Reset
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
