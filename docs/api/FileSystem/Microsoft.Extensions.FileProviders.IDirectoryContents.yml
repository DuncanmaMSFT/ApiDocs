### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.IDirectoryContents
  id: IDirectoryContents
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  langs:
  - csharp
  - vb
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: IDirectoryContents
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IDirectoryContents.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nRepresents a directory's content in the file provider.\n"
  example: []
  syntax:
    content: 'public interface IDirectoryContents : IEnumerable<IFileInfo>, IEnumerable'
    content.vb: >-
      Public Interface IDirectoryContents
          Inherits IEnumerable(Of IFileInfo)
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  commentId: P:Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  id: Exists
  parent: Microsoft.Extensions.FileProviders.IDirectoryContents
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: IDirectoryContents.Exists
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents.Exists
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IDirectoryContents.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Exists
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IDirectoryContents.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nTrue if a directory was located at the given path.\n"
  example: []
  syntax:
    content: bool Exists { get; }
    content.vb: ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<IFileInfo>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Extensions.FileProviders.IFileInfo>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of IFileInfo).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.FileProviders.IFileInfo).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<IFileInfo>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<Microsoft.Extensions.FileProviders.IFileInfo>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of IFileInfo).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.FileProviders.IFileInfo).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IFileInfo>
  nameWithType: IEnumerable<IFileInfo>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Extensions.FileProviders.IFileInfo>
  nameWithType.vb: IEnumerable(Of IFileInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.FileProviders.IFileInfo)
  name.vb: IEnumerable(Of IFileInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.FileProviders.IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.FileProviders.IFileInfo
    name: IFileInfo
    nameWithType: IFileInfo
    fullName: Microsoft.Extensions.FileProviders.IFileInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
