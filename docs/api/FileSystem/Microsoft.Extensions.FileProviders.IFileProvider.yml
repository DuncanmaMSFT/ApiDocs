### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileProviders.IFileProvider
  commentId: T:Microsoft.Extensions.FileProviders.IFileProvider
  id: IFileProvider
  parent: Microsoft.Extensions.FileProviders
  children:
  - Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  - Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  - Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  langs:
  - csharp
  - vb
  name: IFileProvider
  nameWithType: IFileProvider
  fullName: Microsoft.Extensions.FileProviders.IFileProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: IFileProvider
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nA read-only file provider abstraction.\n"
  example: []
  syntax:
    content: public interface IFileProvider
    content.vb: Public Interface IFileProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  id: GetFileInfo(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  langs:
  - csharp
  - vb
  name: GetFileInfo(String)
  nameWithType: IFileProvider.GetFileInfo(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetFileInfo(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetFileInfo
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nLocate a file at the given path.\n"
  example: []
  syntax:
    content: IFileInfo GetFileInfo(string subpath)
    content.vb: Function GetFileInfo(subpath As String) As IFileInfo
    parameters:
    - id: subpath
      type: System.String
      description: Relative path that identifies the file.
    return:
      type: Microsoft.Extensions.FileProviders.IFileInfo
      description: The file information. Caller must check Exists property.
- uid: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  id: GetDirectoryContents(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  langs:
  - csharp
  - vb
  name: GetDirectoryContents(String)
  nameWithType: IFileProvider.GetDirectoryContents(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetDirectoryContents
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nEnumerate a directory at the given path, if any.\n"
  example: []
  syntax:
    content: IDirectoryContents GetDirectoryContents(string subpath)
    content.vb: Function GetDirectoryContents(subpath As String) As IDirectoryContents
    parameters:
    - id: subpath
      type: System.String
      description: Relative path that identifies the directory.
    return:
      type: Microsoft.Extensions.FileProviders.IDirectoryContents
      description: Returns the contents of the directory.
- uid: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  commentId: M:Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  id: Watch(System.String)
  parent: Microsoft.Extensions.FileProviders.IFileProvider
  langs:
  - csharp
  - vb
  name: Watch(String)
  nameWithType: IFileProvider.Watch(String)
  fullName: Microsoft.Extensions.FileProviders.IFileProvider.Watch(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Watch
    path: src/Microsoft.Extensions.FileProviders.Abstractions/IFileProvider.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileProviders.Abstractions
  namespace: Microsoft.Extensions.FileProviders
  summary: "\nCreates a <xref href=\"Microsoft.Extensions.Primitives.IChangeToken\" data-throw-if-not-resolved=\"false\"></xref> for the specified <em>filter</em>.\n"
  example: []
  syntax:
    content: IChangeToken Watch(string filter)
    content.vb: Function Watch(filter As String) As IChangeToken
    parameters:
    - id: filter
      type: System.String
      description: 'Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.'
    return:
      type: Microsoft.Extensions.Primitives.IChangeToken
      description: An <xref href="Microsoft.Extensions.Primitives.IChangeToken" data-throw-if-not-resolved="false"></xref> that is notified when a file matching <em>filter</em> is added, modified or deleted.
references:
- uid: Microsoft.Extensions.FileProviders
  commentId: N:Microsoft.Extensions.FileProviders
  isExternal: false
  name: Microsoft.Extensions.FileProviders
  nameWithType: Microsoft.Extensions.FileProviders
  fullName: Microsoft.Extensions.FileProviders
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.FileProviders.IFileInfo
  commentId: T:Microsoft.Extensions.FileProviders.IFileInfo
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IFileInfo
  nameWithType: IFileInfo
  fullName: Microsoft.Extensions.FileProviders.IFileInfo
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileProviders.IDirectoryContents
  commentId: T:Microsoft.Extensions.FileProviders.IDirectoryContents
  parent: Microsoft.Extensions.FileProviders
  isExternal: false
  name: IDirectoryContents
  nameWithType: IDirectoryContents
  fullName: Microsoft.Extensions.FileProviders.IDirectoryContents
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
