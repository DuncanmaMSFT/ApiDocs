### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  id: LiteralPathSegment
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  children:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.#ctor(System.String,System.StringComparison)
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.CanProduceStem
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Equals(System.Object)
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.GetHashCode
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Match(System.String)
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Value
  langs:
  - csharp
  - vb
  name: LiteralPathSegment
  nameWithType: LiteralPathSegment
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: LiteralPathSegment
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: 'public class LiteralPathSegment : IPathSegment'
    content.vb: >-
      Public Class LiteralPathSegment
          Implements IPathSegment
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.CanProduceStem
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.CanProduceStem
  id: CanProduceStem
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: CanProduceStem
  nameWithType: LiteralPathSegment.CanProduceStem
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.CanProduceStem
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: CanProduceStem
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public bool CanProduceStem { get; }
    content.vb: Public ReadOnly Property CanProduceStem As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.#ctor(System.String,System.StringComparison)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.#ctor(System.String,System.StringComparison)
  id: '#ctor(System.String,System.StringComparison)'
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: LiteralPathSegment(String, StringComparison)
  nameWithType: LiteralPathSegment.LiteralPathSegment(String, StringComparison)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.LiteralPathSegment(System.String, System.StringComparison)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public LiteralPathSegment(string value, StringComparison comparisonType)
    content.vb: Public Sub New(value As String, comparisonType As StringComparison)
    parameters:
    - id: value
      type: System.String
    - id: comparisonType
      type: System.StringComparison
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Value
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Value
  id: Value
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: LiteralPathSegment.Value
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Value
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Match(System.String)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Match(System.String)
  id: Match(System.String)
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: Match(String)
  nameWithType: LiteralPathSegment.Match(String)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Match(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Match
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public bool Match(string value)
    content.vb: Public Function Match(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Equals(System.Object)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: LiteralPathSegment.Equals(Object)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Equals
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 33
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.GetHashCode
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.GetHashCode
  id: GetHashCode
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: LiteralPathSegment.GetHashCode()
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.LiteralPathSegment.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: GetHashCode
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/LiteralPathSegment.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  commentId: N:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  isExternal: false
  name: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  nameWithType: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal
  isExternal: false
  name: IPathSegment
  nameWithType: IPathSegment
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal
  commentId: N:Microsoft.Extensions.FileSystemGlobbing.Internal
  isExternal: false
  name: Microsoft.Extensions.FileSystemGlobbing.Internal
  nameWithType: Microsoft.Extensions.FileSystemGlobbing.Internal
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  isExternal: false
  name: CanProduceStem
  nameWithType: IPathSegment.CanProduceStem
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  isExternal: true
  name: Match(String)
  nameWithType: IPathSegment.Match(String)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
    name: Match
    nameWithType: IPathSegment.Match
    fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
    name: Match
    nameWithType: IPathSegment.Match
    fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
