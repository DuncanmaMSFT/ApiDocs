### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  id: WildcardPathSegment
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  children:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.#ctor(System.String,System.Collections.Generic.List{System.String},System.String,System.StringComparison)
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.BeginsWith
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.CanProduceStem
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Contains
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.EndsWith
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Match(System.String)
  - Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.MatchAll
  langs:
  - csharp
  - vb
  name: WildcardPathSegment
  nameWithType: WildcardPathSegment
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: WildcardPathSegment
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: 'public class WildcardPathSegment : IPathSegment'
    content.vb: >-
      Public Class WildcardPathSegment
          Implements IPathSegment
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.MatchAll
  commentId: F:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.MatchAll
  id: MatchAll
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: MatchAll
  nameWithType: WildcardPathSegment.MatchAll
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.MatchAll
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: MatchAll
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public static readonly WildcardPathSegment MatchAll
    content.vb: Public Shared ReadOnly MatchAll As WildcardPathSegment
    return:
      type: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.#ctor(System.String,System.Collections.Generic.List{System.String},System.String,System.StringComparison)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.#ctor(System.String,System.Collections.Generic.List{System.String},System.String,System.StringComparison)
  id: '#ctor(System.String,System.Collections.Generic.List{System.String},System.String,System.StringComparison)'
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: WildcardPathSegment(String, List<String>, String, StringComparison)
  nameWithType: WildcardPathSegment.WildcardPathSegment(String, List<String>, String, StringComparison)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.WildcardPathSegment(System.String, System.Collections.Generic.List<System.String>, System.String, System.StringComparison)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: .ctor
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public WildcardPathSegment(string beginsWith, List<string> contains, string endsWith, StringComparison comparisonType)
    content.vb: Public Sub New(beginsWith As String, contains As List(Of String), endsWith As String, comparisonType As StringComparison)
    parameters:
    - id: beginsWith
      type: System.String
    - id: contains
      type: System.Collections.Generic.List{System.String}
    - id: endsWith
      type: System.String
    - id: comparisonType
      type: System.StringComparison
  nameWithType.vb: WildcardPathSegment.WildcardPathSegment(String, List(Of String), String, StringComparison)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.WildcardPathSegment(System.String, System.Collections.Generic.List(Of System.String), System.String, System.StringComparison)
  name.vb: WildcardPathSegment(String, List(Of String), String, StringComparison)
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.CanProduceStem
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.CanProduceStem
  id: CanProduceStem
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: CanProduceStem
  nameWithType: WildcardPathSegment.CanProduceStem
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.CanProduceStem
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: CanProduceStem
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 25
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public bool CanProduceStem { get; }
    content.vb: Public ReadOnly Property CanProduceStem As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.BeginsWith
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.BeginsWith
  id: BeginsWith
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: BeginsWith
  nameWithType: WildcardPathSegment.BeginsWith
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.BeginsWith
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: BeginsWith
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public string BeginsWith { get; }
    content.vb: Public ReadOnly Property BeginsWith As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Contains
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Contains
  id: Contains
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: Contains
  nameWithType: WildcardPathSegment.Contains
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Contains
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Contains
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public List<string> Contains { get; }
    content.vb: Public ReadOnly Property Contains As List(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.EndsWith
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.EndsWith
  id: EndsWith
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: EndsWith
  nameWithType: WildcardPathSegment.EndsWith
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.EndsWith
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: EndsWith
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public string EndsWith { get; }
    content.vb: Public ReadOnly Property EndsWith As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Match(System.String)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Match(System.String)
  id: Match(System.String)
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  langs:
  - csharp
  - vb
  name: Match(String)
  nameWithType: WildcardPathSegment.Match(String)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment.Match(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
      branch: master
      repo: https://github.com/aspnet/FileSystem.git
    id: Match
    path: src/Microsoft.Extensions.FileSystemGlobbing/Internal/PathSegments/WildcardPathSegment.cs
    startLine: 33
  assemblies:
  - Microsoft.Extensions.FileSystemGlobbing
  namespace: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  syntax:
    content: public bool Match(string value)
    content.vb: Public Function Match(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  commentId: N:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  isExternal: false
  name: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  nameWithType: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal
  isExternal: false
  name: IPathSegment
  nameWithType: IPathSegment
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal
  commentId: N:Microsoft.Extensions.FileSystemGlobbing.Internal
  isExternal: false
  name: Microsoft.Extensions.FileSystemGlobbing.Internal
  nameWithType: Microsoft.Extensions.FileSystemGlobbing.Internal
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  commentId: T:Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
  isExternal: false
  name: WildcardPathSegment
  nameWithType: WildcardPathSegment
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments.WildcardPathSegment
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullname.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  commentId: P:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  isExternal: false
  name: CanProduceStem
  nameWithType: IPathSegment.CanProduceStem
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.CanProduceStem
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  commentId: M:Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  parent: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment
  isExternal: true
  name: Match(String)
  nameWithType: IPathSegment.Match(String)
  fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
    name: Match
    nameWithType: IPathSegment.Match
    fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match(System.String)
    name: Match
    nameWithType: IPathSegment.Match
    fullName: Microsoft.Extensions.FileSystemGlobbing.Internal.IPathSegment.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
