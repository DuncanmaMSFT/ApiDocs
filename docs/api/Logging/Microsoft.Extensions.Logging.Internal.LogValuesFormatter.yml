### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  commentId: T:Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  id: LogValuesFormatter
  parent: Microsoft.Extensions.Logging.Internal
  children:
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  - Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  langs:
  - csharp
  - vb
  name: LogValuesFormatter
  nameWithType: LogValuesFormatter
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValuesFormatter
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  summary: "\nFormatter to convert the named format items like {NamedformatItem} to <xref href=\"string.Format\" data-throw-if-not-resolved=\"false\"></xref> format.\n"
  example: []
  syntax:
    content: public class LogValuesFormatter
    content.vb: Public Class LogValuesFormatter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  commentId: P:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  id: OriginalFormat
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: OriginalFormat
  nameWithType: LogValuesFormatter.OriginalFormat
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.OriginalFormat
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: OriginalFormat
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public string OriginalFormat { get; }
    content.vb: Public ReadOnly Property OriginalFormat As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  commentId: P:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  id: ValueNames
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: ValueNames
  nameWithType: LogValuesFormatter.ValueNames
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.ValueNames
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ValueNames
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public List<string> ValueNames { get; }
    content.vb: Public ReadOnly Property ValueNames As List(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: LogValuesFormatter(String)
  nameWithType: LogValuesFormatter.LogValuesFormatter(String)
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.LogValuesFormatter(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public LogValuesFormatter(string format)
    content.vb: Public Sub New(format As String)
    parameters:
    - id: format
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  id: Format(System.Object[])
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: Format(Object[])
  nameWithType: LogValuesFormatter.Format(Object[])
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Format
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 116
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public string Format(object[] values)
    content.vb: Public Function Format(values As Object()) As String
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.String
  nameWithType.vb: LogValuesFormatter.Format(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.Format(System.Object())
  name.vb: Format(Object())
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[],System.Int32)
  id: GetValue(System.Object[],System.Int32)
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: GetValue(Object[], Int32)
  nameWithType: LogValuesFormatter.GetValue(Object[], Int32)
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: GetValue
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 147
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public KeyValuePair<string, object> GetValue(object[] values, int index)
    content.vb: Public Function GetValue(values As Object(), index As Integer) As KeyValuePair(Of String, Object)
    parameters:
    - id: values
      type: System.Object[]
    - id: index
      type: System.Int32
    return:
      type: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  nameWithType.vb: LogValuesFormatter.GetValue(Object(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValue(System.Object(), System.Int32)
  name.vb: GetValue(Object(), Int32)
- uid: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: Microsoft.Extensions.Logging.Internal.LogValuesFormatter
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  nameWithType: LogValuesFormatter.GetValues(Object[])
  fullName: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: GetValues
    path: src/Microsoft.Extensions.Logging.Abstractions/Internal/LogValuesFormatter.cs
    startLine: 162
  assemblies:
  - Microsoft.Extensions.Logging.Abstractions
  namespace: Microsoft.Extensions.Logging.Internal
  syntax:
    content: public IEnumerable<KeyValuePair<string, object>> GetValues(object[] values)
    content.vb: Public Function GetValues(values As Object()) As IEnumerable(Of KeyValuePair(Of String, Object))
    parameters:
    - id: values
      type: System.Object[]
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  nameWithType.vb: LogValuesFormatter.GetValues(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Internal.LogValuesFormatter.GetValues(System.Object())
  name.vb: GetValues(Object())
references:
- uid: string.Format
  commentId: M:string.Format
- uid: Microsoft.Extensions.Logging.Internal
  commentId: N:Microsoft.Extensions.Logging.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Internal
  nameWithType: Microsoft.Extensions.Logging.Internal
  fullName: Microsoft.Extensions.Logging.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullname.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.KeyValuePair{System.String,System.Object}
  commentId: T:System.Collections.Generic.KeyValuePair{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<String, Object>
  nameWithType: KeyValuePair<String, Object>
  fullName: System.Collections.Generic.KeyValuePair<System.String, System.Object>
  nameWithType.vb: KeyValuePair(Of String, Object)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of System.String, System.Object)
  name.vb: KeyValuePair(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, Object>>
  nameWithType: IEnumerable<KeyValuePair<String, Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))
  name.vb: IEnumerable(Of KeyValuePair(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
