### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions
  commentId: T:Microsoft.Extensions.Logging.TestLoggerExtensions
  id: TestLoggerExtensions
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ActionMatched(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParam(Microsoft.Extensions.Logging.ILogger,System.String)
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithoutAnyParams(Microsoft.Extensions.Logging.ILogger)
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithThreeParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Int32)
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithTwoParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String)
  langs:
  - csharp
  - vb
  name: TestLoggerExtensions
  nameWithType: TestLoggerExtensions
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: TestLoggerExtensions
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static class TestLoggerExtensions
    content.vb: Public Module TestLoggerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ActionMatched(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)
  commentId: M:Microsoft.Extensions.Logging.TestLoggerExtensions.ActionMatched(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)
  id: ActionMatched(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Exception)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions
  langs:
  - csharp
  - vb
  name: ActionMatched(ILogger, String, String, Exception)
  nameWithType: TestLoggerExtensions.ActionMatched(ILogger, String, String, Exception)
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ActionMatched(Microsoft.Extensions.Logging.ILogger, System.String, System.String, System.Exception)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ActionMatched
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 72
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static void ActionMatched(this ILogger logger, string controller, string action, Exception exception = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ActionMatched(logger As ILogger, controller As String, action As String, exception As Exception = Nothing)
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    - id: controller
      type: System.String
    - id: action
      type: System.String
    - id: exception
      type: System.Exception
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithoutAnyParams(Microsoft.Extensions.Logging.ILogger)
  commentId: M:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithoutAnyParams(Microsoft.Extensions.Logging.ILogger)
  id: ScopeWithoutAnyParams(Microsoft.Extensions.Logging.ILogger)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions
  langs:
  - csharp
  - vb
  name: ScopeWithoutAnyParams(ILogger)
  nameWithType: TestLoggerExtensions.ScopeWithoutAnyParams(ILogger)
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithoutAnyParams(Microsoft.Extensions.Logging.ILogger)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeWithoutAnyParams
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static IDisposable ScopeWithoutAnyParams(this ILogger logger)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScopeWithoutAnyParams(logger As ILogger) As IDisposable
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    return:
      type: System.IDisposable
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParam(Microsoft.Extensions.Logging.ILogger,System.String)
  commentId: M:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParam(Microsoft.Extensions.Logging.ILogger,System.String)
  id: ScopeWithOneParam(Microsoft.Extensions.Logging.ILogger,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions
  langs:
  - csharp
  - vb
  name: ScopeWithOneParam(ILogger, String)
  nameWithType: TestLoggerExtensions.ScopeWithOneParam(ILogger, String)
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParam(Microsoft.Extensions.Logging.ILogger, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeWithOneParam
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static IDisposable ScopeWithOneParam(this ILogger logger, string requestId)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScopeWithOneParam(logger As ILogger, requestId As String) As IDisposable
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    - id: requestId
      type: System.String
    return:
      type: System.IDisposable
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithTwoParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String)
  commentId: M:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithTwoParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String)
  id: ScopeWithTwoParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions
  langs:
  - csharp
  - vb
  name: ScopeWithTwoParams(ILogger, String, String)
  nameWithType: TestLoggerExtensions.ScopeWithTwoParams(ILogger, String, String)
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithTwoParams(Microsoft.Extensions.Logging.ILogger, System.String, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeWithTwoParams
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 88
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static IDisposable ScopeWithTwoParams(this ILogger logger, string param1, string param2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScopeWithTwoParams(logger As ILogger, param1 As String, param2 As String) As IDisposable
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    - id: param1
      type: System.String
    - id: param2
      type: System.String
    return:
      type: System.IDisposable
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithThreeParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Int32)
  commentId: M:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithThreeParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Int32)
  id: ScopeWithThreeParams(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.Int32)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions
  langs:
  - csharp
  - vb
  name: ScopeWithThreeParams(ILogger, String, String, Int32)
  nameWithType: TestLoggerExtensions.ScopeWithThreeParams(ILogger, String, String, Int32)
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithThreeParams(Microsoft.Extensions.Logging.ILogger, System.String, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeWithThreeParams
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 93
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static IDisposable ScopeWithThreeParams(this ILogger logger, string param1, string param2, int param3)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ScopeWithThreeParams(logger As ILogger, param1 As String, param2 As String, param3 As Integer) As IDisposable
    parameters:
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    - id: param1
      type: System.String
    - id: param2
      type: System.String
    - id: param3
      type: System.Int32
    return:
      type: System.IDisposable
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
