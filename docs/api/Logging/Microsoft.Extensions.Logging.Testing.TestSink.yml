### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Testing.TestSink
  commentId: T:Microsoft.Extensions.Logging.Testing.TestSink
  id: TestSink
  parent: Microsoft.Extensions.Logging.Testing
  children:
  - Microsoft.Extensions.Logging.Testing.TestSink.#ctor(System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean},System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean})
  - Microsoft.Extensions.Logging.Testing.TestSink.Begin(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  - Microsoft.Extensions.Logging.Testing.TestSink.BeginEnabled
  - Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  - Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.WriteContext)
  - Microsoft.Extensions.Logging.Testing.TestSink.Scopes
  - Microsoft.Extensions.Logging.Testing.TestSink.Write(Microsoft.Extensions.Logging.Testing.WriteContext)
  - Microsoft.Extensions.Logging.Testing.TestSink.WriteEnabled
  - Microsoft.Extensions.Logging.Testing.TestSink.Writes
  langs:
  - csharp
  - vb
  name: TestSink
  nameWithType: TestSink
  fullName: Microsoft.Extensions.Logging.Testing.TestSink
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: TestSink
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public class TestSink
    content.vb: Public Class TestSink
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Testing.TestSink.#ctor(System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean},System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean})
  commentId: M:Microsoft.Extensions.Logging.Testing.TestSink.#ctor(System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean},System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean})
  id: '#ctor(System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean},System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean})'
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: TestSink(Func<WriteContext, Boolean>, Func<BeginScopeContext, Boolean>)
  nameWithType: TestSink.TestSink(Func<WriteContext, Boolean>, Func<BeginScopeContext, Boolean>)
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.TestSink(System.Func<Microsoft.Extensions.Logging.Testing.WriteContext, System.Boolean>, System.Func<Microsoft.Extensions.Logging.Testing.BeginScopeContext, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public TestSink(Func<WriteContext, bool> writeEnabled = null, Func<BeginScopeContext, bool> beginEnabled = null)
    content.vb: Public Sub New(writeEnabled As Func(Of WriteContext, Boolean) = Nothing, beginEnabled As Func(Of BeginScopeContext, Boolean) = Nothing)
    parameters:
    - id: writeEnabled
      type: System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean}
    - id: beginEnabled
      type: System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean}
  nameWithType.vb: TestSink.TestSink(Func(Of WriteContext, Boolean), Func(Of BeginScopeContext, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Testing.TestSink.TestSink(System.Func(Of Microsoft.Extensions.Logging.Testing.WriteContext, System.Boolean), System.Func(Of Microsoft.Extensions.Logging.Testing.BeginScopeContext, System.Boolean))
  name.vb: TestSink(Func(Of WriteContext, Boolean), Func(Of BeginScopeContext, Boolean))
- uid: Microsoft.Extensions.Logging.Testing.TestSink.WriteEnabled
  commentId: P:Microsoft.Extensions.Logging.Testing.TestSink.WriteEnabled
  id: WriteEnabled
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: WriteEnabled
  nameWithType: TestSink.WriteEnabled
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.WriteEnabled
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: WriteEnabled
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public Func<WriteContext, bool> WriteEnabled { get; set; }
    content.vb: Public Property WriteEnabled As Func(Of WriteContext, Boolean)
    parameters: []
    return:
      type: System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.BeginEnabled
  commentId: P:Microsoft.Extensions.Logging.Testing.TestSink.BeginEnabled
  id: BeginEnabled
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: BeginEnabled
  nameWithType: TestSink.BeginEnabled
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.BeginEnabled
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: BeginEnabled
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public Func<BeginScopeContext, bool> BeginEnabled { get; set; }
    content.vb: Public Property BeginEnabled As Func(Of BeginScopeContext, Boolean)
    parameters: []
    return:
      type: System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.Scopes
  commentId: P:Microsoft.Extensions.Logging.Testing.TestSink.Scopes
  id: Scopes
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: Scopes
  nameWithType: TestSink.Scopes
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.Scopes
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Scopes
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 25
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public List<BeginScopeContext> Scopes { get; set; }
    content.vb: Public Property Scopes As List(Of BeginScopeContext)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.BeginScopeContext}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.Writes
  commentId: P:Microsoft.Extensions.Logging.Testing.TestSink.Writes
  id: Writes
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: Writes
  nameWithType: TestSink.Writes
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.Writes
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Writes
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public List<WriteContext> Writes { get; set; }
    content.vb: Public Property Writes As List(Of WriteContext)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.WriteContext}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.Write(Microsoft.Extensions.Logging.Testing.WriteContext)
  commentId: M:Microsoft.Extensions.Logging.Testing.TestSink.Write(Microsoft.Extensions.Logging.Testing.WriteContext)
  id: Write(Microsoft.Extensions.Logging.Testing.WriteContext)
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: Write(WriteContext)
  nameWithType: TestSink.Write(WriteContext)
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.Write(Microsoft.Extensions.Logging.Testing.WriteContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Write
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 29
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public void Write(WriteContext context)
    content.vb: Public Sub Write(context As WriteContext)
    parameters:
    - id: context
      type: Microsoft.Extensions.Logging.Testing.WriteContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.Begin(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  commentId: M:Microsoft.Extensions.Logging.Testing.TestSink.Begin(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  id: Begin(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: Begin(BeginScopeContext)
  nameWithType: TestSink.Begin(BeginScopeContext)
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.Begin(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Begin
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public void Begin(BeginScopeContext context)
    content.vb: Public Sub Begin(context As BeginScopeContext)
    parameters:
    - id: context
      type: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.WriteContext)
  commentId: M:Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.WriteContext)
  id: EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.WriteContext)
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: EnableWithTypeName<T>(WriteContext)
  nameWithType: TestSink.EnableWithTypeName<T>(WriteContext)
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName<T>(Microsoft.Extensions.Logging.Testing.WriteContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EnableWithTypeName
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 45
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public static bool EnableWithTypeName<T>(WriteContext context)
    content.vb: Public Shared Function EnableWithTypeName(Of T)(context As WriteContext) As Boolean
    parameters:
    - id: context
      type: Microsoft.Extensions.Logging.Testing.WriteContext
    typeParameters:
    - id: T
    return:
      type: System.Boolean
  nameWithType.vb: TestSink.EnableWithTypeName(Of T)(WriteContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName(Of T)(Microsoft.Extensions.Logging.Testing.WriteContext)
  name.vb: EnableWithTypeName(Of T)(WriteContext)
- uid: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  commentId: M:Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  id: EnableWithTypeName``1(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  parent: Microsoft.Extensions.Logging.Testing.TestSink
  langs:
  - csharp
  - vb
  name: EnableWithTypeName<T>(BeginScopeContext)
  nameWithType: TestSink.EnableWithTypeName<T>(BeginScopeContext)
  fullName: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName<T>(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EnableWithTypeName
    path: src/Microsoft.Extensions.Logging.Testing/TestSink.cs
    startLine: 50
  assemblies:
  - Microsoft.Extensions.Logging.Testing
  namespace: Microsoft.Extensions.Logging.Testing
  syntax:
    content: public static bool EnableWithTypeName<T>(BeginScopeContext context)
    content.vb: Public Shared Function EnableWithTypeName(Of T)(context As BeginScopeContext) As Boolean
    parameters:
    - id: context
      type: Microsoft.Extensions.Logging.Testing.BeginScopeContext
    typeParameters:
    - id: T
    return:
      type: System.Boolean
  nameWithType.vb: TestSink.EnableWithTypeName(Of T)(BeginScopeContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.Testing.TestSink.EnableWithTypeName(Of T)(Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  name.vb: EnableWithTypeName(Of T)(BeginScopeContext)
references:
- uid: Microsoft.Extensions.Logging.Testing
  commentId: N:Microsoft.Extensions.Logging.Testing
  isExternal: false
  name: Microsoft.Extensions.Logging.Testing
  nameWithType: Microsoft.Extensions.Logging.Testing
  fullName: Microsoft.Extensions.Logging.Testing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean}
  commentId: T:System.Func{Microsoft.Extensions.Logging.Testing.WriteContext,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<WriteContext, Boolean>
  nameWithType: Func<WriteContext, Boolean>
  fullName: System.Func<Microsoft.Extensions.Logging.Testing.WriteContext, System.Boolean>
  nameWithType.vb: Func(Of WriteContext, Boolean)
  fullname.vb: System.Func(Of Microsoft.Extensions.Logging.Testing.WriteContext, System.Boolean)
  name.vb: Func(Of WriteContext, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.Testing.WriteContext
    name: WriteContext
    nameWithType: WriteContext
    fullName: Microsoft.Extensions.Logging.Testing.WriteContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.Testing.WriteContext
    name: WriteContext
    nameWithType: WriteContext
    fullName: Microsoft.Extensions.Logging.Testing.WriteContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean}
  commentId: T:System.Func{Microsoft.Extensions.Logging.Testing.BeginScopeContext,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<BeginScopeContext, Boolean>
  nameWithType: Func<BeginScopeContext, Boolean>
  fullName: System.Func<Microsoft.Extensions.Logging.Testing.BeginScopeContext, System.Boolean>
  nameWithType.vb: Func(Of BeginScopeContext, Boolean)
  fullname.vb: System.Func(Of Microsoft.Extensions.Logging.Testing.BeginScopeContext, System.Boolean)
  name.vb: Func(Of BeginScopeContext, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.Testing.BeginScopeContext
    name: BeginScopeContext
    nameWithType: BeginScopeContext
    fullName: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.Testing.BeginScopeContext
    name: BeginScopeContext
    nameWithType: BeginScopeContext
    fullName: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.BeginScopeContext}
  commentId: T:System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.BeginScopeContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BeginScopeContext>
  nameWithType: List<BeginScopeContext>
  fullName: System.Collections.Generic.List<Microsoft.Extensions.Logging.Testing.BeginScopeContext>
  nameWithType.vb: List(Of BeginScopeContext)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.Extensions.Logging.Testing.BeginScopeContext)
  name.vb: List(Of BeginScopeContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.Testing.BeginScopeContext
    name: BeginScopeContext
    nameWithType: BeginScopeContext
    fullName: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.Testing.BeginScopeContext
    name: BeginScopeContext
    nameWithType: BeginScopeContext
    fullName: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.WriteContext}
  commentId: T:System.Collections.Generic.List{Microsoft.Extensions.Logging.Testing.WriteContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<WriteContext>
  nameWithType: List<WriteContext>
  fullName: System.Collections.Generic.List<Microsoft.Extensions.Logging.Testing.WriteContext>
  nameWithType.vb: List(Of WriteContext)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.Extensions.Logging.Testing.WriteContext)
  name.vb: List(Of WriteContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.Testing.WriteContext
    name: WriteContext
    nameWithType: WriteContext
    fullName: Microsoft.Extensions.Logging.Testing.WriteContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.Testing.WriteContext
    name: WriteContext
    nameWithType: WriteContext
    fullName: Microsoft.Extensions.Logging.Testing.WriteContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Testing.WriteContext
  commentId: T:Microsoft.Extensions.Logging.Testing.WriteContext
  parent: Microsoft.Extensions.Logging.Testing
  isExternal: false
  name: WriteContext
  nameWithType: WriteContext
  fullName: Microsoft.Extensions.Logging.Testing.WriteContext
- uid: Microsoft.Extensions.Logging.Testing.BeginScopeContext
  commentId: T:Microsoft.Extensions.Logging.Testing.BeginScopeContext
  parent: Microsoft.Extensions.Logging.Testing
  isExternal: false
  name: BeginScopeContext
  nameWithType: BeginScopeContext
  fullName: Microsoft.Extensions.Logging.Testing.BeginScopeContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
