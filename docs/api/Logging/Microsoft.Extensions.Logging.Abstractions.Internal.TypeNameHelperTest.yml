### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  commentId: T:Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  id: TypeNameHelperTest
  parent: Microsoft.Extensions.Logging.Abstractions.Internal
  children:
  - Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.BuiltInTypesData
  - Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.Can_PrettyPrint_FullTypeName(System.Type,System.String)
  - Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.FullTypeNameData
  - Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.ReturnsCommonName_ForBuiltinTypes(System.Type,System.String)
  langs:
  - csharp
  - vb
  name: TypeNameHelperTest
  nameWithType: TypeNameHelperTest
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: TypeNameHelperTest
    path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Abstractions.Internal
  syntax:
    content: public class TypeNameHelperTest
    content.vb: Public Class TypeNameHelperTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.FullTypeNameData
  commentId: P:Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.FullTypeNameData
  id: FullTypeNameData
  parent: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  langs:
  - csharp
  - vb
  name: FullTypeNameData
  nameWithType: TypeNameHelperTest.FullTypeNameData
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.FullTypeNameData
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FullTypeNameData
    path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Abstractions.Internal
  syntax:
    content: public static TheoryData<Type, string> FullTypeNameData { get; }
    content.vb: Public Shared ReadOnly Property FullTypeNameData As TheoryData(Of Type, String)
    parameters: []
    return:
      type: Xunit.TheoryData{System.Type,System.String}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.Can_PrettyPrint_FullTypeName(System.Type,System.String)
  commentId: M:Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.Can_PrettyPrint_FullTypeName(System.Type,System.String)
  id: Can_PrettyPrint_FullTypeName(System.Type,System.String)
  parent: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  langs:
  - csharp
  - vb
  name: Can_PrettyPrint_FullTypeName(Type, String)
  nameWithType: TypeNameHelperTest.Can_PrettyPrint_FullTypeName(Type, String)
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.Can_PrettyPrint_FullTypeName(System.Type, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Can_PrettyPrint_FullTypeName
    path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
    startLine: 41
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Abstractions.Internal
  syntax:
    content: >-
      [Theory]

      [MemberData("FullTypeNameData", new object[]{})]

      public void Can_PrettyPrint_FullTypeName(Type type, string expectedTypeName)
    content.vb: >-
      <Theory>

      <MemberData("FullTypeNameData", New Object() {})>

      Public Sub Can_PrettyPrint_FullTypeName(type As Type, expectedTypeName As String)
    parameters:
    - id: type
      type: System.Type
    - id: expectedTypeName
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.BuiltInTypesData
  commentId: P:Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.BuiltInTypesData
  id: BuiltInTypesData
  parent: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  langs:
  - csharp
  - vb
  name: BuiltInTypesData
  nameWithType: TypeNameHelperTest.BuiltInTypesData
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.BuiltInTypesData
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: BuiltInTypesData
    path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
    startLine: 52
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Abstractions.Internal
  syntax:
    content: public static TheoryData<Type, string> BuiltInTypesData { get; }
    content.vb: Public Shared ReadOnly Property BuiltInTypesData As TheoryData(Of Type, String)
    parameters: []
    return:
      type: Xunit.TheoryData{System.Type,System.String}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.ReturnsCommonName_ForBuiltinTypes(System.Type,System.String)
  commentId: M:Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.ReturnsCommonName_ForBuiltinTypes(System.Type,System.String)
  id: ReturnsCommonName_ForBuiltinTypes(System.Type,System.String)
  parent: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest
  langs:
  - csharp
  - vb
  name: ReturnsCommonName_ForBuiltinTypes(Type, String)
  nameWithType: TypeNameHelperTest.ReturnsCommonName_ForBuiltinTypes(Type, String)
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal.TypeNameHelperTest.ReturnsCommonName_ForBuiltinTypes(System.Type, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ReturnsCommonName_ForBuiltinTypes
    path: test/Microsoft.Extensions.Logging.Test/TypeNameHelperTest.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Abstractions.Internal
  syntax:
    content: >-
      [Theory]

      [MemberData("BuiltInTypesData", new object[]{})]

      public void ReturnsCommonName_ForBuiltinTypes(Type type, string expectedTypeName)
    content.vb: >-
      <Theory>

      <MemberData("BuiltInTypesData", New Object() {})>

      Public Sub ReturnsCommonName_ForBuiltinTypes(type As Type, expectedTypeName As String)
    parameters:
    - id: type
      type: System.Type
    - id: expectedTypeName
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Logging.Abstractions.Internal
  commentId: N:Microsoft.Extensions.Logging.Abstractions.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Abstractions.Internal
  nameWithType: Microsoft.Extensions.Logging.Abstractions.Internal
  fullName: Microsoft.Extensions.Logging.Abstractions.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.TheoryData{System.Type,System.String}
  commentId: T:Xunit.TheoryData{System.Type,System.String}
  parent: Xunit
  definition: Xunit.TheoryData`2
  name: TheoryData<Type, String>
  nameWithType: TheoryData<Type, String>
  fullName: Xunit.TheoryData<System.Type, System.String>
  nameWithType.vb: TheoryData(Of Type, String)
  fullname.vb: Xunit.TheoryData(Of System.Type, System.String)
  name.vb: TheoryData(Of Type, String)
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit.TheoryData`2
  commentId: T:Xunit.TheoryData`2
  isExternal: true
  name: TheoryData<T1, T2>
  nameWithType: TheoryData<T1, T2>
  fullName: Xunit.TheoryData<T1, T2>
  nameWithType.vb: TheoryData(Of T1, T2)
  fullname.vb: Xunit.TheoryData(Of T1, T2)
  name.vb: TheoryData(Of T1, T2)
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
