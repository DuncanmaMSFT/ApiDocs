### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger
  commentId: T:Microsoft.Extensions.Logging.Console.ConsoleLogger
  id: ConsoleLogger
  parent: Microsoft.Extensions.Logging.Console
  children:
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.#ctor(System.String,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.BeginScope``1(``0)
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.Console
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.Filter
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.IncludeScopes
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.Name
  - Microsoft.Extensions.Logging.Console.ConsoleLogger.WriteMessage(Microsoft.Extensions.Logging.LogLevel,System.String,System.Int32,System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: ConsoleLogger
  nameWithType: ConsoleLogger
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ConsoleLogger
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: 'public class ConsoleLogger : ILogger'
    content.vb: >-
      Public Class ConsoleLogger
          Implements ILogger
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Logging.ILogger
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.#ctor(System.String,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  commentId: M:Microsoft.Extensions.Logging.Console.ConsoleLogger.#ctor(System.String,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  id: '#ctor(System.String,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)'
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: ConsoleLogger(String, Func<String, LogLevel, Boolean>, Boolean)
  nameWithType: ConsoleLogger.ConsoleLogger(String, Func<String, LogLevel, Boolean>, Boolean)
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.ConsoleLogger(System.String, System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: .ctor
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public ConsoleLogger(string name, Func<string, LogLevel, bool> filter, bool includeScopes)
    content.vb: Public Sub New(name As String, filter As Func(Of String, LogLevel, Boolean), includeScopes As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: filter
      type: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
    - id: includeScopes
      type: System.Boolean
  nameWithType.vb: ConsoleLogger.ConsoleLogger(String, Func(Of String, LogLevel, Boolean), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Console.ConsoleLogger.ConsoleLogger(System.String, System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean), System.Boolean)
  name.vb: ConsoleLogger(String, Func(Of String, LogLevel, Boolean), Boolean)
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.Console
  commentId: P:Microsoft.Extensions.Logging.Console.ConsoleLogger.Console
  id: Console
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Console
  nameWithType: ConsoleLogger.Console
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.Console
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Console
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 53
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public IConsole Console { get; set; }
    content.vb: Public Property Console As IConsole
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.Console.Internal.IConsole
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.Filter
  commentId: P:Microsoft.Extensions.Logging.Console.ConsoleLogger.Filter
  id: Filter
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: ConsoleLogger.Filter
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.Filter
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Filter
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 67
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public Func<string, LogLevel, bool> Filter { get; set; }
    content.vb: Public Property Filter As Func(Of String, LogLevel, Boolean)
    parameters: []
    return:
      type: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.IncludeScopes
  commentId: P:Microsoft.Extensions.Logging.Console.ConsoleLogger.IncludeScopes
  id: IncludeScopes
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: IncludeScopes
  nameWithType: ConsoleLogger.IncludeScopes
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.IncludeScopes
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: IncludeScopes
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 81
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public bool IncludeScopes { get; set; }
    content.vb: Public Property IncludeScopes As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.Name
  commentId: P:Microsoft.Extensions.Logging.Console.ConsoleLogger.Name
  id: Name
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ConsoleLogger.Name
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Name
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 83
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  commentId: M:Microsoft.Extensions.Logging.Console.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  id: Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: ConsoleLogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Log
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 85
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    content.vb: Public Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
    - id: eventId
      type: Microsoft.Extensions.Logging.EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: System.Exception
    - id: formatter
      type: System.Func{{TState},System.Exception,System.String}
    typeParameters:
    - id: TState
  implements:
  - Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,{TState},System.Exception,System.Func{{TState},System.Exception,System.String})
  nameWithType.vb: ConsoleLogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Console.ConsoleLogger.Log(Of TState)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.WriteMessage(Microsoft.Extensions.Logging.LogLevel,System.String,System.Int32,System.String,System.Exception)
  commentId: M:Microsoft.Extensions.Logging.Console.ConsoleLogger.WriteMessage(Microsoft.Extensions.Logging.LogLevel,System.String,System.Int32,System.String,System.Exception)
  id: WriteMessage(Microsoft.Extensions.Logging.LogLevel,System.String,System.Int32,System.String,System.Exception)
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: WriteMessage(LogLevel, String, Int32, String, Exception)
  nameWithType: ConsoleLogger.WriteMessage(LogLevel, String, Int32, String, Exception)
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.WriteMessage(Microsoft.Extensions.Logging.LogLevel, System.String, System.Int32, System.String, System.Exception)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: WriteMessage
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 105
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public virtual void WriteMessage(LogLevel logLevel, string logName, int eventId, string message, Exception exception)
    content.vb: Public Overridable Sub WriteMessage(logLevel As LogLevel, logName As String, eventId As Integer, message As String, exception As Exception)
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
    - id: logName
      type: System.String
    - id: eventId
      type: System.Int32
    - id: message
      type: System.String
    - id: exception
      type: System.Exception
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  commentId: M:Microsoft.Extensions.Logging.Console.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  id: IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: ConsoleLogger.IsEnabled(LogLevel)
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: IsEnabled
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 198
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public bool IsEnabled(LogLevel logLevel)
    content.vb: Public Function IsEnabled(logLevel As LogLevel) As Boolean
    parameters:
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Console.ConsoleLogger.BeginScope``1(``0)
  commentId: M:Microsoft.Extensions.Logging.Console.ConsoleLogger.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Microsoft.Extensions.Logging.Console.ConsoleLogger
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: ConsoleLogger.BeginScope<TState>(TState)
  fullName: Microsoft.Extensions.Logging.Console.ConsoleLogger.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: BeginScope
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLogger.cs
    startLine: 203
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging.Console
  syntax:
    content: public IDisposable BeginScope<TState>(TState state)
    content.vb: Public Function BeginScope(Of TState)(state As TState) As IDisposable
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: System.IDisposable
  implements:
  - Microsoft.Extensions.Logging.ILogger.BeginScope``1({TState})
  nameWithType.vb: ConsoleLogger.BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Console.ConsoleLogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
references:
- uid: Microsoft.Extensions.Logging.Console
  commentId: N:Microsoft.Extensions.Logging.Console
  isExternal: false
  name: Microsoft.Extensions.Logging.Console
  nameWithType: Microsoft.Extensions.Logging.Console
  fullName: Microsoft.Extensions.Logging.Console
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  commentId: T:System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<String, LogLevel, Boolean>
  nameWithType: Func<String, LogLevel, Boolean>
  fullName: System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>
  nameWithType.vb: Func(Of String, LogLevel, Boolean)
  fullname.vb: System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean)
  name.vb: Func(Of String, LogLevel, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Console.Internal.IConsole
  commentId: T:Microsoft.Extensions.Logging.Console.Internal.IConsole
  parent: Microsoft.Extensions.Logging.Console.Internal
  isExternal: false
  name: IConsole
  nameWithType: IConsole
  fullName: Microsoft.Extensions.Logging.Console.Internal.IConsole
- uid: Microsoft.Extensions.Logging.Console.Internal
  commentId: N:Microsoft.Extensions.Logging.Console.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.Console.Internal
  nameWithType: Microsoft.Extensions.Logging.Console.Internal
  fullName: Microsoft.Extensions.Logging.Console.Internal
- uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,{TState},System.Exception,System.Func{{TState},System.Exception,System.String})
  commentId: M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  parent: Microsoft.Extensions.Logging.ILogger
  definition: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: ILogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.Extensions.Logging.ILogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  nameWithType.vb: ILogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  fullname.vb: Microsoft.Extensions.Logging.ILogger.Log(Of TState)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    name: Log<TState>
    nameWithType: ILogger.Log<TState>
    fullName: Microsoft.Extensions.Logging.ILogger.Log<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.EventId
    name: EventId
    nameWithType: EventId
    fullName: Microsoft.Extensions.Logging.EventId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    name: Log(Of TState)
    nameWithType: ILogger.Log(Of TState)
    fullName: Microsoft.Extensions.Logging.ILogger.Log(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.EventId
    name: EventId
    nameWithType: EventId
    fullName: Microsoft.Extensions.Logging.EventId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: Microsoft.Extensions.Logging.EventId
  commentId: T:Microsoft.Extensions.Logging.EventId
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: EventId
  nameWithType: EventId
  fullName: Microsoft.Extensions.Logging.EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{{TState},System.Exception,System.String}
  commentId: T:System.Func{``0,System.Exception,System.String}
  parent: System
  definition: System.Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: System.Func<TState, System.Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullname.vb: System.Func(Of TState, System.Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  commentId: M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  isExternal: true
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: ILogger.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.Extensions.Logging.ILogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  nameWithType.vb: ILogger.Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  fullname.vb: Microsoft.Extensions.Logging.ILogger.Log(Of TState)(Microsoft.Extensions.Logging.LogLevel, Microsoft.Extensions.Logging.EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    name: Log<TState>
    nameWithType: ILogger.Log<TState>
    fullName: Microsoft.Extensions.Logging.ILogger.Log<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.EventId
    name: EventId
    nameWithType: EventId
    fullName: Microsoft.Extensions.Logging.EventId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
    name: Log(Of TState)
    nameWithType: ILogger.Log(Of TState)
    fullName: Microsoft.Extensions.Logging.ILogger.Log(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.EventId
    name: EventId
    nameWithType: EventId
    fullName: Microsoft.Extensions.Logging.EventId
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  commentId: M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  parent: Microsoft.Extensions.Logging.ILogger
  isExternal: false
  name: IsEnabled(LogLevel)
  nameWithType: ILogger.IsEnabled(LogLevel)
  fullName: Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
    name: IsEnabled
    nameWithType: ILogger.IsEnabled
    fullName: Microsoft.Extensions.Logging.ILogger.IsEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)
    name: IsEnabled
    nameWithType: ILogger.IsEnabled
    fullName: Microsoft.Extensions.Logging.ILogger.IsEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1({TState})
  commentId: M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
  parent: Microsoft.Extensions.Logging.ILogger
  definition: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
  name: BeginScope<TState>(TState)
  nameWithType: ILogger.BeginScope<TState>(TState)
  fullName: Microsoft.Extensions.Logging.ILogger.BeginScope<TState>(TState)
  nameWithType.vb: ILogger.BeginScope(Of TState)(TState)
  fullname.vb: Microsoft.Extensions.Logging.ILogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
    name: BeginScope<TState>
    nameWithType: ILogger.BeginScope<TState>
    fullName: Microsoft.Extensions.Logging.ILogger.BeginScope<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
    name: BeginScope(Of TState)
    nameWithType: ILogger.BeginScope(Of TState)
    fullName: Microsoft.Extensions.Logging.ILogger.BeginScope(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
  commentId: M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
  isExternal: false
  name: BeginScope<TState>(TState)
  nameWithType: ILogger.BeginScope<TState>(TState)
  fullName: Microsoft.Extensions.Logging.ILogger.BeginScope<TState>(TState)
  nameWithType.vb: ILogger.BeginScope(Of TState)(TState)
  fullname.vb: Microsoft.Extensions.Logging.ILogger.BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
    name: BeginScope<TState>
    nameWithType: ILogger.BeginScope<TState>
    fullName: Microsoft.Extensions.Logging.ILogger.BeginScope<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)
    name: BeginScope(Of TState)
    nameWithType: ILogger.BeginScope(Of TState)
    fullName: Microsoft.Extensions.Logging.ILogger.BeginScope(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
