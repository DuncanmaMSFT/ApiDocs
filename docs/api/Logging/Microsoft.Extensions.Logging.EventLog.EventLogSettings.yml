### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  commentId: T:Microsoft.Extensions.Logging.EventLog.EventLogSettings
  id: EventLogSettings
  parent: Microsoft.Extensions.Logging.EventLog
  children:
  - Microsoft.Extensions.Logging.EventLog.EventLogSettings.EventLog
  - Microsoft.Extensions.Logging.EventLog.EventLogSettings.Filter
  - Microsoft.Extensions.Logging.EventLog.EventLogSettings.LogName
  - Microsoft.Extensions.Logging.EventLog.EventLogSettings.MachineName
  - Microsoft.Extensions.Logging.EventLog.EventLogSettings.SourceName
  langs:
  - csharp
  - vb
  name: EventLogSettings
  nameWithType: EventLogSettings
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EventLogSettings
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nSettings for <xref href=\"Microsoft.Extensions.Logging.EventLog.EventLogLogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class EventLogSettings
    content.vb: Public Class EventLogSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings.LogName
  commentId: P:Microsoft.Extensions.Logging.EventLog.EventLogSettings.LogName
  id: LogName
  parent: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  langs:
  - csharp
  - vb
  name: LogName
  nameWithType: EventLogSettings.LogName
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings.LogName
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogName
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nName of the event log. If <code>null</code> or not specified, \"Application\" is the default.\n"
  example: []
  syntax:
    content: public string LogName { get; set; }
    content.vb: Public Property LogName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings.SourceName
  commentId: P:Microsoft.Extensions.Logging.EventLog.EventLogSettings.SourceName
  id: SourceName
  parent: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  langs:
  - csharp
  - vb
  name: SourceName
  nameWithType: EventLogSettings.SourceName
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings.SourceName
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: SourceName
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 21
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nName of the event log source. If <code>null</code> or not specified, \"Application\" is the default.\n"
  example: []
  syntax:
    content: public string SourceName { get; set; }
    content.vb: Public Property SourceName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings.MachineName
  commentId: P:Microsoft.Extensions.Logging.EventLog.EventLogSettings.MachineName
  id: MachineName
  parent: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  langs:
  - csharp
  - vb
  name: MachineName
  nameWithType: EventLogSettings.MachineName
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings.MachineName
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: MachineName
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nName of the machine having the event log. If <code>null</code> or not specified, local machine is the default.\n"
  example: []
  syntax:
    content: public string MachineName { get; set; }
    content.vb: Public Property MachineName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings.Filter
  commentId: P:Microsoft.Extensions.Logging.EventLog.EventLogSettings.Filter
  id: Filter
  parent: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  langs:
  - csharp
  - vb
  name: Filter
  nameWithType: EventLogSettings.Filter
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings.Filter
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Filter
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nThe function used to filter events based on the log level.\n"
  example: []
  syntax:
    content: public Func<string, LogLevel, bool> Filter { get; set; }
    content.vb: Public Property Filter As Func(Of String, LogLevel, Boolean)
    parameters: []
    return:
      type: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.EventLog.EventLogSettings.EventLog
  commentId: P:Microsoft.Extensions.Logging.EventLog.EventLogSettings.EventLog
  id: EventLog
  parent: Microsoft.Extensions.Logging.EventLog.EventLogSettings
  langs:
  - csharp
  - vb
  name: EventLog
  nameWithType: EventLogSettings.EventLog
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogSettings.EventLog
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: EventLog
    path: src/Microsoft.Extensions.Logging.EventLog/EventLogSettings.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Logging.EventLog
  namespace: Microsoft.Extensions.Logging.EventLog
  summary: "\nFor unit testing purposes only.\n"
  example: []
  syntax:
    content: public IEventLog EventLog { get; set; }
    content.vb: Public Property EventLog As IEventLog
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.EventLog.Internal.IEventLog
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.Logging.EventLog.EventLogLogger
  commentId: T:Microsoft.Extensions.Logging.EventLog.EventLogLogger
  isExternal: false
  name: EventLogLogger
  nameWithType: EventLogLogger
  fullName: Microsoft.Extensions.Logging.EventLog.EventLogLogger
- uid: Microsoft.Extensions.Logging.EventLog
  commentId: N:Microsoft.Extensions.Logging.EventLog
  isExternal: false
  name: Microsoft.Extensions.Logging.EventLog
  nameWithType: Microsoft.Extensions.Logging.EventLog
  fullName: Microsoft.Extensions.Logging.EventLog
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  commentId: T:System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<String, LogLevel, Boolean>
  nameWithType: Func<String, LogLevel, Boolean>
  fullName: System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>
  nameWithType.vb: Func(Of String, LogLevel, Boolean)
  fullname.vb: System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean)
  name.vb: Func(Of String, LogLevel, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.EventLog.Internal.IEventLog
  commentId: T:Microsoft.Extensions.Logging.EventLog.Internal.IEventLog
  parent: Microsoft.Extensions.Logging.EventLog.Internal
  isExternal: false
  name: IEventLog
  nameWithType: IEventLog
  fullName: Microsoft.Extensions.Logging.EventLog.Internal.IEventLog
- uid: Microsoft.Extensions.Logging.EventLog.Internal
  commentId: N:Microsoft.Extensions.Logging.EventLog.Internal
  isExternal: false
  name: Microsoft.Extensions.Logging.EventLog.Internal
  nameWithType: Microsoft.Extensions.Logging.EventLog.Internal
  fullName: Microsoft.Extensions.Logging.EventLog.Internal
