### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  commentId: T:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  id: TestLoggerExtensions.ScopeWithOneParameter
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.FormatString
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.NamedStringFormat
  - Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.ScopeDelegate
  langs:
  - csharp
  - vb
  name: TestLoggerExtensions.ScopeWithOneParameter
  nameWithType: TestLoggerExtensions.ScopeWithOneParameter
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeWithOneParameter
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public class ScopeWithOneParameter
    content.vb: Public Class ScopeWithOneParameter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.ScopeDelegate
  commentId: F:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.ScopeDelegate
  id: ScopeDelegate
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  langs:
  - csharp
  - vb
  name: ScopeDelegate
  nameWithType: TestLoggerExtensions.ScopeWithOneParameter.ScopeDelegate
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.ScopeDelegate
  type: Field
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ScopeDelegate
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static Func<ILogger, string, IDisposable> ScopeDelegate
    content.vb: Public Shared ScopeDelegate As Func(Of ILogger, String, IDisposable)
    return:
      type: System.Func{Microsoft.Extensions.Logging.ILogger,System.String,System.IDisposable}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.NamedStringFormat
  commentId: F:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.NamedStringFormat
  id: NamedStringFormat
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  langs:
  - csharp
  - vb
  name: NamedStringFormat
  nameWithType: TestLoggerExtensions.ScopeWithOneParameter.NamedStringFormat
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.NamedStringFormat
  type: Field
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: NamedStringFormat
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 39
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: 'public const string NamedStringFormat = "RequestId: {RequestId}"'
    content.vb: 'Public Const NamedStringFormat As String = "RequestId: {RequestId}"'
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.FormatString
  commentId: F:Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.FormatString
  id: FormatString
  parent: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter
  langs:
  - csharp
  - vb
  name: FormatString
  nameWithType: TestLoggerExtensions.ScopeWithOneParameter.FormatString
  fullName: Microsoft.Extensions.Logging.TestLoggerExtensions.ScopeWithOneParameter.FormatString
  type: Field
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FormatString
    path: test/Microsoft.Extensions.Logging.Test/TestLoggerExtensions.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: 'public const string FormatString = "RequestId: {0}"'
    content.vb: 'Public Const FormatString As String = "RequestId: {0}"'
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func{Microsoft.Extensions.Logging.ILogger,System.String,System.IDisposable}
  commentId: T:System.Func{Microsoft.Extensions.Logging.ILogger,System.String,System.IDisposable}
  parent: System
  definition: System.Func`3
  name: Func<ILogger, String, IDisposable>
  nameWithType: Func<ILogger, String, IDisposable>
  fullName: System.Func<Microsoft.Extensions.Logging.ILogger, System.String, System.IDisposable>
  nameWithType.vb: Func(Of ILogger, String, IDisposable)
  fullname.vb: System.Func(Of Microsoft.Extensions.Logging.ILogger, System.String, System.IDisposable)
  name.vb: Func(Of ILogger, String, IDisposable)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
