### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.FilterLoggerSettings
  id: FilterLoggerSettings
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,Microsoft.Extensions.Logging.LogLevel)
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  - Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  - Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Logging#LogLevel}}#GetEnumerator
  - Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  langs:
  - csharp
  - vb
  name: FilterLoggerSettings
  nameWithType: FilterLoggerSettings
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FilterLoggerSettings
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  summary: "\nFilter settings for messages logged by an <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class FilterLoggerSettings : IFilterLoggerSettings, IEnumerable<KeyValuePair<string, LogLevel>>, IEnumerable'
    content.vb: >-
      Public Class FilterLoggerSettings
          Implements IFilterLoggerSettings, IEnumerable(Of KeyValuePair(Of String, LogLevel)), IEnumerable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  commentId: P:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  id: Microsoft#Extensions#Logging#IFilterLoggerSettings#ChangeToken
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IFilterLoggerSettings.ChangeToken
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.ChangeToken
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IChangeToken IFilterLoggerSettings.ChangeToken { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken As IChangeToken Implements IFilterLoggerSettings.ChangeToken
    parameters: []
    return:
      type: Microsoft.Extensions.Primitives.IChangeToken
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  commentId: P:Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  id: Switches
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: Switches
  nameWithType: FilterLoggerSettings.Switches
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Switches
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Switches
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 16
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public IDictionary<string, LogLevel> Switches { get; set; }
    content.vb: Public Property Switches As IDictionary(Of String, LogLevel)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Logging.LogLevel}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,Microsoft.Extensions.Logging.LogLevel)
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String,Microsoft.Extensions.Logging.LogLevel)
  id: Add(System.String,Microsoft.Extensions.Logging.LogLevel)
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: Add(String, LogLevel)
  nameWithType: FilterLoggerSettings.Add(String, LogLevel)
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Add(System.String, Microsoft.Extensions.Logging.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Add
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a filter for given logger category name and <xref href=\"Microsoft.Extensions.Logging.LogLevel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Add(string categoryName, LogLevel logLevel)
    content.vb: Public Sub Add(categoryName As String, logLevel As LogLevel)
    parameters:
    - id: categoryName
      type: System.String
      description: The logger category name.
    - id: logLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The log level.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  id: Microsoft#Extensions#Logging#IFilterLoggerSettings#Reload
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IFilterLoggerSettings.Reload()
  nameWithType: FilterLoggerSettings.IFilterLoggerSettings.Reload()
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IFilterLoggerSettings IFilterLoggerSettings.Reload()
    content.vb: Function Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload As IFilterLoggerSettings Implements IFilterLoggerSettings.Reload
    return:
      type: Microsoft.Extensions.Logging.IFilterLoggerSettings
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  nameWithType.vb: FilterLoggerSettings.Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  name.vb: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  id: TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: TryGetSwitch(String, out LogLevel)
  nameWithType: FilterLoggerSettings.TryGetSwitch(String, out LogLevel)
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String, out Microsoft.Extensions.Logging.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: TryGetSwitch
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 33
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public bool TryGetSwitch(string name, out LogLevel level)
    content.vb: Public Function TryGetSwitch(name As String, ByRef level As LogLevel) As Boolean
    parameters:
    - id: name
      type: System.String
    - id: level
      type: Microsoft.Extensions.Logging.LogLevel
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  nameWithType.vb: FilterLoggerSettings.TryGetSwitch(String, ByRef LogLevel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.FilterLoggerSettings.TryGetSwitch(System.String, ByRef Microsoft.Extensions.Logging.LogLevel)
  name.vb: TryGetSwitch(String, ByRef LogLevel)
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Logging#LogLevel}}#GetEnumerator
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Logging#LogLevel}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,Microsoft#Extensions#Logging#LogLevel}}#GetEnumerator
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<String, LogLevel>>.GetEnumerator()
  nameWithType: FilterLoggerSettings.IEnumerable<KeyValuePair<String, LogLevel>>.GetEnumerator()
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IEnumerator<KeyValuePair<string, LogLevel>> IEnumerable<KeyValuePair<string, LogLevel>>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of String, LogLevel)) Implements IEnumerable(Of KeyValuePair(Of String, LogLevel)).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}.GetEnumerator
  nameWithType.vb: FilterLoggerSettings.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator()
  fullName.vb: Microsoft.Extensions.Logging.FilterLoggerSettings.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator()
- uid: Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Extensions.Logging.FilterLoggerSettings.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Extensions.Logging.FilterLoggerSettings
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: FilterLoggerSettings.IEnumerable.GetEnumerator()
  fullName: Microsoft.Extensions.Logging.FilterLoggerSettings.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Microsoft.Extensions.Logging.Filter/FilterLoggerSettings.cs
    startLine: 43
  assemblies:
  - Microsoft.Extensions.Logging.Filter
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: FilterLoggerSettings.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.IFilterLoggerSettings
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: IFilterLoggerSettings
  nameWithType: IFilterLoggerSettings
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, LogLevel>>
  nameWithType: IEnumerable<KeyValuePair<String, LogLevel>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Logging.LogLevel>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, LogLevel))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Logging.LogLevel))
  name.vb: IEnumerable(Of KeyValuePair(Of String, LogLevel))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  commentId: P:Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: false
  name: ChangeToken
  nameWithType: IFilterLoggerSettings.ChangeToken
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.ChangeToken
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Logging.LogLevel}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Microsoft.Extensions.Logging.LogLevel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, LogLevel>
  nameWithType: IDictionary<String, LogLevel>
  fullName: System.Collections.Generic.IDictionary<System.String, Microsoft.Extensions.Logging.LogLevel>
  nameWithType.vb: IDictionary(Of String, LogLevel)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, Microsoft.Extensions.Logging.LogLevel)
  name.vb: IDictionary(Of String, LogLevel)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  commentId: M:Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: false
  name: Reload()
  nameWithType: IFilterLoggerSettings.Reload()
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload()
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    name: Reload
    nameWithType: IFilterLoggerSettings.Reload
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
    name: Reload
    nameWithType: IFilterLoggerSettings.Reload
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.Reload
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  commentId: M:Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
  parent: Microsoft.Extensions.Logging.IFilterLoggerSettings
  isExternal: true
  name: TryGetSwitch(String, LogLevel)
  nameWithType: IFilterLoggerSettings.TryGetSwitch(String, LogLevel)
  fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String, Microsoft.Extensions.Logging.LogLevel)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
    name: TryGetSwitch
    nameWithType: IFilterLoggerSettings.TryGetSwitch
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch(System.String,Microsoft.Extensions.Logging.LogLevel@)
    name: TryGetSwitch
    nameWithType: IFilterLoggerSettings.TryGetSwitch
    fullName: Microsoft.Extensions.Logging.IFilterLoggerSettings.TryGetSwitch
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<String, LogLevel>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, LogLevel)).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Logging.LogLevel)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<String, LogLevel>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Logging.LogLevel>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of String, LogLevel)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Logging.LogLevel)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.String,Microsoft.Extensions.Logging.LogLevel}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<String, LogLevel>>
  nameWithType: IEnumerator<KeyValuePair<String, LogLevel>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String, Microsoft.Extensions.Logging.LogLevel>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of String, LogLevel))
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.String, Microsoft.Extensions.Logging.LogLevel))
  name.vb: IEnumerator(Of KeyValuePair(Of String, LogLevel))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
