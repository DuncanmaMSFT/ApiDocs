### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  commentId: T:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  id: FormattedLogValuesTest
  parent: Microsoft.Extensions.Logging.Test
  children:
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValues(System.String,System.Object[],System.String)
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValuesData
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Basic_Types(System.String,System.String,System.Object[])
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_DateTime(System.String,System.String)
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Escaped_Braces(System.String,System.String,System.Object[])
  - Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_UnbalancedBraces(System.String)
  langs:
  - csharp
  - vb
  name: FormattedLogValuesTest
  nameWithType: FormattedLogValuesTest
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FormattedLogValuesTest
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: public class FormattedLogValuesTest
    content.vb: Public Class FormattedLogValuesTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Basic_Types(System.String,System.String,System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Basic_Types(System.String,System.String,System.Object[])
  id: LogValues_With_Basic_Types(System.String,System.String,System.Object[])
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: LogValues_With_Basic_Types(String, String, Object[])
  nameWithType: FormattedLogValuesTest.LogValues_With_Basic_Types(String, String, Object[])
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Basic_Types(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValues_With_Basic_Types
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"", "", new object[]{}})]

      [InlineData(new object[]{"arg1 arg2", "{0} {1}", new object[]{"arg1", "arg2"}})]

      [InlineData(new object[]{"arg1 arg2", "{Start} {End}", new object[]{"arg1", "arg2"}})]

      [InlineData(new object[]{"arg1     arg2", "{Start,-6} {End,6}", new object[]{"arg1", "arg2"}})]

      [InlineData(new object[]{"0064", "{Hex:X4}", new object[]{100}})]

      public void LogValues_With_Basic_Types(string expected, string format, object[] args)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"", "", New Object() {}})>

      <InlineData(New Object() {"arg1 arg2", "{0} {1}", New Object() {"arg1", "arg2"}})>

      <InlineData(New Object() {"arg1 arg2", "{Start} {End}", New Object() {"arg1", "arg2"}})>

      <InlineData(New Object() {"arg1     arg2", "{Start,-6} {End,6}", New Object() {"arg1", "arg2"}})>

      <InlineData(New Object() {"0064", "{Hex:X4}", New Object() {100}})>

      Public Sub LogValues_With_Basic_Types(expected As String, format As String, args As Object())
    parameters:
    - id: expected
      type: System.String
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: FormattedLogValuesTest.LogValues_With_Basic_Types(String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Basic_Types(System.String, System.String, System.Object())
  name.vb: LogValues_With_Basic_Types(String, String, Object())
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_DateTime(System.String,System.String)
  commentId: M:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_DateTime(System.String,System.String)
  id: LogValues_With_DateTime(System.String,System.String)
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: LogValues_With_DateTime(String, String)
  nameWithType: FormattedLogValuesTest.LogValues_With_DateTime(String, String)
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_DateTime(System.String, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValues_With_DateTime
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"1 2015", "{Year,6:d yyyy}"})]

      [InlineData(new object[]{"1:01:2015 AM,:        01", "{Year,-10:d:MM:yyyy tt},:{second,10:ss}"})]

      [InlineData(new object[]{"{prefix{1 2015}suffix}", "{{prefix{{{Year,6:d yyyy}}}suffix}}"})]

      public void LogValues_With_DateTime(string expected, string format)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"1 2015", "{Year,6:d yyyy}"})>

      <InlineData(New Object() {"1:01:2015 AM,:        01", "{Year,-10:d:MM:yyyy tt},:{second,10:ss}"})>

      <InlineData(New Object() {"{prefix{1 2015}suffix}", "{{prefix{{{Year,6:d yyyy}}}suffix}}"})>

      Public Sub LogValues_With_DateTime(expected As String, format As String)
    parameters:
    - id: expected
      type: System.String
    - id: format
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Escaped_Braces(System.String,System.String,System.Object[])
  commentId: M:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Escaped_Braces(System.String,System.String,System.Object[])
  id: LogValues_With_Escaped_Braces(System.String,System.String,System.Object[])
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: LogValues_With_Escaped_Braces(String, String, Object[])
  nameWithType: FormattedLogValuesTest.LogValues_With_Escaped_Braces(String, String, Object[])
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Escaped_Braces(System.String, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValues_With_Escaped_Braces
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 41
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"{{", "{{", null})]

      [InlineData(new object[]{"'{{'", "'{{'", null})]

      [InlineData(new object[]{"'{{}}'", "'{{}}'", null})]

      [InlineData(new object[]{"arg1 arg2 '{}'  '{' '{:}' '{,:}' {,}- test string", "{0} {1} '{{}}'  '{{' '{{:}}' '{{,:}}' {{,}}- test string", new object[]{"arg1", "arg2"}})]

      [InlineData(new object[]{"{prefix{arg1}suffix}", "{{prefix{{{Argument}}}suffix}}", new object[]{"arg1"}})]

      public void LogValues_With_Escaped_Braces(string expected, string format, object[] args)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"{{", "{{", Nothing})>

      <InlineData(New Object() {"'{{'", "'{{'", Nothing})>

      <InlineData(New Object() {"'{{}}'", "'{{}}'", Nothing})>

      <InlineData(New Object() {"arg1 arg2 '{}'  '{' '{:}' '{,:}' {,}- test string", "{0} {1} '{{}}'  '{{' '{{:}}' '{{,:}}' {{,}}- test string", New Object() {"arg1", "arg2"}})>

      <InlineData(New Object() {"{prefix{arg1}suffix}", "{{prefix{{{Argument}}}suffix}}", New Object() {"arg1"}})>

      Public Sub LogValues_With_Escaped_Braces(expected As String, format As String, args As Object())
    parameters:
    - id: expected
      type: System.String
    - id: format
      type: System.String
    - id: args
      type: System.Object[]
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: FormattedLogValuesTest.LogValues_With_Escaped_Braces(String, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_Escaped_Braces(System.String, System.String, System.Object())
  name.vb: LogValues_With_Escaped_Braces(String, String, Object())
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_UnbalancedBraces(System.String)
  commentId: M:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_UnbalancedBraces(System.String)
  id: LogValues_With_UnbalancedBraces(System.String)
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: LogValues_With_UnbalancedBraces(String)
  nameWithType: FormattedLogValuesTest.LogValues_With_UnbalancedBraces(String)
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.LogValues_With_UnbalancedBraces(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: LogValues_With_UnbalancedBraces
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 61
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"{foo"})]

      [InlineData(new object[]{"bar}"})]

      [InlineData(new object[]{"{foo bar}}"})]

      public void LogValues_With_UnbalancedBraces(string format)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"{foo"})>

      <InlineData(New Object() {"bar}"})>

      <InlineData(New Object() {"{foo bar}}"})>

      Public Sub LogValues_With_UnbalancedBraces(format As String)
    parameters:
    - id: format
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValuesData
  commentId: P:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValuesData
  id: FormatsEnumerableValuesData
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: FormatsEnumerableValuesData
  nameWithType: FormattedLogValuesTest.FormatsEnumerableValuesData
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValuesData
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FormatsEnumerableValuesData
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 75
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: public static TheoryData<string, object[], string> FormatsEnumerableValuesData { get; }
    content.vb: Public Shared ReadOnly Property FormatsEnumerableValuesData As TheoryData(Of String, Object(), String)
    parameters: []
    return:
      type: Xunit.TheoryData{System.String,System.Object[],System.String}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValues(System.String,System.Object[],System.String)
  commentId: M:Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValues(System.String,System.Object[],System.String)
  id: FormatsEnumerableValues(System.String,System.Object[],System.String)
  parent: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest
  langs:
  - csharp
  - vb
  name: FormatsEnumerableValues(String, Object[], String)
  nameWithType: FormattedLogValuesTest.FormatsEnumerableValues(String, Object[], String)
  fullName: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValues(System.String, System.Object[], System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: FormatsEnumerableValues
    path: test/Microsoft.Extensions.Logging.Test/FormattedLogValuesTest.cs
    startLine: 166
  assemblies:
  - Microsoft.Extensions.Logging.Test
  namespace: Microsoft.Extensions.Logging.Test
  syntax:
    content: >-
      [Theory]

      [MemberData("FormatsEnumerableValuesData", new object[]{})]

      public void FormatsEnumerableValues(string messageFormat, object[] arguments, string expected)
    content.vb: >-
      <Theory>

      <MemberData("FormatsEnumerableValuesData", New Object() {})>

      Public Sub FormatsEnumerableValues(messageFormat As String, arguments As Object(), expected As String)
    parameters:
    - id: messageFormat
      type: System.String
    - id: arguments
      type: System.Object[]
    - id: expected
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: FormattedLogValuesTest.FormatsEnumerableValues(String, Object(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Logging.Test.FormattedLogValuesTest.FormatsEnumerableValues(System.String, System.Object(), System.String)
  name.vb: FormatsEnumerableValues(String, Object(), String)
references:
- uid: Microsoft.Extensions.Logging.Test
  commentId: N:Microsoft.Extensions.Logging.Test
  isExternal: false
  name: Microsoft.Extensions.Logging.Test
  nameWithType: Microsoft.Extensions.Logging.Test
  fullName: Microsoft.Extensions.Logging.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Xunit.TheoryData{System.String,System.Object[],System.String}
  commentId: T:Xunit.TheoryData{System.String,System.Object[],System.String}
  parent: Xunit
  definition: Xunit.TheoryData`3
  name: TheoryData<String, Object[], String>
  nameWithType: TheoryData<String, Object[], String>
  fullName: Xunit.TheoryData<System.String, System.Object[], System.String>
  nameWithType.vb: TheoryData(Of String, Object(), String)
  fullname.vb: Xunit.TheoryData(Of System.String, System.Object(), System.String)
  name.vb: TheoryData(Of String, Object(), String)
  spec.csharp:
  - uid: Xunit.TheoryData`3
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`3
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit.TheoryData`3
  commentId: T:Xunit.TheoryData`3
  isExternal: true
  name: TheoryData<T1, T2, T3>
  nameWithType: TheoryData<T1, T2, T3>
  fullName: Xunit.TheoryData<T1, T2, T3>
  nameWithType.vb: TheoryData(Of T1, T2, T3)
  fullname.vb: Xunit.TheoryData(Of T1, T2, T3)
  name.vb: TheoryData(Of T1, T2, T3)
  spec.csharp:
  - uid: Xunit.TheoryData`3
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`3
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
