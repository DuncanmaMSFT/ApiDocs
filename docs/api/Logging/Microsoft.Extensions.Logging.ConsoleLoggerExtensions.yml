### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  commentId: T:Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  id: ConsoleLoggerExtensions
  parent: Microsoft.Extensions.Logging
  children:
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})
  - Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  langs:
  - csharp
  - vb
  name: ConsoleLoggerExtensions
  nameWithType: ConsoleLoggerExtensions
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: ConsoleLoggerExtensions
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static class ConsoleLoggerExtensions
    content.vb: Public Module ConsoleLoggerExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 14
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled for <xref href=\"Microsoft.Extensions.Logging.LogLevel\" data-throw-if-not-resolved=\"false\"></xref>.Information or higher.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, Boolean)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, Boolean)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled for <xref href=\"Microsoft.Extensions.Logging.LogLevel\" data-throw-if-not-resolved=\"false\"></xref>.Information or higher.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, bool includeScopes)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, includeScopes As Boolean) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: ''
    - id: includeScopes
      type: System.Boolean
      description: >-
        A value which indicates whether log scope information should be displayed

        in the output.
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, LogLevel)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, LogLevel)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Logging.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled for <xref href=\"Microsoft.Extensions.Logging.LogLevel\" data-throw-if-not-resolved=\"false\"></xref>s of minLevel or higher.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, LogLevel minLevel)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, minLevel As LogLevel) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: The <xref href="Microsoft.Extensions.Logging.ILoggerFactory" data-throw-if-not-resolved="false"></xref> to use.
    - id: minLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The minimum <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref> to be logged
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.LogLevel,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, LogLevel, Boolean)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, LogLevel, Boolean)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Logging.LogLevel, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled for <xref href=\"Microsoft.Extensions.Logging.LogLevel\" data-throw-if-not-resolved=\"false\"></xref>s of minLevel or higher.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, LogLevel minLevel, bool includeScopes)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, minLevel As LogLevel, includeScopes As Boolean) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: ''
    - id: minLevel
      type: Microsoft.Extensions.Logging.LogLevel
      description: The minimum <xref href="Microsoft.Extensions.Logging.LogLevel" data-throw-if-not-resolved="false"></xref> to be logged
    - id: includeScopes
      type: System.Boolean
      description: >-
        A value which indicates whether log scope information should be displayed

        in the output.
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, Func<String, LogLevel, Boolean>)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, Func<String, LogLevel, Boolean>)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 63
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled as defined by the filter function.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, Func<string, LogLevel, bool> filter)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, filter As Func(Of String, LogLevel, Boolean)) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: ''
    - id: filter
      type: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
      description: ''
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  nameWithType.vb: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, Func(Of String, LogLevel, Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean))
  name.vb: AddConsole(ILoggerFactory, Func(Of String, LogLevel, Boolean))
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, Func<String, LogLevel, Boolean>, Boolean)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, Func<String, LogLevel, Boolean>, Boolean)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 78
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  summary: "\nAdds a console logger that is enabled as defined by the filter function.\n"
  example: []
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, Func<string, LogLevel, bool> filter, bool includeScopes)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, filter As Func(Of String, LogLevel, Boolean), includeScopes As Boolean) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
      description: ''
    - id: filter
      type: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
      description: ''
    - id: includeScopes
      type: System.Boolean
      description: >-
        A value which indicates whether log scope information should be displayed

        in the output.
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  nameWithType.vb: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, Func(Of String, LogLevel, Boolean), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean), System.Boolean)
  name.vb: AddConsole(ILoggerFactory, Func(Of String, LogLevel, Boolean), Boolean)
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, IConsoleLoggerSettings)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, IConsoleLoggerSettings)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 87
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, IConsoleLoggerSettings settings)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, settings As IConsoleLoggerSettings) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    - id: settings
      type: Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)
  id: AddConsole(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Logging.ConsoleLoggerExtensions
  langs:
  - csharp
  - vb
  name: AddConsole(ILoggerFactory, IConfiguration)
  nameWithType: ConsoleLoggerExtensions.AddConsole(ILoggerFactory, IConfiguration)
  fullName: Microsoft.Extensions.Logging.ConsoleLoggerExtensions.AddConsole(Microsoft.Extensions.Logging.ILoggerFactory, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Logging.git
    id: AddConsole
    path: src/Microsoft.Extensions.Logging.Console/ConsoleLoggerFactoryExtensions.cs
    startLine: 95
  assemblies:
  - Microsoft.Extensions.Logging.Console
  namespace: Microsoft.Extensions.Logging
  syntax:
    content: public static ILoggerFactory AddConsole(this ILoggerFactory factory, IConfiguration configuration)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddConsole(factory As ILoggerFactory, configuration As IConfiguration) As ILoggerFactory
    parameters:
    - id: factory
      type: Microsoft.Extensions.Logging.ILoggerFactory
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
    return:
      type: Microsoft.Extensions.Logging.ILoggerFactory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.LogLevel
  commentId: T:Microsoft.Extensions.Logging.LogLevel
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.Extensions.Logging.LogLevel
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: T:Microsoft.Extensions.Logging.ILoggerFactory
  parent: Microsoft.Extensions.Logging
  isExternal: false
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  commentId: T:System.Func{System.String,Microsoft.Extensions.Logging.LogLevel,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<String, LogLevel, Boolean>
  nameWithType: Func<String, LogLevel, Boolean>
  fullName: System.Func<System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean>
  nameWithType.vb: Func(Of String, LogLevel, Boolean)
  fullname.vb: System.Func(Of System.String, Microsoft.Extensions.Logging.LogLevel, System.Boolean)
  name.vb: Func(Of String, LogLevel, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings
  commentId: T:Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings
  parent: Microsoft.Extensions.Logging.Console
  isExternal: false
  name: IConsoleLoggerSettings
  nameWithType: IConsoleLoggerSettings
  fullName: Microsoft.Extensions.Logging.Console.IConsoleLoggerSettings
- uid: Microsoft.Extensions.Logging.Console
  commentId: N:Microsoft.Extensions.Logging.Console
  isExternal: false
  name: Microsoft.Extensions.Logging.Console
  nameWithType: Microsoft.Extensions.Logging.Console
  fullName: Microsoft.Extensions.Logging.Console
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: false
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
