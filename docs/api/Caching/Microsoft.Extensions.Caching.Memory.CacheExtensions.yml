### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions
  commentId: T:Microsoft.Extensions.Caching.Memory.CacheExtensions
  id: CacheExtensions
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)
  - Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  langs:
  - csharp
  - vb
  name: CacheExtensions
  nameWithType: CacheExtensions
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: CacheExtensions
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 9
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static class CacheExtensions
    content.vb: Public Module CacheExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  id: Get(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Get(IMemoryCache, Object)
  nameWithType: CacheExtensions.Get(IMemoryCache, Object)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Get
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static object Get(this IMemoryCache cache, object key)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Get(cache As IMemoryCache, key As Object) As Object
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  id: Get``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Get<TItem>(IMemoryCache, Object)
  nameWithType: CacheExtensions.Get<TItem>(IMemoryCache, Object)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Get
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Get<TItem>(this IMemoryCache cache, object key)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Get(Of TItem)(cache As IMemoryCache, key As Object) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Get(Of TItem)(IMemoryCache, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Get(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object)
  name.vb: Get(Of TItem)(IMemoryCache, Object)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  id: TryGetValue``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0@)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: TryGetValue<TItem>(IMemoryCache, Object, out TItem)
  nameWithType: CacheExtensions.TryGetValue<TItem>(IMemoryCache, Object, out TItem)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, out TItem)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: TryGetValue
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 26
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static bool TryGetValue<TItem>(this IMemoryCache cache, object key, out TItem value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetValue(Of TItem)(cache As IMemoryCache, key As Object, ByRef value As TItem) As Boolean
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    typeParameters:
    - id: TItem
    return:
      type: System.Boolean
  nameWithType.vb: CacheExtensions.TryGetValue(Of TItem)(IMemoryCache, Object, ByRef TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.TryGetValue(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, ByRef TItem)
  name.vb: TryGetValue(Of TItem)(IMemoryCache, Object, ByRef TItem)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 39
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.DateTimeOffset)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, DateTimeOffset)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, DateTimeOffset)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, DateTimeOffset absoluteExpiration)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, absoluteExpiration As DateTimeOffset) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: absoluteExpiration
      type: System.DateTimeOffset
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, DateTimeOffset)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, System.DateTimeOffset)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, DateTimeOffset)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,System.TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, TimeSpan)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 60
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, TimeSpan absoluteExpirationRelativeToNow)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, absoluteExpirationRelativeToNow As TimeSpan) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: absoluteExpirationRelativeToNow
      type: System.TimeSpan
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, System.TimeSpan)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, TimeSpan)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Primitives.IChangeToken)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, IChangeToken)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, IChangeToken)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Primitives.IChangeToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 71
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, IChangeToken expirationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, expirationToken As IChangeToken) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: expirationToken
      type: Microsoft.Extensions.Primitives.IChangeToken
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, IChangeToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Primitives.IChangeToken)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, IChangeToken)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  id: Set``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,``0,Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: Set<TItem>(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  nameWithType: CacheExtensions.Set<TItem>(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Set
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 82
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem Set<TItem>(this IMemoryCache cache, object key, TItem value, MemoryCacheEntryOptions options)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Set(Of TItem)(cache As IMemoryCache, key As Object, value As TItem, options As MemoryCacheEntryOptions) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: value
      type: '{TItem}'
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.Set(Of TItem)(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.Set(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, TItem, Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions)
  name.vb: Set(Of TItem)(IMemoryCache, Object, TItem, MemoryCacheEntryOptions)
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  id: GetOrCreate``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: GetOrCreate<TItem>(IMemoryCache, Object, Func<ICacheEntry, TItem>)
  nameWithType: CacheExtensions.GetOrCreate<TItem>(IMemoryCache, Object, Func<ICacheEntry, TItem>)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, System.Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: GetOrCreate
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 97
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static TItem GetOrCreate<TItem>(this IMemoryCache cache, object key, Func<ICacheEntry, TItem> factory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrCreate(Of TItem)(cache As IMemoryCache, key As Object, factory As Func(Of ICacheEntry, TItem)) As TItem
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: factory
      type: System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,{TItem}}
    typeParameters:
    - id: TItem
    return:
      type: '{TItem}'
  nameWithType.vb: CacheExtensions.GetOrCreate(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, TItem))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreate(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, System.Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem))
  name.vb: GetOrCreate(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, TItem))
- uid: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})
  commentId: M:Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})
  id: GetOrCreateAsync``1(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Object,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}})
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.CacheExtensions
  langs:
  - csharp
  - vb
  name: GetOrCreateAsync<TItem>(IMemoryCache, Object, Func<ICacheEntry, Task<TItem>>)
  nameWithType: CacheExtensions.GetOrCreateAsync<TItem>(IMemoryCache, Object, Func<ICacheEntry, Task<TItem>>)
  fullName: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync<TItem>(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, System.Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, System.Threading.Tasks.Task<TItem>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: GetOrCreateAsync
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheExtensions.cs
    startLine: 112
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static Task<TItem> GetOrCreateAsync<TItem>(this IMemoryCache cache, object key, Func<ICacheEntry, Task<TItem>> factory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrCreateAsync(Of TItem)(cache As IMemoryCache, key As Object, factory As Func(Of ICacheEntry, Task(Of TItem))) As Task(Of TItem)
    parameters:
    - id: cache
      type: Microsoft.Extensions.Caching.Memory.IMemoryCache
    - id: key
      type: System.Object
    - id: factory
      type: System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{{TItem}}}
    typeParameters:
    - id: TItem
    return:
      type: System.Threading.Tasks.Task{{TItem}}
  nameWithType.vb: CacheExtensions.GetOrCreateAsync(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, Task(Of TItem)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.Caching.Memory.CacheExtensions.GetOrCreateAsync(Of TItem)(Microsoft.Extensions.Caching.Memory.IMemoryCache, System.Object, System.Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, System.Threading.Tasks.Task(Of TItem)))
  name.vb: GetOrCreateAsync(Of TItem)(IMemoryCache, Object, Func(Of ICacheEntry, Task(Of TItem)))
references:
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.IMemoryCache
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: IMemoryCache
  nameWithType: IMemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TItem
  isExternal: false
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: MemoryCacheEntryOptions
  nameWithType: MemoryCacheEntryOptions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
- uid: System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,{TItem}}
  commentId: T:System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``0}
  parent: System
  definition: System.Func`2
  name: Func<ICacheEntry, TItem>
  nameWithType: Func<ICacheEntry, TItem>
  fullName: System.Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem>
  nameWithType.vb: Func(Of ICacheEntry, TItem)
  fullname.vb: System.Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, TItem)
  name.vb: Func(Of ICacheEntry, TItem)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{{TItem}}}
  commentId: T:System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`2
  name: Func<ICacheEntry, Task<TItem>>
  nameWithType: Func<ICacheEntry, Task<TItem>>
  fullName: System.Func<Microsoft.Extensions.Caching.Memory.ICacheEntry, System.Threading.Tasks.Task<TItem>>
  nameWithType.vb: Func(Of ICacheEntry, Task(Of TItem))
  fullname.vb: System.Func(Of Microsoft.Extensions.Caching.Memory.ICacheEntry, System.Threading.Tasks.Task(Of TItem))
  name.vb: Func(Of ICacheEntry, Task(Of TItem))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
    name: ICacheEntry
    nameWithType: ICacheEntry
    fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TItem}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TItem>
  nameWithType: Task<TItem>
  fullName: System.Threading.Tasks.Task<TItem>
  nameWithType.vb: Task(Of TItem)
  fullname.vb: System.Threading.Tasks.Task(Of TItem)
  name.vb: Task(Of TItem)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
