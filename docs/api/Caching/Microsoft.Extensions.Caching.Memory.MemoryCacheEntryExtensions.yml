### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  id: MemoryCacheEntryExtensions
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  - Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: MemoryCacheEntryExtensions
  nameWithType: MemoryCacheEntryExtensions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: MemoryCacheEntryExtensions
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public static class MemoryCacheEntryExtensions
    content.vb: Public Module MemoryCacheEntryExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  id: SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetPriority(MemoryCacheEntryOptions, CacheItemPriority)
  nameWithType: MemoryCacheEntryExtensions.SetPriority(MemoryCacheEntryOptions, CacheItemPriority)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetPriority(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.CacheItemPriority)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetPriority
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets the priority for keeping the cache entry in the cache during a memory pressure tokened cleanup.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetPriority(this MemoryCacheEntryOptions options, CacheItemPriority priority)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetPriority(options As MemoryCacheEntryOptions, priority As CacheItemPriority) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: priority
      type: Microsoft.Extensions.Caching.Memory.CacheItemPriority
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)
  id: AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Primitives.IChangeToken)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: AddExpirationToken(MemoryCacheEntryOptions, IChangeToken)
  nameWithType: MemoryCacheEntryExtensions.AddExpirationToken(MemoryCacheEntryOptions, IChangeToken)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.AddExpirationToken(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Primitives.IChangeToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: AddExpirationToken
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 28
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nExpire the cache entry if the given <xref href=\"Microsoft.Extensions.Primitives.IChangeToken\" data-throw-if-not-resolved=\"false\"></xref> expires.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions AddExpirationToken(this MemoryCacheEntryOptions options, IChangeToken expirationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddExpirationToken(options As MemoryCacheEntryOptions, expirationToken As IChangeToken) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: The <xref href="Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions" data-throw-if-not-resolved="false"></xref>.
    - id: expirationToken
      type: Microsoft.Extensions.Primitives.IChangeToken
      description: The <xref href="Microsoft.Extensions.Primitives.IChangeToken" data-throw-if-not-resolved="false"></xref> that causes the cache entry to expire.
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  id: SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetAbsoluteExpiration(MemoryCacheEntryOptions, TimeSpan)
  nameWithType: MemoryCacheEntryExtensions.SetAbsoluteExpiration(MemoryCacheEntryOptions, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetAbsoluteExpiration
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 46
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets an absolute expiration time, relative to now.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetAbsoluteExpiration(this MemoryCacheEntryOptions options, TimeSpan relative)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetAbsoluteExpiration(options As MemoryCacheEntryOptions, relative As TimeSpan) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: relative
      type: System.TimeSpan
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)
  id: SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.DateTimeOffset)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetAbsoluteExpiration(MemoryCacheEntryOptions, DateTimeOffset)
  nameWithType: MemoryCacheEntryExtensions.SetAbsoluteExpiration(MemoryCacheEntryOptions, DateTimeOffset)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetAbsoluteExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetAbsoluteExpiration
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 59
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets an absolute expiration date for the cache entry.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetAbsoluteExpiration(this MemoryCacheEntryOptions options, DateTimeOffset absolute)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetAbsoluteExpiration(options As MemoryCacheEntryOptions, absolute As DateTimeOffset) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: absolute
      type: System.DateTimeOffset
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  id: SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,System.TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: SetSlidingExpiration(MemoryCacheEntryOptions, TimeSpan)
  nameWithType: MemoryCacheEntryExtensions.SetSlidingExpiration(MemoryCacheEntryOptions, TimeSpan)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.SetSlidingExpiration(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: SetSlidingExpiration
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 73
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nSets how long the cache entry can be inactive (e.g. not accessed) before it will be removed.\nThis will not extend the entry lifetime beyond the absolute expiration (if set).\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions SetSlidingExpiration(this MemoryCacheEntryOptions options, TimeSpan offset)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetSlidingExpiration(options As MemoryCacheEntryOptions, offset As TimeSpan) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: offset
      type: System.TimeSpan
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  id: RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate)
  nameWithType: MemoryCacheEntryExtensions.RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RegisterPostEvictionCallback
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 86
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nThe given callback will be fired after the cache entry is evicted from the cache.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions RegisterPostEvictionCallback(this MemoryCacheEntryOptions options, PostEvictionDelegate callback)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterPostEvictionCallback(options As MemoryCacheEntryOptions, callback As PostEvictionDelegate) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: callback
      type: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  id: RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions,Microsoft.Extensions.Caching.Memory.PostEvictionDelegate,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions
  langs:
  - csharp
  - vb
  name: RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate, Object)
  nameWithType: MemoryCacheEntryExtensions.RegisterPostEvictionCallback(MemoryCacheEntryOptions, PostEvictionDelegate, Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions.RegisterPostEvictionCallback(Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions, Microsoft.Extensions.Caching.Memory.PostEvictionDelegate, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: RegisterPostEvictionCallback
    path: src/Microsoft.Extensions.Caching.Abstractions/MemoryCacheEntryExtensions.cs
    startLine: 104
  assemblies:
  - Microsoft.Extensions.Caching.Abstractions
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nThe given callback will be fired after the cache entry is evicted from the cache.\n"
  example: []
  syntax:
    content: public static MemoryCacheEntryOptions RegisterPostEvictionCallback(this MemoryCacheEntryOptions options, PostEvictionDelegate callback, object state)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RegisterPostEvictionCallback(options As MemoryCacheEntryOptions, callback As PostEvictionDelegate, state As Object) As MemoryCacheEntryOptions
    parameters:
    - id: options
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
      description: ''
    - id: callback
      type: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
      description: ''
    - id: state
      type: System.Object
      description: ''
    return:
      type: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: MemoryCacheEntryOptions
  nameWithType: MemoryCacheEntryOptions
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions
- uid: Microsoft.Extensions.Caching.Memory.CacheItemPriority
  commentId: T:Microsoft.Extensions.Caching.Memory.CacheItemPriority
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: CacheItemPriority
  nameWithType: CacheItemPriority
  fullName: Microsoft.Extensions.Caching.Memory.CacheItemPriority
- uid: Microsoft.Extensions.Primitives.IChangeToken
  commentId: T:Microsoft.Extensions.Primitives.IChangeToken
  parent: Microsoft.Extensions.Primitives
  isExternal: true
  name: IChangeToken
  nameWithType: IChangeToken
  fullName: Microsoft.Extensions.Primitives.IChangeToken
- uid: Microsoft.Extensions.Primitives
  commentId: N:Microsoft.Extensions.Primitives
  isExternal: false
  name: Microsoft.Extensions.Primitives
  nameWithType: Microsoft.Extensions.Primitives
  fullName: Microsoft.Extensions.Primitives
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
  commentId: T:Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: PostEvictionDelegate
  nameWithType: PostEvictionDelegate
  fullName: Microsoft.Extensions.Caching.Memory.PostEvictionDelegate
