### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCache
  id: MemoryCache
  parent: Microsoft.Extensions.Caching.Memory
  children:
  - Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  - Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  - Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  - Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  langs:
  - csharp
  - vb
  name: MemoryCache
  nameWithType: MemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: MemoryCache
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 17
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nAn implementation of <xref href=\"Microsoft.Extensions.Caching.Memory.IMemoryCache\" data-throw-if-not-resolved=\"false\"></xref> using a dictionary to\nstore its entries.\n"
  example: []
  syntax:
    content: 'public class MemoryCache : IMemoryCache, IDisposable'
    content.vb: >-
      Public Class MemoryCache
          Implements IMemoryCache, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Caching.Memory.IMemoryCache
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})
  id: '#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})'
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: MemoryCache(IOptions<MemoryCacheOptions>)
  nameWithType: MemoryCache.MemoryCache(IOptions<MemoryCacheOptions>)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.MemoryCache(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: .ctor
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nCreates a new <xref href=\"Microsoft.Extensions.Caching.Memory.MemoryCache\" data-throw-if-not-resolved=\"false\"></xref> instance.\n"
  example: []
  syntax:
    content: public MemoryCache(IOptions<MemoryCacheOptions> optionsAccessor)
    content.vb: Public Sub New(optionsAccessor As IOptions(Of MemoryCacheOptions))
    parameters:
    - id: optionsAccessor
      type: Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}
      description: The options of the cache.
  nameWithType.vb: MemoryCache.MemoryCache(IOptions(Of MemoryCacheOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Memory.MemoryCache.MemoryCache(Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Caching.Memory.MemoryCacheOptions))
  name.vb: MemoryCache(IOptions(Of MemoryCacheOptions))
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize
  id: Finalize
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: MemoryCache.Finalize()
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Finalize
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 62
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nCleans up the background collection events.\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  commentId: P:Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  id: Count
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: MemoryCache.Count
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Count
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 70
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  summary: "\nGets the count of the current entries for diagnostic purposes.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  id: CreateEntry(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: CreateEntry(Object)
  nameWithType: MemoryCache.CreateEntry(Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: CreateEntry
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 76
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public ICacheEntry CreateEntry(object key)
    content.vb: Public Function CreateEntry(key As Object) As ICacheEntry
    parameters:
    - id: key
      type: System.Object
    return:
      type: Microsoft.Extensions.Caching.Memory.ICacheEntry
  implements:
  - Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)
  id: TryGetValue(System.Object,System.Object@)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: TryGetValue(Object, out Object)
  nameWithType: MemoryCache.TryGetValue(Object, out Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: TryGetValue
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 154
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public bool TryGetValue(object key, out object result)
    content.vb: Public Function TryGetValue(key As Object, ByRef result As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    - id: result
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)
  nameWithType.vb: MemoryCache.TryGetValue(Object, ByRef Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object, ByRef System.Object)
  name.vb: TryGetValue(Object, ByRef Object)
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  id: Remove(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: MemoryCache.Remove(Object)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Remove
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 206
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
  implements:
  - Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  id: Compact(System.Double)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Compact(Double)
  nameWithType: MemoryCache.Compact(Double)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Compact
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 349
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  example: []
  syntax:
    content: public void Compact(double percentage)
    content.vb: Public Sub Compact(percentage As Double)
    parameters:
    - id: percentage
      type: System.Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose
  id: Dispose
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: MemoryCache.Dispose()
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Dispose
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 445
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  commentId: M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.Extensions.Caching.Memory.MemoryCache
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: MemoryCache.Dispose(Boolean)
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
      branch: master
      repo: https://github.com/aspnet/Caching.git
    id: Dispose
    path: src/Microsoft.Extensions.Caching.Memory/MemoryCache.cs
    startLine: 450
  assemblies:
  - Microsoft.Extensions.Caching.Memory
  namespace: Microsoft.Extensions.Caching.Memory
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.IMemoryCache
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: IMemoryCache
  nameWithType: IMemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache
- uid: Microsoft.Extensions.Caching.Memory
  commentId: N:Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: Microsoft.Extensions.Caching.Memory
  nameWithType: Microsoft.Extensions.Caching.Memory
  fullName: Microsoft.Extensions.Caching.Memory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Caching.Memory.MemoryCache
  commentId: T:Microsoft.Extensions.Caching.Memory.MemoryCache
  isExternal: false
  name: MemoryCache
  nameWithType: MemoryCache
  fullName: Microsoft.Extensions.Caching.Memory.MemoryCache
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<MemoryCacheOptions>
  nameWithType: IOptions<MemoryCacheOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions>
  nameWithType.vb: IOptions(Of MemoryCacheOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.Extensions.Caching.Memory.MemoryCacheOptions)
  name.vb: IOptions(Of MemoryCacheOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
    name: MemoryCacheOptions
    nameWithType: MemoryCacheOptions
    fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
    name: MemoryCacheOptions
    nameWithType: MemoryCacheOptions
    fullName: Microsoft.Extensions.Caching.Memory.MemoryCacheOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.IMemoryCache
  isExternal: true
  name: CreateEntry(Object)
  nameWithType: IMemoryCache.CreateEntry(Object)
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
  spec.csharp:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
    name: CreateEntry
    nameWithType: IMemoryCache.CreateEntry
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry(System.Object)
    name: CreateEntry
    nameWithType: IMemoryCache.CreateEntry
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.CreateEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Caching.Memory.ICacheEntry
  commentId: T:Microsoft.Extensions.Caching.Memory.ICacheEntry
  parent: Microsoft.Extensions.Caching.Memory
  isExternal: false
  name: ICacheEntry
  nameWithType: ICacheEntry
  fullName: Microsoft.Extensions.Caching.Memory.ICacheEntry
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)
  commentId: M:Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)
  parent: Microsoft.Extensions.Caching.Memory.IMemoryCache
  isExternal: true
  name: TryGetValue(Object, Object)
  nameWithType: IMemoryCache.TryGetValue(Object, Object)
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object, System.Object)
  spec.csharp:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)
    name: TryGetValue
    nameWithType: IMemoryCache.TryGetValue
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue(System.Object,System.Object@)
    name: TryGetValue
    nameWithType: IMemoryCache.TryGetValue
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.TryGetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
  commentId: M:Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
  parent: Microsoft.Extensions.Caching.Memory.IMemoryCache
  isExternal: true
  name: Remove(Object)
  nameWithType: IMemoryCache.Remove(Object)
  fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
  spec.csharp:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
    name: Remove
    nameWithType: IMemoryCache.Remove
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove(System.Object)
    name: Remove
    nameWithType: IMemoryCache.Remove
    fullName: Microsoft.Extensions.Caching.Memory.IMemoryCache.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
