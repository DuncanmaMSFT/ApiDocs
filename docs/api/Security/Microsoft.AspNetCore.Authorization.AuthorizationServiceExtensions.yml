### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  commentId: T:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  id: AuthorizationServiceExtensions
  parent: Microsoft.AspNetCore.Authorization
  children:
  - Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  - Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  - Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
  - Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)
  langs:
  - csharp
  - vb
  name: AuthorizationServiceExtensions
  nameWithType: AuthorizationServiceExtensions
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizationServiceExtensions
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nExtension methods for <xref href=\"Microsoft.AspNetCore.Authorization.IAuthorizationService\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class AuthorizationServiceExtensions
    content.vb: Public Module AuthorizationServiceExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
  id: AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  langs:
  - csharp
  - vb
  name: AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, Object, IAuthorizationRequirement)
  nameWithType: AuthorizationServiceExtensions.AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, Object, IAuthorizationRequirement)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.IAuthorizationRequirement)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizeAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nChecks if a user meets a specific requirement for the specified resource\n"
  example: []
  syntax:
    content: public static Task<bool> AuthorizeAsync(this IAuthorizationService service, ClaimsPrincipal user, object resource, IAuthorizationRequirement requirement)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AuthorizeAsync(service As IAuthorizationService, user As ClaimsPrincipal, resource As Object, requirement As IAuthorizationRequirement) As Task(Of Boolean)
    parameters:
    - id: service
      type: Microsoft.AspNetCore.Authorization.IAuthorizationService
      description: The <xref href="Microsoft.AspNetCore.Authorization.IAuthorizationService" data-throw-if-not-resolved="false"></xref> providing authorization.
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: The user to evaluate the policy against.
    - id: resource
      type: System.Object
      description: The resource to evaluate the policy against.
    - id: requirement
      type: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
      description: The requirement to evaluate the policy against.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA flag indicating whether requirement evaluation has succeeded or failed.\nThis value is <returns>true</returns> when the user fulfills the policy, otherwise <returns>false</returns>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  id: AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.Object,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  langs:
  - csharp
  - vb
  name: AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, Object, AuthorizationPolicy)
  nameWithType: AuthorizationServiceExtensions.AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, Object, AuthorizationPolicy)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.Object, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizeAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nChecks if a user meets a specific authorization policy against the specified resource.\n"
  example: []
  syntax:
    content: public static Task<bool> AuthorizeAsync(this IAuthorizationService service, ClaimsPrincipal user, object resource, AuthorizationPolicy policy)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AuthorizeAsync(service As IAuthorizationService, user As ClaimsPrincipal, resource As Object, policy As AuthorizationPolicy) As Task(Of Boolean)
    parameters:
    - id: service
      type: Microsoft.AspNetCore.Authorization.IAuthorizationService
      description: The <xref href="Microsoft.AspNetCore.Authorization.IAuthorizationService" data-throw-if-not-resolved="false"></xref> providing authorization.
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: The user to evaluate the policy against.
    - id: resource
      type: System.Object
      description: The resource to evaluate the policy against.
    - id: policy
      type: Microsoft.AspNetCore.Authorization.AuthorizationPolicy
      description: The policy to evaluate.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA flag indicating whether policy evaluation has succeeded or failed.\nThis value is <returns>true</returns> when the user fulfills the policy, otherwise <returns>false</returns>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  id: AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  langs:
  - csharp
  - vb
  name: AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, AuthorizationPolicy)
  nameWithType: AuthorizationServiceExtensions.AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, AuthorizationPolicy)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, Microsoft.AspNetCore.Authorization.AuthorizationPolicy)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizeAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
    startLine: 77
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nChecks if a user meets a specific authorization policy against the specified resource.\n"
  example: []
  syntax:
    content: public static Task<bool> AuthorizeAsync(this IAuthorizationService service, ClaimsPrincipal user, AuthorizationPolicy policy)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AuthorizeAsync(service As IAuthorizationService, user As ClaimsPrincipal, policy As AuthorizationPolicy) As Task(Of Boolean)
    parameters:
    - id: service
      type: Microsoft.AspNetCore.Authorization.IAuthorizationService
      description: The <xref href="Microsoft.AspNetCore.Authorization.IAuthorizationService" data-throw-if-not-resolved="false"></xref> providing authorization.
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: The user to evaluate the policy against.
    - id: policy
      type: Microsoft.AspNetCore.Authorization.AuthorizationPolicy
      description: The policy to evaluate.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA flag indicating whether policy evaluation has succeeded or failed.\nThis value is <returns>true</returns> when the user fulfills the policy, otherwise <returns>false</returns>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)
  id: AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService,System.Security.Claims.ClaimsPrincipal,System.String)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions
  langs:
  - csharp
  - vb
  name: AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, String)
  nameWithType: AuthorizationServiceExtensions.AuthorizeAsync(IAuthorizationService, ClaimsPrincipal, String)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationServiceExtensions.AuthorizeAsync(Microsoft.AspNetCore.Authorization.IAuthorizationService, System.Security.Claims.ClaimsPrincipal, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizeAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationServiceExtensions.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nChecks if a user meets a specific authorization policy against the specified resource.\n"
  example: []
  syntax:
    content: public static Task<bool> AuthorizeAsync(this IAuthorizationService service, ClaimsPrincipal user, string policyName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AuthorizeAsync(service As IAuthorizationService, user As ClaimsPrincipal, policyName As String) As Task(Of Boolean)
    parameters:
    - id: service
      type: Microsoft.AspNetCore.Authorization.IAuthorizationService
      description: The <xref href="Microsoft.AspNetCore.Authorization.IAuthorizationService" data-throw-if-not-resolved="false"></xref> providing authorization.
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: The user to evaluate the policy against.
    - id: policyName
      type: System.String
      description: The name of the policy to evaluate.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA flag indicating whether policy evaluation has succeeded or failed.\nThis value is <returns>true</returns> when the user fulfills the policy, otherwise <returns>false</returns>.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationService
  commentId: T:Microsoft.AspNetCore.Authorization.IAuthorizationService
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: IAuthorizationService
  nameWithType: IAuthorizationService
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationService
- uid: Microsoft.AspNetCore.Authorization
  commentId: N:Microsoft.AspNetCore.Authorization
  isExternal: false
  name: Microsoft.AspNetCore.Authorization
  nameWithType: Microsoft.AspNetCore.Authorization
  fullName: Microsoft.AspNetCore.Authorization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
  commentId: T:Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: IAuthorizationRequirement
  nameWithType: IAuthorizationRequirement
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Authorization.AuthorizationPolicy
  commentId: T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: AuthorizationPolicy
  nameWithType: AuthorizationPolicy
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationPolicy
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
