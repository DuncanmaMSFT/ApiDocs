### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  commentId: T:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  id: SecureDataFormatTests
  parent: Microsoft.AspNetCore.Authentication.DataHandler
  children:
  - Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.#ctor
  - Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectDataRoundTrips
  - Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectWithPurposeRoundTrips
  - Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ServiceProvider
  - Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.UnprotectWithDifferentPurposeFails
  langs:
  - csharp
  - vb
  name: SecureDataFormatTests
  nameWithType: SecureDataFormatTests
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: SecureDataFormatTests
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: public class SecureDataFormatTests
    content.vb: Public Class SecureDataFormatTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.#ctor
  commentId: M:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  langs:
  - csharp
  - vb
  name: SecureDataFormatTests()
  nameWithType: SecureDataFormatTests.SecureDataFormatTests()
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.SecureDataFormatTests()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: .ctor
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: public SecureDataFormatTests()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ServiceProvider
  commentId: P:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ServiceProvider
  id: ServiceProvider
  parent: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  langs:
  - csharp
  - vb
  name: ServiceProvider
  nameWithType: SecureDataFormatTests.ServiceProvider
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ServiceProvider
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: ServiceProvider
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: public IServiceProvider ServiceProvider { get; }
    content.vb: Public ReadOnly Property ServiceProvider As IServiceProvider
    parameters: []
    return:
      type: System.IServiceProvider
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectDataRoundTrips
  commentId: M:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectDataRoundTrips
  id: ProtectDataRoundTrips
  parent: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  langs:
  - csharp
  - vb
  name: ProtectDataRoundTrips()
  nameWithType: SecureDataFormatTests.ProtectDataRoundTrips()
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectDataRoundTrips()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: ProtectDataRoundTrips
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: >-
      [Fact]

      public void ProtectDataRoundTrips()
    content.vb: >-
      <Fact>

      Public Sub ProtectDataRoundTrips
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectWithPurposeRoundTrips
  commentId: M:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectWithPurposeRoundTrips
  id: ProtectWithPurposeRoundTrips
  parent: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  langs:
  - csharp
  - vb
  name: ProtectWithPurposeRoundTrips()
  nameWithType: SecureDataFormatTests.ProtectWithPurposeRoundTrips()
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.ProtectWithPurposeRoundTrips()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: ProtectWithPurposeRoundTrips
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 35
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: >-
      [Fact]

      public void ProtectWithPurposeRoundTrips()
    content.vb: >-
      <Fact>

      Public Sub ProtectWithPurposeRoundTrips
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.UnprotectWithDifferentPurposeFails
  commentId: M:Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.UnprotectWithDifferentPurposeFails
  id: UnprotectWithDifferentPurposeFails
  parent: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests
  langs:
  - csharp
  - vb
  name: UnprotectWithDifferentPurposeFails()
  nameWithType: SecureDataFormatTests.UnprotectWithDifferentPurposeFails()
  fullName: Microsoft.AspNetCore.Authentication.DataHandler.SecureDataFormatTests.UnprotectWithDifferentPurposeFails()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: UnprotectWithDifferentPurposeFails
    path: test/Microsoft.AspNetCore.Authentication.Test/DataHandler/SecureDataFormatTests.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Authentication.Test
  namespace: Microsoft.AspNetCore.Authentication.DataHandler
  syntax:
    content: >-
      [Fact]

      public void UnprotectWithDifferentPurposeFails()
    content.vb: >-
      <Fact>

      Public Sub UnprotectWithDifferentPurposeFails
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Authentication.DataHandler
  commentId: N:Microsoft.AspNetCore.Authentication.DataHandler
  isExternal: false
  name: Microsoft.AspNetCore.Authentication.DataHandler
  nameWithType: Microsoft.AspNetCore.Authentication.DataHandler
  fullName: Microsoft.AspNetCore.Authentication.DataHandler
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
