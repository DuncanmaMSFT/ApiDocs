### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  commentId: T:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  id: AssertionRequirement
  parent: Microsoft.AspNetCore.Authorization.Infrastructure
  children:
  - Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})
  - Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  - Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
  langs:
  - csharp
  - vb
  name: AssertionRequirement
  nameWithType: AssertionRequirement
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AssertionRequirement
    path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization.Infrastructure
  summary: "\nImplements an <xref href=\"Microsoft.AspNetCore.Authorization.IAuthorizationHandler\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Microsoft.AspNetCore.Authorization.IAuthorizationRequirement\" data-throw-if-not-resolved=\"false\"></xref>\nthat takes a user specified assertion.\n"
  example: []
  syntax:
    content: 'public class AssertionRequirement : IAuthorizationHandler, IAuthorizationRequirement'
    content.vb: >-
      Public Class AssertionRequirement
          Implements IAuthorizationHandler, IAuthorizationRequirement
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  - Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
  commentId: P:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
  id: Handler
  parent: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  langs:
  - csharp
  - vb
  name: Handler
  nameWithType: AssertionRequirement.Handler
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: Handler
    path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization.Infrastructure
  summary: "\nFunction that is called to handle this requirement.\n"
  example: []
  syntax:
    content: public Func<AuthorizationHandlerContext, Task<bool>> Handler { get; }
    content.vb: Public ReadOnly Property Handler As Func(Of AuthorizationHandlerContext, Task(Of Boolean))
    parameters: []
    return:
      type: System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})
  commentId: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})
  id: '#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean})'
  parent: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  langs:
  - csharp
  - vb
  name: AssertionRequirement(Func<AuthorizationHandlerContext, Boolean>)
  nameWithType: AssertionRequirement.AssertionRequirement(Func<AuthorizationHandlerContext, Boolean>)
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.AssertionRequirement(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization.Infrastructure
  summary: "\nCreates a new instance of <xref href=\"Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AssertionRequirement(Func<AuthorizationHandlerContext, bool> handler)
    content.vb: Public Sub New(handler As Func(Of AuthorizationHandlerContext, Boolean))
    parameters:
    - id: handler
      type: System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean}
      description: Function that is called to handle this requirement.
  nameWithType.vb: AssertionRequirement.AssertionRequirement(Func(Of AuthorizationHandlerContext, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.AssertionRequirement(System.Func(Of Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Boolean))
  name.vb: AssertionRequirement(Func(Of AuthorizationHandlerContext, Boolean))
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})
  id: '#ctor(System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}})'
  parent: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  langs:
  - csharp
  - vb
  name: AssertionRequirement(Func<AuthorizationHandlerContext, Task<Boolean>>)
  nameWithType: AssertionRequirement.AssertionRequirement(Func<AuthorizationHandlerContext, Task<Boolean>>)
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.AssertionRequirement(System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Threading.Tasks.Task<System.Boolean>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization.Infrastructure
  summary: "\nCreates a new instance of <xref href=\"Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public AssertionRequirement(Func<AuthorizationHandlerContext, Task<bool>> handler)
    content.vb: Public Sub New(handler As Func(Of AuthorizationHandlerContext, Task(Of Boolean)))
    parameters:
    - id: handler
      type: System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}}
      description: Function that is called to handle this requirement.
  nameWithType.vb: AssertionRequirement.AssertionRequirement(Func(Of AuthorizationHandlerContext, Task(Of Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.AssertionRequirement(System.Func(Of Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: AssertionRequirement(Func(Of AuthorizationHandlerContext, Task(Of Boolean)))
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  commentId: M:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  id: HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  parent: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  langs:
  - csharp
  - vb
  name: HandleAsync(AuthorizationHandlerContext)
  nameWithType: AssertionRequirement.HandleAsync(AuthorizationHandlerContext)
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: HandleAsync
    path: src/Microsoft.AspNetCore.Authorization/Infrastructure/AssertionRequirement.cs
    startLine: 51
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization.Infrastructure
  summary: "\nCalls <xref href=\"Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler\" data-throw-if-not-resolved=\"false\"></xref> to see if authorization is allowed.\n"
  example: []
  syntax:
    content: public Task HandleAsync(AuthorizationHandlerContext context)
    content.vb: Public Function HandleAsync(context As AuthorizationHandlerContext) As Task
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
      description: The authorization information.
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  commentId: T:Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: IAuthorizationHandler
  nameWithType: IAuthorizationHandler
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
  commentId: T:Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: IAuthorizationRequirement
  nameWithType: IAuthorizationRequirement
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationRequirement
- uid: Microsoft.AspNetCore.Authorization.Infrastructure
  commentId: N:Microsoft.AspNetCore.Authorization.Infrastructure
  isExternal: false
  name: Microsoft.AspNetCore.Authorization.Infrastructure
  nameWithType: Microsoft.AspNetCore.Authorization.Infrastructure
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Authorization
  commentId: N:Microsoft.AspNetCore.Authorization
  isExternal: false
  name: Microsoft.AspNetCore.Authorization
  nameWithType: Microsoft.AspNetCore.Authorization
  fullName: Microsoft.AspNetCore.Authorization
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<AuthorizationHandlerContext, Task<Boolean>>
  nameWithType: Func<AuthorizationHandlerContext, Task<Boolean>>
  fullName: System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of AuthorizationHandlerContext, Task(Of Boolean))
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of AuthorizationHandlerContext, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  commentId: T:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
  isExternal: false
  name: AssertionRequirement
  nameWithType: AssertionRequirement
  fullName: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement
- uid: System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean}
  commentId: T:System.Func{Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<AuthorizationHandlerContext, Boolean>
  nameWithType: Func<AuthorizationHandlerContext, Boolean>
  fullName: System.Func<Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Boolean>
  nameWithType.vb: Func(Of AuthorizationHandlerContext, Boolean)
  fullname.vb: System.Func(Of Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, System.Boolean)
  name.vb: Func(Of AuthorizationHandlerContext, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
  commentId: P:Microsoft.AspNetCore.Authorization.Infrastructure.AssertionRequirement.Handler
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  commentId: M:Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  parent: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  isExternal: false
  name: HandleAsync(AuthorizationHandlerContext)
  nameWithType: IAuthorizationHandler.HandleAsync(AuthorizationHandlerContext)
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    name: HandleAsync
    nameWithType: IAuthorizationHandler.HandleAsync
    fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    name: HandleAsync
    nameWithType: IAuthorizationHandler.HandleAsync
    fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  commentId: T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: AuthorizationHandlerContext
  nameWithType: AuthorizationHandlerContext
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
