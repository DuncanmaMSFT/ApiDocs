### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2
  commentId: T:Microsoft.AspNetCore.Authorization.AuthorizationHandler`2
  id: AuthorizationHandler`2
  parent: Microsoft.AspNetCore.Authorization
  children:
  - Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  - Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,`0,`1)
  langs:
  - csharp
  - vb
  name: AuthorizationHandler<TRequirement, TResource>
  nameWithType: AuthorizationHandler<TRequirement, TResource>
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandler<TRequirement, TResource>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: AuthorizationHandler
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nBase class for authorization handlers that need to be called for specific requirement and\nresource types.\n"
  example: []
  syntax:
    content: 'public abstract class AuthorizationHandler<TRequirement, TResource> : IAuthorizationHandler where TRequirement : IAuthorizationRequirement'
    content.vb: >-
      Public MustInherit Class AuthorizationHandler(Of TRequirement As IAuthorizationRequirement, TResource)
          Implements IAuthorizationHandler
    typeParameters:
    - id: TRequirement
      description: The type of the requirement to evaluate.
    - id: TResource
      description: The type of the resource to evaluate.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: AuthorizationHandler(Of TRequirement, TResource)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Authorization.AuthorizationHandler(Of TRequirement, TResource)
  name.vb: AuthorizationHandler(Of TRequirement, TResource)
- uid: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  id: HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  parent: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2
  langs:
  - csharp
  - vb
  name: HandleAsync(AuthorizationHandlerContext)
  nameWithType: AuthorizationHandler<TRequirement, TResource>.HandleAsync(AuthorizationHandlerContext)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandler<TRequirement, TResource>.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: HandleAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nMakes a decision if authorization is allowed.\n"
  example: []
  syntax:
    content: public virtual Task HandleAsync(AuthorizationHandlerContext context)
    content.vb: Public Overridable Function HandleAsync(context As AuthorizationHandlerContext) As Task
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
      description: The authorization context.
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  nameWithType.vb: AuthorizationHandler(Of TRequirement, TResource).HandleAsync(AuthorizationHandlerContext)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Authorization.AuthorizationHandler(Of TRequirement, TResource).HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
- uid: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,`0,`1)
  commentId: M:Microsoft.AspNetCore.Authorization.AuthorizationHandler`2.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,`0,`1)
  id: HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,`0,`1)
  parent: Microsoft.AspNetCore.Authorization.AuthorizationHandler`2
  langs:
  - csharp
  - vb
  name: HandleRequirementAsync(AuthorizationHandlerContext, TRequirement, TResource)
  nameWithType: AuthorizationHandler<TRequirement, TResource>.HandleRequirementAsync(AuthorizationHandlerContext, TRequirement, TResource)
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandler<TRequirement, TResource>.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, TRequirement, TResource)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
      branch: master
      repo: https://github.com/aspnet/Security.git
    id: HandleRequirementAsync
    path: src/Microsoft.AspNetCore.Authorization/AuthorizationHandler.cs
    startLine: 65
  assemblies:
  - Microsoft.AspNetCore.Authorization
  namespace: Microsoft.AspNetCore.Authorization
  summary: "\nMakes a decision if authorization is allowed based on a specific requirement and resource.\n"
  example: []
  syntax:
    content: protected abstract Task HandleRequirementAsync(AuthorizationHandlerContext context, TRequirement requirement, TResource resource)
    content.vb: Protected MustOverride Function HandleRequirementAsync(context As AuthorizationHandlerContext, requirement As TRequirement, resource As TResource) As Task
    parameters:
    - id: context
      type: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
      description: The authorization context.
    - id: requirement
      type: '{TRequirement}'
      description: The requirement to evaluate.
    - id: resource
      type: '{TResource}'
      description: The resource to evaluate.
    return:
      type: System.Threading.Tasks.Task
  nameWithType.vb: AuthorizationHandler(Of TRequirement, TResource).HandleRequirementAsync(AuthorizationHandlerContext, TRequirement, TResource)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Authorization.AuthorizationHandler(Of TRequirement, TResource).HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext, TRequirement, TResource)
references:
- uid: Microsoft.AspNetCore.Authorization
  commentId: N:Microsoft.AspNetCore.Authorization
  isExternal: false
  name: Microsoft.AspNetCore.Authorization
  nameWithType: Microsoft.AspNetCore.Authorization
  fullName: Microsoft.AspNetCore.Authorization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  commentId: T:Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: IAuthorizationHandler
  nameWithType: IAuthorizationHandler
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  commentId: M:Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  parent: Microsoft.AspNetCore.Authorization.IAuthorizationHandler
  isExternal: false
  name: HandleAsync(AuthorizationHandlerContext)
  nameWithType: IAuthorizationHandler.HandleAsync(AuthorizationHandlerContext)
  fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    name: HandleAsync
    nameWithType: IAuthorizationHandler.HandleAsync
    fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext)
    name: HandleAsync
    nameWithType: IAuthorizationHandler.HandleAsync
    fullName: Microsoft.AspNetCore.Authorization.IAuthorizationHandler.HandleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
    name: AuthorizationHandlerContext
    nameWithType: AuthorizationHandlerContext
    fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  commentId: T:Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
  parent: Microsoft.AspNetCore.Authorization
  isExternal: false
  name: AuthorizationHandlerContext
  nameWithType: AuthorizationHandlerContext
  fullName: Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: '{TRequirement}'
  commentId: '!:TRequirement'
  definition: TRequirement
  name: TRequirement
  nameWithType: TRequirement
  fullName: TRequirement
- uid: '{TResource}'
  commentId: '!:TResource'
  definition: TResource
  name: TResource
  nameWithType: TResource
  fullName: TResource
- uid: TRequirement
  isExternal: false
  name: TRequirement
  nameWithType: TRequirement
  fullName: TRequirement
- uid: TResource
  commentId: '!:TResource'
  isExternal: false
  name: TResource
  nameWithType: TResource
  fullName: TResource
