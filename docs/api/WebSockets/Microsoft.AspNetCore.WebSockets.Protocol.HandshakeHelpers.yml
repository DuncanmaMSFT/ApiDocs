### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  commentId: T:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  id: HandshakeHelpers
  parent: Microsoft.AspNetCore.WebSockets.Protocol
  children:
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CheckSupportedWebSocketRequest(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateRequestKey
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateResponseKey(System.String)
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.GenerateResponseHeaders(System.String,System.String)
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsRequestKeyValid(System.String)
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsResponseKeyValid(System.String)
  - Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.NeededHeaders
  langs:
  - csharp
  - vb
  name: HandshakeHelpers
  nameWithType: HandshakeHelpers
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: HandshakeHelpers
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  syntax:
    content: public static class HandshakeHelpers
    content.vb: Public Module HandshakeHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.NeededHeaders
  commentId: P:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.NeededHeaders
  id: NeededHeaders
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: NeededHeaders
  nameWithType: HandshakeHelpers.NeededHeaders
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.NeededHeaders
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: NeededHeaders
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  summary: "\nGets request headers needed process the handshake on the server.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> NeededHeaders { get; }
    content.vb: Public Shared ReadOnly Property NeededHeaders As IEnumerable(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CheckSupportedWebSocketRequest(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CheckSupportedWebSocketRequest(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: CheckSupportedWebSocketRequest(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: CheckSupportedWebSocketRequest(String, IEnumerable<KeyValuePair<String, String>>)
  nameWithType: HandshakeHelpers.CheckSupportedWebSocketRequest(String, IEnumerable<KeyValuePair<String, String>>)
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CheckSupportedWebSocketRequest(System.String, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: CheckSupportedWebSocketRequest
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  syntax:
    content: public static bool CheckSupportedWebSocketRequest(string method, IEnumerable<KeyValuePair<string, string>> headers)
    content.vb: Public Shared Function CheckSupportedWebSocketRequest(method As String, headers As IEnumerable(Of KeyValuePair(Of String, String))) As Boolean
    parameters:
    - id: method
      type: System.String
    - id: headers
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
    return:
      type: System.Boolean
  nameWithType.vb: HandshakeHelpers.CheckSupportedWebSocketRequest(String, IEnumerable(Of KeyValuePair(Of String, String)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CheckSupportedWebSocketRequest(System.String, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String)))
  name.vb: CheckSupportedWebSocketRequest(String, IEnumerable(Of KeyValuePair(Of String, String)))
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.GenerateResponseHeaders(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.GenerateResponseHeaders(System.String,System.String)
  id: GenerateResponseHeaders(System.String,System.String)
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: GenerateResponseHeaders(String, String)
  nameWithType: HandshakeHelpers.GenerateResponseHeaders(String, String)
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.GenerateResponseHeaders(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: GenerateResponseHeaders
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  syntax:
    content: public static IEnumerable<KeyValuePair<string, string>> GenerateResponseHeaders(string key, string subProtocol)
    content.vb: Public Shared Function GenerateResponseHeaders(key As String, subProtocol As String) As IEnumerable(Of KeyValuePair(Of String, String))
    parameters:
    - id: key
      type: System.String
    - id: subProtocol
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsRequestKeyValid(System.String)
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsRequestKeyValid(System.String)
  id: IsRequestKeyValid(System.String)
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: IsRequestKeyValid(String)
  nameWithType: HandshakeHelpers.IsRequestKeyValid(String)
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsRequestKeyValid(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: IsRequestKeyValid
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 88
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  summary: "\nValidates the Sec-WebSocket-Key request header\n\"The value of this header field MUST be a nonce consisting of a randomly selected 16-byte value that has been base64-encoded.\"\n"
  example: []
  syntax:
    content: public static bool IsRequestKeyValid(string value)
    content.vb: Public Shared Function IsRequestKeyValid(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsResponseKeyValid(System.String)
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsResponseKeyValid(System.String)
  id: IsResponseKeyValid(System.String)
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: IsResponseKeyValid(String)
  nameWithType: HandshakeHelpers.IsResponseKeyValid(String)
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.IsResponseKeyValid(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: IsResponseKeyValid
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 105
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  syntax:
    content: public static bool IsResponseKeyValid(string value)
    content.vb: Public Shared Function IsResponseKeyValid(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateRequestKey
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateRequestKey
  id: CreateRequestKey
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: CreateRequestKey()
  nameWithType: HandshakeHelpers.CreateRequestKey()
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateRequestKey()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: CreateRequestKey
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 114
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  summary: "\n\"The value of this header field MUST be a nonce consisting of a randomly selected 16-byte value that has been base64-encoded.\"\n"
  example: []
  syntax:
    content: public static string CreateRequestKey()
    content.vb: Public Shared Function CreateRequestKey As String
    return:
      type: System.String
      description: ''
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateResponseKey(System.String)
  commentId: M:Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateResponseKey(System.String)
  id: CreateResponseKey(System.String)
  parent: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers
  langs:
  - csharp
  - vb
  name: CreateResponseKey(String)
  nameWithType: HandshakeHelpers.CreateResponseKey(String)
  fullName: Microsoft.AspNetCore.WebSockets.Protocol.HandshakeHelpers.CreateResponseKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
      branch: master
      repo: https://github.com/aspnet/WebSockets.git
    id: CreateResponseKey
    path: src/Microsoft.AspNetCore.WebSockets.Protocol/HandshakeHelpers.cs
    startLine: 125
  assemblies:
  - Microsoft.AspNetCore.WebSockets.Protocol
  namespace: Microsoft.AspNetCore.WebSockets.Protocol
  summary: "\n\"...the base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-Key| (as a string, not base64-decoded) with the string\n'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'\"\n"
  example: []
  syntax:
    content: public static string CreateResponseKey(string requestKey)
    content.vb: Public Shared Function CreateResponseKey(requestKey As String) As String
    parameters:
    - id: requestKey
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.WebSockets.Protocol
  commentId: N:Microsoft.AspNetCore.WebSockets.Protocol
  isExternal: false
  name: Microsoft.AspNetCore.WebSockets.Protocol
  nameWithType: Microsoft.AspNetCore.WebSockets.Protocol
  fullName: Microsoft.AspNetCore.WebSockets.Protocol
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<String, String>>
  nameWithType: IEnumerable<KeyValuePair<String, String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.String>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of String, String))
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.String))
  name.vb: IEnumerable(Of KeyValuePair(Of String, String))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
