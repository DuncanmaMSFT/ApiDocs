### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  commentId: T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  id: UrlMatchingNode
  parent: Microsoft.AspNetCore.Routing.Tree
  children:
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.#ctor(System.Int32)
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.CatchAlls
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedCatchAlls
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedParameters
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Depth
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.IsCatchAll
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Literals
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Matches
  - Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Parameters
  langs:
  - csharp
  - vb
  name: UrlMatchingNode
  nameWithType: UrlMatchingNode
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: UrlMatchingNode
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nA node in a <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class UrlMatchingNode
    content.vb: Public Class UrlMatchingNode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.#ctor(System.Int32)
  commentId: M:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: UrlMatchingNode(Int32)
  nameWithType: UrlMatchingNode.UrlMatchingNode(Int32)
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.UrlMatchingNode(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nInitializes a new instance of <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UrlMatchingNode(int length)
    content.vb: Public Sub New(length As Integer)
    parameters:
    - id: length
      type: System.Int32
      description: The length of the path to this node in the <xref href="Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Depth
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Depth
  id: Depth
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: UrlMatchingNode.Depth
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Depth
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Depth
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets the length of the path to this node in the <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Depth { get; }
    content.vb: Public ReadOnly Property Depth As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.IsCatchAll
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.IsCatchAll
  id: IsCatchAll
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: IsCatchAll
  nameWithType: UrlMatchingNode.IsCatchAll
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.IsCatchAll
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: IsCatchAll
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 36
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets or sets a value indicating whether this node represents a catch all segment.\n"
  example: []
  syntax:
    content: public bool IsCatchAll { get; set; }
    content.vb: Public Property IsCatchAll As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Matches
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Matches
  id: Matches
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: Matches
  nameWithType: UrlMatchingNode.Matches
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Matches
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Matches
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 44
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets the list of matching route entries associated with this node.\n"
  remarks: "\nThese entries are sorted by precedence then template.\n"
  example: []
  syntax:
    content: public List<InboundMatch> Matches { get; }
    content.vb: Public ReadOnly Property Matches As List(Of InboundMatch)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.AspNetCore.Routing.Tree.InboundMatch}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Literals
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Literals
  id: Literals
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: Literals
  nameWithType: UrlMatchingNode.Literals
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Literals
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Literals
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets the literal segments following this segment.\n"
  example: []
  syntax:
    content: public Dictionary<string, UrlMatchingNode> Literals { get; }
    content.vb: Public ReadOnly Property Literals As Dictionary(Of String, UrlMatchingNode)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedParameters
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedParameters
  id: ConstrainedParameters
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: ConstrainedParameters
  nameWithType: UrlMatchingNode.ConstrainedParameters
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedParameters
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: ConstrainedParameters
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode\" data-throw-if-not-resolved=\"false\"></xref> representing\nparameter segments with constraints following this segment in the <xref href=\"Microsoft.AspNetCore.Routing.Tree.TreeRouter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UrlMatchingNode ConstrainedParameters { get; set; }
    content.vb: Public Property ConstrainedParameters As UrlMatchingNode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Parameters
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Parameters
  id: Parameters
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: UrlMatchingNode.Parameters
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.Parameters
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Parameters
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 61
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode\" data-throw-if-not-resolved=\"false\"></xref> representing\nparameter segments following this segment in the <xref href=\"Microsoft.AspNetCore.Routing.Tree.TreeRouter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UrlMatchingNode Parameters { get; set; }
    content.vb: Public Property Parameters As UrlMatchingNode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedCatchAlls
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedCatchAlls
  id: ConstrainedCatchAlls
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: ConstrainedCatchAlls
  nameWithType: UrlMatchingNode.ConstrainedCatchAlls
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.ConstrainedCatchAlls
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: ConstrainedCatchAlls
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode\" data-throw-if-not-resolved=\"false\"></xref> representing\ncatch all parameter segments with constraints following this segment in the <xref href=\"Microsoft.AspNetCore.Routing.Tree.TreeRouter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UrlMatchingNode ConstrainedCatchAlls { get; set; }
    content.vb: Public Property ConstrainedCatchAlls As UrlMatchingNode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.CatchAlls
  commentId: P:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.CatchAlls
  id: CatchAlls
  parent: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  langs:
  - csharp
  - vb
  name: CatchAlls
  nameWithType: UrlMatchingNode.CatchAlls
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode.CatchAlls
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: CatchAlls
    path: src/Microsoft.AspNetCore.Routing/Tree/UrlMatchingNode.cs
    startLine: 73
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Tree
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode\" data-throw-if-not-resolved=\"false\"></xref> representing\ncatch all parameter segments following this segment in the <xref href=\"Microsoft.AspNetCore.Routing.Tree.TreeRouter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UrlMatchingNode CatchAlls { get; set; }
    content.vb: Public Property CatchAlls As UrlMatchingNode
    parameters: []
    return:
      type: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree
  commentId: T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree
  isExternal: false
  name: UrlMatchingTree
  nameWithType: UrlMatchingTree
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingTree
- uid: Microsoft.AspNetCore.Routing.Tree
  commentId: N:Microsoft.AspNetCore.Routing.Tree
  isExternal: false
  name: Microsoft.AspNetCore.Routing.Tree
  nameWithType: Microsoft.AspNetCore.Routing.Tree
  fullName: Microsoft.AspNetCore.Routing.Tree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  commentId: T:Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  parent: Microsoft.AspNetCore.Routing.Tree
  isExternal: false
  name: UrlMatchingNode
  nameWithType: UrlMatchingNode
  fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List{Microsoft.AspNetCore.Routing.Tree.InboundMatch}
  commentId: T:System.Collections.Generic.List{Microsoft.AspNetCore.Routing.Tree.InboundMatch}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<InboundMatch>
  nameWithType: List<InboundMatch>
  fullName: System.Collections.Generic.List<Microsoft.AspNetCore.Routing.Tree.InboundMatch>
  nameWithType.vb: List(Of InboundMatch)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.AspNetCore.Routing.Tree.InboundMatch)
  name.vb: List(Of InboundMatch)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Routing.Tree.InboundMatch
    name: InboundMatch
    nameWithType: InboundMatch
    fullName: Microsoft.AspNetCore.Routing.Tree.InboundMatch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Routing.Tree.InboundMatch
    name: InboundMatch
    nameWithType: InboundMatch
    fullName: Microsoft.AspNetCore.Routing.Tree.InboundMatch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, UrlMatchingNode>
  nameWithType: Dictionary<String, UrlMatchingNode>
  fullName: System.Collections.Generic.Dictionary<System.String, Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode>
  nameWithType.vb: Dictionary(Of String, UrlMatchingNode)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode)
  name.vb: Dictionary(Of String, UrlMatchingNode)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
    name: UrlMatchingNode
    nameWithType: UrlMatchingNode
    fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
    name: UrlMatchingNode
    nameWithType: UrlMatchingNode
    fullName: Microsoft.AspNetCore.Routing.Tree.UrlMatchingNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Routing.Tree.TreeRouter
  commentId: T:Microsoft.AspNetCore.Routing.Tree.TreeRouter
  parent: Microsoft.AspNetCore.Routing.Tree
  isExternal: false
  name: TreeRouter
  nameWithType: TreeRouter
  fullName: Microsoft.AspNetCore.Routing.Tree.TreeRouter
