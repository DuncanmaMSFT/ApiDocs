### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Routing.Internal.BufferValue
  commentId: T:Microsoft.AspNetCore.Routing.Internal.BufferValue
  id: BufferValue
  parent: Microsoft.AspNetCore.Routing.Internal
  children:
  - Microsoft.AspNetCore.Routing.Internal.BufferValue.#ctor(System.String,System.Boolean)
  - Microsoft.AspNetCore.Routing.Internal.BufferValue.RequiresEncoding
  - Microsoft.AspNetCore.Routing.Internal.BufferValue.Value
  langs:
  - csharp
  - vb
  name: BufferValue
  nameWithType: BufferValue
  fullName: Microsoft.AspNetCore.Routing.Internal.BufferValue
  type: Struct
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: BufferValue
    path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
    startLine: 5
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Internal
  syntax:
    content: public struct BufferValue
    content.vb: Public Structure BufferValue
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.AspNetCore.Routing.Internal.BufferValue.#ctor(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Routing.Internal.BufferValue.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: Microsoft.AspNetCore.Routing.Internal.BufferValue
  langs:
  - csharp
  - vb
  name: BufferValue(String, Boolean)
  nameWithType: BufferValue.BufferValue(String, Boolean)
  fullName: Microsoft.AspNetCore.Routing.Internal.BufferValue.BufferValue(System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
    startLine: 7
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Internal
  syntax:
    content: public BufferValue(string value, bool requiresEncoding)
    content.vb: Public Sub New(value As String, requiresEncoding As Boolean)
    parameters:
    - id: value
      type: System.String
    - id: requiresEncoding
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Routing.Internal.BufferValue.RequiresEncoding
  commentId: P:Microsoft.AspNetCore.Routing.Internal.BufferValue.RequiresEncoding
  id: RequiresEncoding
  parent: Microsoft.AspNetCore.Routing.Internal.BufferValue
  langs:
  - csharp
  - vb
  name: RequiresEncoding
  nameWithType: BufferValue.RequiresEncoding
  fullName: Microsoft.AspNetCore.Routing.Internal.BufferValue.RequiresEncoding
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: RequiresEncoding
    path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Internal
  syntax:
    content: public bool RequiresEncoding { get; }
    content.vb: Public ReadOnly Property RequiresEncoding As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Routing.Internal.BufferValue.Value
  commentId: P:Microsoft.AspNetCore.Routing.Internal.BufferValue.Value
  id: Value
  parent: Microsoft.AspNetCore.Routing.Internal.BufferValue
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: BufferValue.Value
  fullName: Microsoft.AspNetCore.Routing.Internal.BufferValue.Value
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
      branch: master
      repo: https://github.com/aspnet/Routing.git
    id: Value
    path: src/Microsoft.AspNetCore.Routing/Internal/BufferValue.cs
    startLine: 15
  assemblies:
  - Microsoft.AspNetCore.Routing
  namespace: Microsoft.AspNetCore.Routing.Internal
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Routing.Internal
  commentId: N:Microsoft.AspNetCore.Routing.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Routing.Internal
  nameWithType: Microsoft.AspNetCore.Routing.Internal
  fullName: Microsoft.AspNetCore.Routing.Internal
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
