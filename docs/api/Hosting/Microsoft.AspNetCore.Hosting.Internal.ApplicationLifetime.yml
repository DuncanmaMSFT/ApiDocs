### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  commentId: T:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  id: ApplicationLifetime
  parent: Microsoft.AspNetCore.Hosting.Internal
  children:
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  - Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  langs:
  - csharp
  - vb
  name: ApplicationLifetime
  nameWithType: ApplicationLifetime
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationLifetime
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nAllows consumers to perform cleanup during a graceful shutdown.\n"
  example: []
  syntax:
    content: 'public class ApplicationLifetime : IApplicationLifetime'
    content.vb: >-
      Public Class ApplicationLifetime
          Implements IApplicationLifetime
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Hosting.IApplicationLifetime
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  id: ApplicationStarted
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStarted
  nameWithType: ApplicationLifetime.ApplicationStarted
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStarted
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStarted
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host has fully started and is about to wait\nfor a graceful shutdown.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStarted { get; }
    content.vb: Public ReadOnly Property ApplicationStarted As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  implements:
  - Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStarted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  id: ApplicationStopping
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStopping
  nameWithType: ApplicationLifetime.ApplicationStopping
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopping
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStopping
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 27
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host is performing a graceful shutdown.\nRequest may still be in flight. Shutdown will block until this event completes.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStopping { get; }
    content.vb: Public ReadOnly Property ApplicationStopping As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  implements:
  - Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopping
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  commentId: P:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  id: ApplicationStopped
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: ApplicationStopped
  nameWithType: ApplicationLifetime.ApplicationStopped
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.ApplicationStopped
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ApplicationStopped
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nTriggered when the application host is performing a graceful shutdown.\nAll requests should be complete at this point. Shutdown will block\nuntil this event completes.\n"
  example: []
  syntax:
    content: public CancellationToken ApplicationStopped { get; }
    content.vb: Public ReadOnly Property ApplicationStopped As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
  implements:
  - Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopped
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication
  id: StopApplication
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: StopApplication()
  nameWithType: ApplicationLifetime.StopApplication()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.StopApplication()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: StopApplication
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStopping event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void StopApplication()
    content.vb: Public Sub StopApplication
  implements:
  - Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted
  id: NotifyStarted
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifyStarted()
  nameWithType: ApplicationLifetime.NotifyStarted()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStarted()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: NotifyStarted
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStarted event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifyStarted()
    content.vb: Public Sub NotifyStarted
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  commentId: M:Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped
  id: NotifyStopped
  parent: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime
  langs:
  - csharp
  - vb
  name: NotifyStopped()
  nameWithType: ApplicationLifetime.NotifyStopped()
  fullName: Microsoft.AspNetCore.Hosting.Internal.ApplicationLifetime.NotifyStopped()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: NotifyStopped
    path: src/Microsoft.AspNetCore.Hosting/Internal/ApplicationLifetime.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.Hosting
  namespace: Microsoft.AspNetCore.Hosting.Internal
  summary: "\nSignals the ApplicationStopped event and blocks until it completes.\n"
  example: []
  syntax:
    content: public void NotifyStopped()
    content.vb: Public Sub NotifyStopped
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Hosting.Internal
  commentId: N:Microsoft.AspNetCore.Hosting.Internal
  isExternal: false
  name: Microsoft.AspNetCore.Hosting.Internal
  nameWithType: Microsoft.AspNetCore.Hosting.Internal
  fullName: Microsoft.AspNetCore.Hosting.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime
  commentId: T:Microsoft.AspNetCore.Hosting.IApplicationLifetime
  parent: Microsoft.AspNetCore.Hosting
  isExternal: false
  name: IApplicationLifetime
  nameWithType: IApplicationLifetime
  fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Hosting
  commentId: N:Microsoft.AspNetCore.Hosting
  isExternal: false
  name: Microsoft.AspNetCore.Hosting
  nameWithType: Microsoft.AspNetCore.Hosting
  fullName: Microsoft.AspNetCore.Hosting
- uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStarted
  commentId: P:Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStarted
  parent: Microsoft.AspNetCore.Hosting.IApplicationLifetime
  isExternal: false
  name: ApplicationStarted
  nameWithType: IApplicationLifetime.ApplicationStarted
  fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStarted
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopping
  commentId: P:Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopping
  parent: Microsoft.AspNetCore.Hosting.IApplicationLifetime
  isExternal: false
  name: ApplicationStopping
  nameWithType: IApplicationLifetime.ApplicationStopping
  fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopping
- uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopped
  commentId: P:Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopped
  parent: Microsoft.AspNetCore.Hosting.IApplicationLifetime
  isExternal: false
  name: ApplicationStopped
  nameWithType: IApplicationLifetime.ApplicationStopped
  fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.ApplicationStopped
- uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
  commentId: M:Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
  parent: Microsoft.AspNetCore.Hosting.IApplicationLifetime
  isExternal: false
  name: StopApplication()
  nameWithType: IApplicationLifetime.StopApplication()
  fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
    name: StopApplication
    nameWithType: IApplicationLifetime.StopApplication
    fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
    name: StopApplication
    nameWithType: IApplicationLifetime.StopApplication
    fullName: Microsoft.AspNetCore.Hosting.IApplicationLifetime.StopApplication
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
