### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1
  commentId: T:Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1
  id: IHttpApplication`1
  parent: Microsoft.AspNetCore.Hosting.Server
  children:
  - Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
  - Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.DisposeContext(`0,System.Exception)
  - Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.ProcessRequestAsync(`0)
  langs:
  - csharp
  - vb
  name: IHttpApplication<TContext>
  nameWithType: IHttpApplication<TContext>
  fullName: Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: IHttpApplication
    path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Hosting.Server.Abstractions
  namespace: Microsoft.AspNetCore.Hosting.Server
  summary: "\nRepresents an application.\n"
  example: []
  syntax:
    content: public interface IHttpApplication<TContext>
    content.vb: Public Interface IHttpApplication(Of TContext)
    typeParameters:
    - id: TContext
      description: The context associated with the application.
  nameWithType.vb: IHttpApplication(Of TContext)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.AspNetCore.Hosting.Server.IHttpApplication(Of TContext)
  name.vb: IHttpApplication(Of TContext)
- uid: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
  commentId: M:Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
  id: CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
  parent: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1
  langs:
  - csharp
  - vb
  name: CreateContext(IFeatureCollection)
  nameWithType: IHttpApplication<TContext>.CreateContext(IFeatureCollection)
  fullName: Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: CreateContext
    path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Hosting.Server.Abstractions
  namespace: Microsoft.AspNetCore.Hosting.Server
  summary: "\nCreate a TContext given a collection of HTTP features.\n"
  example: []
  syntax:
    content: TContext CreateContext(IFeatureCollection contextFeatures)
    content.vb: Function CreateContext(contextFeatures As IFeatureCollection) As TContext
    parameters:
    - id: contextFeatures
      type: Microsoft.AspNetCore.Http.Features.IFeatureCollection
      description: A collection of HTTP features to be used for creating the TContext.
    return:
      type: '{TContext}'
      description: The created TContext.
  nameWithType.vb: IHttpApplication(Of TContext).CreateContext(IFeatureCollection)
  fullName.vb: Microsoft.AspNetCore.Hosting.Server.IHttpApplication(Of TContext).CreateContext(Microsoft.AspNetCore.Http.Features.IFeatureCollection)
- uid: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.ProcessRequestAsync(`0)
  commentId: M:Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.ProcessRequestAsync(`0)
  id: ProcessRequestAsync(`0)
  parent: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1
  langs:
  - csharp
  - vb
  name: ProcessRequestAsync(TContext)
  nameWithType: IHttpApplication<TContext>.ProcessRequestAsync(TContext)
  fullName: Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.ProcessRequestAsync(TContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: ProcessRequestAsync
    path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Hosting.Server.Abstractions
  namespace: Microsoft.AspNetCore.Hosting.Server
  summary: "\nAsynchronously processes an TContext.\n"
  example: []
  syntax:
    content: Task ProcessRequestAsync(TContext context)
    content.vb: Function ProcessRequestAsync(context As TContext) As Task
    parameters:
    - id: context
      type: '{TContext}'
      description: The TContext that the operation will process.
    return:
      type: System.Threading.Tasks.Task
  nameWithType.vb: IHttpApplication(Of TContext).ProcessRequestAsync(TContext)
  fullName.vb: Microsoft.AspNetCore.Hosting.Server.IHttpApplication(Of TContext).ProcessRequestAsync(TContext)
- uid: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.DisposeContext(`0,System.Exception)
  commentId: M:Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1.DisposeContext(`0,System.Exception)
  id: DisposeContext(`0,System.Exception)
  parent: Microsoft.AspNetCore.Hosting.Server.IHttpApplication`1
  langs:
  - csharp
  - vb
  name: DisposeContext(TContext, Exception)
  nameWithType: IHttpApplication<TContext>.DisposeContext(TContext, Exception)
  fullName: Microsoft.AspNetCore.Hosting.Server.IHttpApplication<TContext>.DisposeContext(TContext, System.Exception)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: DisposeContext
    path: src/Microsoft.AspNetCore.Hosting.Server.Abstractions/IHttpApplication.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Hosting.Server.Abstractions
  namespace: Microsoft.AspNetCore.Hosting.Server
  summary: "\nDispose a given TContext.\n"
  example: []
  syntax:
    content: void DisposeContext(TContext context, Exception exception)
    content.vb: Sub DisposeContext(context As TContext, exception As Exception)
    parameters:
    - id: context
      type: '{TContext}'
      description: The TContext to be disposed.
    - id: exception
      type: System.Exception
      description: The Exception thrown when processing did not complete successfully, otherwise null.
  nameWithType.vb: IHttpApplication(Of TContext).DisposeContext(TContext, Exception)
  fullName.vb: Microsoft.AspNetCore.Hosting.Server.IHttpApplication(Of TContext).DisposeContext(TContext, System.Exception)
references:
- uid: Microsoft.AspNetCore.Hosting.Server
  commentId: N:Microsoft.AspNetCore.Hosting.Server
  isExternal: false
  name: Microsoft.AspNetCore.Hosting.Server
  nameWithType: Microsoft.AspNetCore.Hosting.Server
  fullName: Microsoft.AspNetCore.Hosting.Server
- uid: Microsoft.AspNetCore.Http.Features.IFeatureCollection
  commentId: T:Microsoft.AspNetCore.Http.Features.IFeatureCollection
  parent: Microsoft.AspNetCore.Http.Features
  isExternal: true
  name: IFeatureCollection
  nameWithType: IFeatureCollection
  fullName: Microsoft.AspNetCore.Http.Features.IFeatureCollection
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: Microsoft.AspNetCore.Http.Features
  commentId: N:Microsoft.AspNetCore.Http.Features
  isExternal: false
  name: Microsoft.AspNetCore.Http.Features
  nameWithType: Microsoft.AspNetCore.Http.Features
  fullName: Microsoft.AspNetCore.Http.Features
- uid: TContext
  isExternal: false
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
