### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  commentId: T:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  id: HostingEnvironmentExtensions
  parent: Microsoft.AspNetCore.Hosting
  children:
  - Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  - Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)
  - Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  - Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  langs:
  - csharp
  - vb
  name: HostingEnvironmentExtensions
  nameWithType: HostingEnvironmentExtensions
  fullName: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: HostingEnvironmentExtensions
    path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Hosting.Abstractions
  namespace: Microsoft.AspNetCore.Hosting
  summary: "\nExtension methods for <xref href=\"Microsoft.AspNetCore.Hosting.IHostingEnvironment\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class HostingEnvironmentExtensions
    content.vb: Public Module HostingEnvironmentExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  commentId: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  id: IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  langs:
  - csharp
  - vb
  name: IsDevelopment(IHostingEnvironment)
  nameWithType: HostingEnvironmentExtensions.IsDevelopment(IHostingEnvironment)
  fullName: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsDevelopment(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: IsDevelopment
    path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Hosting.Abstractions
  namespace: Microsoft.AspNetCore.Hosting
  summary: "\nChecks if the current hosting environment name is \"Development\".\n"
  example: []
  syntax:
    content: public static bool IsDevelopment(this IHostingEnvironment hostingEnvironment)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDevelopment(hostingEnvironment As IHostingEnvironment) As Boolean
    parameters:
    - id: hostingEnvironment
      type: Microsoft.AspNetCore.Hosting.IHostingEnvironment
      description: An instance of <xref href="Microsoft.AspNetCore.Hosting.IHostingEnvironment" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: True if the environment name is "Development", otherwise false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  commentId: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  id: IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  langs:
  - csharp
  - vb
  name: IsStaging(IHostingEnvironment)
  nameWithType: HostingEnvironmentExtensions.IsStaging(IHostingEnvironment)
  fullName: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsStaging(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: IsStaging
    path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Hosting.Abstractions
  namespace: Microsoft.AspNetCore.Hosting
  summary: "\nChecks if the current hosting environment name is \"Staging\".\n"
  example: []
  syntax:
    content: public static bool IsStaging(this IHostingEnvironment hostingEnvironment)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsStaging(hostingEnvironment As IHostingEnvironment) As Boolean
    parameters:
    - id: hostingEnvironment
      type: Microsoft.AspNetCore.Hosting.IHostingEnvironment
      description: An instance of <xref href="Microsoft.AspNetCore.Hosting.IHostingEnvironment" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: True if the environment name is "Staging", otherwise false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  commentId: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  id: IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  langs:
  - csharp
  - vb
  name: IsProduction(IHostingEnvironment)
  nameWithType: HostingEnvironmentExtensions.IsProduction(IHostingEnvironment)
  fullName: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsProduction(Microsoft.AspNetCore.Hosting.IHostingEnvironment)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: IsProduction
    path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Hosting.Abstractions
  namespace: Microsoft.AspNetCore.Hosting
  summary: "\nChecks if the current hosting environment name is \"Production\".\n"
  example: []
  syntax:
    content: public static bool IsProduction(this IHostingEnvironment hostingEnvironment)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsProduction(hostingEnvironment As IHostingEnvironment) As Boolean
    parameters:
    - id: hostingEnvironment
      type: Microsoft.AspNetCore.Hosting.IHostingEnvironment
      description: An instance of <xref href="Microsoft.AspNetCore.Hosting.IHostingEnvironment" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: True if the environment name is "Production", otherwise false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)
  commentId: M:Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)
  id: IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.String)
  isExtensionMethod: true
  parent: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions
  langs:
  - csharp
  - vb
  name: IsEnvironment(IHostingEnvironment, String)
  nameWithType: HostingEnvironmentExtensions.IsEnvironment(IHostingEnvironment, String)
  fullName: Microsoft.AspNetCore.Hosting.HostingEnvironmentExtensions.IsEnvironment(Microsoft.AspNetCore.Hosting.IHostingEnvironment, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
      branch: master
      repo: https://github.com/aspnet/Hosting.git
    id: IsEnvironment
    path: src/Microsoft.AspNetCore.Hosting.Abstractions/HostingEnvironmentExtensions.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Hosting.Abstractions
  namespace: Microsoft.AspNetCore.Hosting
  summary: "\nCompares the current hosting environment name against the specified value.\n"
  example: []
  syntax:
    content: public static bool IsEnvironment(this IHostingEnvironment hostingEnvironment, string environmentName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEnvironment(hostingEnvironment As IHostingEnvironment, environmentName As String) As Boolean
    parameters:
    - id: hostingEnvironment
      type: Microsoft.AspNetCore.Hosting.IHostingEnvironment
      description: An instance of <xref href="Microsoft.AspNetCore.Hosting.IHostingEnvironment" data-throw-if-not-resolved="false"></xref>.
    - id: environmentName
      type: System.String
      description: Environment name to validate against.
    return:
      type: System.Boolean
      description: True if the specified name is the same as the current environment, otherwise false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.AspNetCore.Hosting.IHostingEnvironment
  commentId: T:Microsoft.AspNetCore.Hosting.IHostingEnvironment
  parent: Microsoft.AspNetCore.Hosting
  isExternal: false
  name: IHostingEnvironment
  nameWithType: IHostingEnvironment
  fullName: Microsoft.AspNetCore.Hosting.IHostingEnvironment
- uid: Microsoft.AspNetCore.Hosting
  commentId: N:Microsoft.AspNetCore.Hosting
  isExternal: false
  name: Microsoft.AspNetCore.Hosting
  nameWithType: Microsoft.AspNetCore.Hosting
  fullName: Microsoft.AspNetCore.Hosting
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
