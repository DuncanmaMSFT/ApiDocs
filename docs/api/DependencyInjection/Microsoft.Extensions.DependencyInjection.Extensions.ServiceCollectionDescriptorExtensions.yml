### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  id: ServiceCollectionDescriptorExtensions
  parent: Microsoft.Extensions.DependencyInjection.Extensions
  children:
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  langs:
  - csharp
  - vb
  name: ServiceCollectionDescriptorExtensions
  nameWithType: ServiceCollectionDescriptorExtensions
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceCollectionDescriptorExtensions
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static class ServiceCollectionDescriptorExtensions
    content.vb: Public Module ServiceCollectionDescriptorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  id: Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: Add(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.Add(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Add
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds the specified <em>descriptor</em> to the <em>collection</em>.\n"
  example: []
  syntax:
    content: public static IServiceCollection Add(this IServiceCollection collection, ServiceDescriptor descriptor)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(collection As IServiceCollection, descriptor As ServiceDescriptor) As IServiceCollection
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptor
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to the current instance of <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  id: Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: Add(IServiceCollection, IEnumerable<ServiceDescriptor>)
  nameWithType: ServiceCollectionDescriptorExtensions.Add(IServiceCollection, IEnumerable<ServiceDescriptor>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Add
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 42
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds a sequence of <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the <em>collection</em>.\n"
  example: []
  syntax:
    content: public static IServiceCollection Add(this IServiceCollection collection, IEnumerable<ServiceDescriptor> descriptors)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Add(collection As IServiceCollection, descriptors As IEnumerable(Of ServiceDescriptor)) As IServiceCollection
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptors
      type: System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor}
      description: The <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> of <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>s to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to the current instance of <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: ServiceCollectionDescriptorExtensions.Add(IServiceCollection, IEnumerable(Of ServiceDescriptor))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.DependencyInjection.ServiceDescriptor))
  name.vb: Add(IServiceCollection, IEnumerable(Of ServiceDescriptor))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  id: TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAdd(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAdd(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAdd
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 70
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds the specified <em>descriptor</em> to the <em>collection</em> if the\nservice type hasn't been already registered.\n"
  example: []
  syntax:
    content: public static void TryAdd(this IServiceCollection collection, ServiceDescriptor descriptor)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAdd(collection As IServiceCollection, descriptor As ServiceDescriptor)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptor
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  id: TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAdd(IServiceCollection, IEnumerable<ServiceDescriptor>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAdd(IServiceCollection, IEnumerable<ServiceDescriptor>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAdd
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 96
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds the specified <em>descriptors</em> to the <em>collection</em> if the\nservice type hasn't been already registered.\n"
  example: []
  syntax:
    content: public static void TryAdd(this IServiceCollection collection, IEnumerable<ServiceDescriptor> descriptors)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAdd(collection As IServiceCollection, descriptors As IEnumerable(Of ServiceDescriptor))
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptors
      type: System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor}
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>s.
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAdd(IServiceCollection, IEnumerable(Of ServiceDescriptor))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.DependencyInjection.ServiceDescriptor))
  name.vb: TryAdd(IServiceCollection, IEnumerable(Of ServiceDescriptor))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient(IServiceCollection, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 116
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddTransient(this IServiceCollection collection, Type service)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(collection As IServiceCollection, service As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 134
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddTransient(this IServiceCollection collection, Type service, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(collection As IServiceCollection, service As Type, implementationType As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationType
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 158
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddTransient(this IServiceCollection collection, Type service, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(collection As IServiceCollection, service As Type, implementationFactory As Func(Of IServiceProvider, Object))
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddTransient(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: TryAddTransient(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient<TService>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 182
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddTransient<TService>(this IServiceCollection collection)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(Of TService As Class)(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddTransient(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 193
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddTransient<TService, TImplementation>(this IServiceCollection collection)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(Of TService As Class, TImplementation As {Class, TService})(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
    - id: TImplementation
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddTransient(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: TryAddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddTransient<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddTransient<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 205
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddTransient<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddTransient(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService))
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: TryAddTransient(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped(IServiceCollection, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 213
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddScoped(this IServiceCollection collection, Type service)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(collection As IServiceCollection, service As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 231
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddScoped(this IServiceCollection collection, Type service, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(collection As IServiceCollection, service As Type, implementationType As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationType
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 255
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddScoped(this IServiceCollection collection, Type service, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(collection As IServiceCollection, service As Type, implementationFactory As Func(Of IServiceProvider, Object))
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddScoped(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: TryAddScoped(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped<TService>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 279
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddScoped<TService>(this IServiceCollection collection)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(Of TService As Class)(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddScoped(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 290
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddScoped<TService, TImplementation>(this IServiceCollection collection)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(Of TService As Class, TImplementation As {Class, TService})(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
    - id: TImplementation
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddScoped(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: TryAddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddScoped<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddScoped<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 302
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddScoped<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddScoped(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService))
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: TryAddScoped(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton(IServiceCollection, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 310
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddSingleton(this IServiceCollection collection, Type service)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(collection As IServiceCollection, service As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 328
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddSingleton(this IServiceCollection collection, Type service, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(collection As IServiceCollection, service As Type, implementationType As Type)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationType
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 352
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: public static void TryAddSingleton(this IServiceCollection collection, Type service, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(collection As IServiceCollection, service As Type, implementationFactory As Func(Of IServiceProvider, Object))
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: service
      type: System.Type
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddSingleton(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: TryAddSingleton(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton<TService>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 376
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddSingleton<TService>(this IServiceCollection collection)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(Of TService As Class)(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddSingleton(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: TryAddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 387
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddSingleton<TService, TImplementation>(this IServiceCollection collection)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(Of TService As Class, TImplementation As {Class, TService})(collection As IServiceCollection)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    typeParameters:
    - id: TService
    - id: TImplementation
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: TryAddSingleton(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  id: TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton<TService>(IServiceCollection, TService)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(IServiceCollection, TService)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, TService)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 399
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddSingleton<TService>(this IServiceCollection collection, TService instance)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(Of TService As Class)(collection As IServiceCollection, instance As TService)
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: instance
      type: '{TService}'
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(IServiceCollection, TService)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, TService)
  name.vb: TryAddSingleton(Of TService)(IServiceCollection, TService)
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: TryAddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddSingleton<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 416
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  syntax:
    content: 'public static void TryAddSingleton<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddSingleton(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService))
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
    typeParameters:
    - id: TService
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: TryAddSingleton(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  id: TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddEnumerable(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddEnumerable(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddEnumerable
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 441
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds a <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> if an existing descriptor with the same\n<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType\" data-throw-if-not-resolved=\"false\"></xref> and an implementation that does not already exist\nin <em>services..</em>.\n"
  remarks: "\nUse <xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> when registing a service implementation of a\nservice type that\nsupports multiple registrations of the same service type. Using\n<xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> is not idempotent and can add\nduplicate\n<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> instances if called twice. Using\n<xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> will prevent registration\nof multiple implementation types.\n"
  example: []
  syntax:
    content: public static void TryAddEnumerable(this IServiceCollection services, ServiceDescriptor descriptor)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddEnumerable(services As IServiceCollection, descriptor As ServiceDescriptor)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptor
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  id: TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: TryAddEnumerable(IServiceCollection, IEnumerable<ServiceDescriptor>)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddEnumerable(IServiceCollection, IEnumerable<ServiceDescriptor>)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: TryAddEnumerable
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 492
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nAdds the specified <xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref>s if an existing descriptor with the same\n<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType\" data-throw-if-not-resolved=\"false\"></xref> and an implementation that does not already exist\nin <em>services..</em>.\n"
  remarks: "\nUse <xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> when registing a service\nimplementation of a service type that\nsupports multiple registrations of the same service type. Using\n<xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> is not idempotent and can add\nduplicate\n<xref href=\"Microsoft.Extensions.DependencyInjection.ServiceDescriptor\" data-throw-if-not-resolved=\"false\"></xref> instances if called twice. Using\n<xref href=\"Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection%2cMicrosoft.Extensions.DependencyInjection.ServiceDescriptor)\" data-throw-if-not-resolved=\"false\"></xref> will prevent registration\nof multiple implementation types.\n"
  example: []
  syntax:
    content: public static void TryAddEnumerable(this IServiceCollection services, IEnumerable<ServiceDescriptor> descriptors)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub TryAddEnumerable(services As IServiceCollection, descriptors As IEnumerable(Of ServiceDescriptor))
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptors
      type: System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor}
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref>s.
  nameWithType.vb: ServiceCollectionDescriptorExtensions.TryAddEnumerable(IServiceCollection, IEnumerable(Of ServiceDescriptor))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.DependencyInjection.ServiceDescriptor))
  name.vb: TryAddEnumerable(IServiceCollection, IEnumerable(Of ServiceDescriptor))
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  id: Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions
  langs:
  - csharp
  - vb
  name: Replace(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.Replace(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Replace(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Replace
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/Extensions/ServiceCollectionDescriptorExtensions.cs
    startLine: 519
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection.Extensions
  summary: "\nRemoves the first service in <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref> with the same service type\nas <em>descriptor</em> and adds <paramef name=\"descriptor\"></paramef> to the collection.\n"
  example: []
  syntax:
    content: public static IServiceCollection Replace(this IServiceCollection collection, ServiceDescriptor descriptor)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Replace(collection As IServiceCollection, descriptor As ServiceDescriptor) As IServiceCollection
    parameters:
    - id: collection
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref>.
    - id: descriptor
      type: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
      description: The <xref href="Microsoft.Extensions.DependencyInjection.ServiceDescriptor" data-throw-if-not-resolved="false"></xref> to replace with.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Extensions.DependencyInjection.Extensions
  commentId: N:Microsoft.Extensions.DependencyInjection.Extensions
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection.Extensions
  nameWithType: Microsoft.Extensions.DependencyInjection.Extensions
  fullName: Microsoft.Extensions.DependencyInjection.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: ServiceDescriptor
  nameWithType: ServiceDescriptor
  fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Extensions.DependencyInjection.ServiceDescriptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ServiceDescriptor>
  nameWithType: IEnumerable<ServiceDescriptor>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>
  nameWithType.vb: IEnumerable(Of ServiceDescriptor)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  name.vb: IEnumerable(Of ServiceDescriptor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func{System.IServiceProvider,System.Object}
  commentId: T:System.Func{System.IServiceProvider,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, Object>
  nameWithType: Func<IServiceProvider, Object>
  fullName: System.Func<System.IServiceProvider, System.Object>
  nameWithType.vb: Func(Of IServiceProvider, Object)
  fullname.vb: System.Func(Of System.IServiceProvider, System.Object)
  name.vb: Func(Of IServiceProvider, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.IServiceProvider,{TService}}
  commentId: T:System.Func{System.IServiceProvider,``0}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, TService>
  nameWithType: Func<IServiceProvider, TService>
  fullName: System.Func<System.IServiceProvider, TService>
  nameWithType.vb: Func(Of IServiceProvider, TService)
  fullname.vb: System.Func(Of System.IServiceProvider, TService)
  name.vb: Func(Of IServiceProvider, TService)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  isExternal: false
  name: TService
  nameWithType: TService
  fullName: TService
- uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
  commentId: P:Microsoft.Extensions.DependencyInjection.ServiceDescriptor.ServiceType
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExternal: false
  name: TryAddEnumerable(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.TryAddEnumerable(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  spec.csharp:
  - uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
    name: TryAddEnumerable
    nameWithType: ServiceCollectionDescriptorExtensions.TryAddEnumerable
    fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
    name: TryAddEnumerable
    nameWithType: ServiceCollectionDescriptorExtensions.TryAddEnumerable
    fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddEnumerable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  commentId: M:Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  isExternal: false
  name: Add(IServiceCollection, ServiceDescriptor)
  nameWithType: ServiceCollectionDescriptorExtensions.Add(IServiceCollection, ServiceDescriptor)
  fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
  spec.csharp:
  - uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
    name: Add
    nameWithType: ServiceCollectionDescriptorExtensions.Add
    fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)
    name: Add
    nameWithType: ServiceCollectionDescriptorExtensions.Add
    fullName: Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
    name: ServiceDescriptor
    nameWithType: ServiceDescriptor
    fullName: Microsoft.Extensions.DependencyInjection.ServiceDescriptor
  - name: )
    nameWithType: )
    fullName: )
