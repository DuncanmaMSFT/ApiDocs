### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  id: ServiceCollectionServiceExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  langs:
  - csharp
  - vb
  name: ServiceCollectionServiceExtensions
  nameWithType: ServiceCollectionServiceExtensions
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceCollectionServiceExtensions
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nExtension methods for adding services to an <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class ServiceCollectionServiceExtensions
    content.vb: Public Module ServiceCollectionServiceExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 22
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>serviceType</em> with an\nimplementation of the type specified in <em>implementationType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddTransient(this IServiceCollection services, Type serviceType, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(services As IServiceCollection, serviceType As Type, implementationType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationType
      type: System.Type
      description: The implementation type of the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 55
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>serviceType</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddTransient(this IServiceCollection services, Type serviceType, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(services As IServiceCollection, serviceType As Type, implementationFactory As Func(Of IServiceProvider, Object)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
      description: The factory that creates the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  nameWithType.vb: ServiceCollectionServiceExtensions.AddTransient(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: AddTransient(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 88
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddTransient<TService, TImplementation>(this IServiceCollection services)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  nameWithType.vb: ServiceCollectionServiceExtensions.AddTransient(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddTransient(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient(IServiceCollection, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 108
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>serviceType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddTransient(this IServiceCollection services, Type serviceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(services As IServiceCollection, serviceType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register and the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient<TService>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 133
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>TService</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddTransient<TService>(this IServiceCollection services)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(Of TService As Class)(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  nameWithType.vb: ServiceCollectionServiceExtensions.AddTransient(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddTransient(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: AddTransient``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 154
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>TService</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddTransient<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  nameWithType.vb: ServiceCollectionServiceExtensions.AddTransient(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: AddTransient(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  id: AddTransient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddTransient<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceCollectionServiceExtensions.AddTransient<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddTransient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 184
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a transient service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> using the\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddTransient<TService, TImplementation>(this IServiceCollection services, Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddTransient(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TImplementation)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TImplementation}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  nameWithType.vb: ServiceCollectionServiceExtensions.AddTransient(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TImplementation))
  name.vb: AddTransient(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 215
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>serviceType</em> with an\nimplementation of the type specified in <em>implementationType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddScoped(this IServiceCollection services, Type serviceType, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(services As IServiceCollection, serviceType As Type, implementationType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationType
      type: System.Type
      description: The implementation type of the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 248
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>serviceType</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddScoped(this IServiceCollection services, Type serviceType, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(services As IServiceCollection, serviceType As Type, implementationFactory As Func(Of IServiceProvider, Object)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
      description: The factory that creates the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  nameWithType.vb: ServiceCollectionServiceExtensions.AddScoped(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: AddScoped(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 281
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddScoped<TService, TImplementation>(this IServiceCollection services)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  nameWithType.vb: ServiceCollectionServiceExtensions.AddScoped(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddScoped(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped(IServiceCollection, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 301
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>serviceType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddScoped(this IServiceCollection services, Type serviceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(services As IServiceCollection, serviceType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register and the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped<TService>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 326
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>TService</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddScoped<TService>(this IServiceCollection services)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(Of TService As Class)(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  nameWithType.vb: ServiceCollectionServiceExtensions.AddScoped(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddScoped(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: AddScoped``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 347
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>TService</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddScoped<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  nameWithType.vb: ServiceCollectionServiceExtensions.AddScoped(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: AddScoped(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  id: AddScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddScoped<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceCollectionServiceExtensions.AddScoped<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddScoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 377
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a scoped service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> using the\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddScoped<TService, TImplementation>(this IServiceCollection services, Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddScoped(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TImplementation)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TImplementation}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  nameWithType.vb: ServiceCollectionServiceExtensions.AddScoped(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TImplementation))
  name.vb: AddScoped(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  id: AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton(IServiceCollection, Type, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton(IServiceCollection, Type, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 407
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>serviceType</em> with an\nimplementation of the type specified in <em>implementationType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType, Type implementationType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(services As IServiceCollection, serviceType As Type, implementationType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationType
      type: System.Type
      description: The implementation type of the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  id: AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.IServiceProvider,System.Object})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton(IServiceCollection, Type, Func<IServiceProvider, Object>)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton(IServiceCollection, Type, Func<IServiceProvider, Object>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func<System.IServiceProvider, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 440
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>serviceType</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType, Func<IServiceProvider, object> implementationFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(services As IServiceCollection, serviceType As Type, implementationFactory As Func(Of IServiceProvider, Object)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,System.Object}
      description: The factory that creates the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(IServiceCollection, Type, Func(Of IServiceProvider, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Func(Of System.IServiceProvider, System.Object))
  name.vb: AddSingleton(IServiceCollection, Type, Func(Of IServiceProvider, Object))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton<TService, TImplementation>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton<TService, TImplementation>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 473
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddSingleton<TService, TImplementation>(this IServiceCollection services)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(Of TService, TImplementation)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddSingleton(Of TService, TImplementation)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  id: AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton(IServiceCollection, Type)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton(IServiceCollection, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 493
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>serviceType</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(services As IServiceCollection, serviceType As Type) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register and the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton<TService>(IServiceCollection)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton<TService>(IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 518
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>TService</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddSingleton<TService>(this IServiceCollection services)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(Of TService As Class)(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(Of TService)(IServiceCollection)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: AddSingleton(Of TService)(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  id: AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton<TService>(IServiceCollection, Func<IServiceProvider, TService>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TService>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 539
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>TService</em> with a\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddSingleton<TService>(this IServiceCollection services, Func<IServiceProvider, TService> implementationFactory)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(Of TService As Class)(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TService)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TService}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TService))
  name.vb: AddSingleton(Of TService)(IServiceCollection, Func(Of IServiceProvider, TService))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  id: AddSingleton``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton<TService, TImplementation>(IServiceCollection, Func<IServiceProvider, TImplementation>)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<TService, TImplementation>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func<System.IServiceProvider, TImplementation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 569
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>TService</em> with an\nimplementation type specified in <em>TImplementation</em> using the\nfactory specified in <em>implementationFactory</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddSingleton<TService, TImplementation>(this IServiceCollection services, Func<IServiceProvider, TImplementation> implementationFactory)where TService : class where TImplementation : class, TService'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(Of TService As Class, TImplementation As {Class, TService})(services As IServiceCollection, implementationFactory As Func(Of IServiceProvider, TImplementation)) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationFactory
      type: System.Func{System.IServiceProvider,{TImplementation}}
      description: The factory that creates the service.
    typeParameters:
    - id: TService
      description: The type of the service to add.
    - id: TImplementation
      description: The type of the implementation to use.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Of TService, TImplementation)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Func(Of System.IServiceProvider, TImplementation))
  name.vb: AddSingleton(Of TService, TImplementation)(IServiceCollection, Func(Of IServiceProvider, TImplementation))
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)
  id: AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Object)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton(IServiceCollection, Type, Object)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton(IServiceCollection, Type, Object)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 598
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>serviceType</em> with an\ninstance specified in <em>implementationInstance</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IServiceCollection AddSingleton(this IServiceCollection services, Type serviceType, object implementationInstance)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(services As IServiceCollection, serviceType As Type, implementationInstance As Object) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: serviceType
      type: System.Type
      description: The type of the service to register.
    - id: implementationInstance
      type: System.Object
      description: The instance of the service.
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  id: AddSingleton``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions
  langs:
  - csharp
  - vb
  name: AddSingleton<TService>(IServiceCollection, TService)
  nameWithType: ServiceCollectionServiceExtensions.AddSingleton<TService>(IServiceCollection, TService)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<TService>(Microsoft.Extensions.DependencyInjection.IServiceCollection, TService)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: AddSingleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceCollectionServiceExtensions.cs
    startLine: 632
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nAdds a singleton service of the type specified in <em>TService</em> with an\ninstance specified in <em>implementationInstance</em> to the\nspecified <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddSingleton<TService>(this IServiceCollection services, TService implementationInstance)where TService : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSingleton(Of TService As Class)(services As IServiceCollection, implementationInstance As TService) As IServiceCollection
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: The <xref href="Microsoft.Extensions.DependencyInjection.IServiceCollection" data-throw-if-not-resolved="false"></xref> to add the service to.
    - id: implementationInstance
      type: '{TService}'
      description: The instance of the service.
    typeParameters:
    - id: TService
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: A reference to this instance after the operation has completed.
  seealso:
  - linkId: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
    commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  nameWithType.vb: ServiceCollectionServiceExtensions.AddSingleton(Of TService)(IServiceCollection, TService)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(Of TService)(Microsoft.Extensions.DependencyInjection.IServiceCollection, TService)
  name.vb: AddSingleton(Of TService)(IServiceCollection, TService)
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func{System.IServiceProvider,System.Object}
  commentId: T:System.Func{System.IServiceProvider,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, Object>
  nameWithType: Func<IServiceProvider, Object>
  fullName: System.Func<System.IServiceProvider, System.Object>
  nameWithType.vb: Func(Of IServiceProvider, Object)
  fullname.vb: System.Func(Of System.IServiceProvider, System.Object)
  name.vb: Func(Of IServiceProvider, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.IServiceProvider,{TService}}
  commentId: T:System.Func{System.IServiceProvider,``0}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, TService>
  nameWithType: Func<IServiceProvider, TService>
  fullName: System.Func<System.IServiceProvider, TService>
  nameWithType.vb: Func(Of IServiceProvider, TService)
  fullname.vb: System.Func(Of System.IServiceProvider, TService)
  name.vb: Func(Of IServiceProvider, TService)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TService
    nameWithType: TService
    fullName: TService
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.IServiceProvider,{TImplementation}}
  commentId: T:System.Func{System.IServiceProvider,``1}
  parent: System
  definition: System.Func`2
  name: Func<IServiceProvider, TImplementation>
  nameWithType: Func<IServiceProvider, TImplementation>
  fullName: System.Func<System.IServiceProvider, TImplementation>
  nameWithType.vb: Func(Of IServiceProvider, TImplementation)
  fullname.vb: System.Func(Of System.IServiceProvider, TImplementation)
  name.vb: Func(Of IServiceProvider, TImplementation)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TImplementation
    nameWithType: TImplementation
    fullName: TImplementation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
- uid: '{TService}'
  commentId: '!:TService'
  definition: TService
  name: TService
  nameWithType: TService
  fullName: TService
- uid: TService
  isExternal: false
  name: TService
  nameWithType: TService
  fullName: TService
