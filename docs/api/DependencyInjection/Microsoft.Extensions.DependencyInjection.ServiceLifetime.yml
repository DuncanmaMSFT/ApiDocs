### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceLifetime
  id: ServiceLifetime
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  - Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  - Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  langs:
  - csharp
  - vb
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  type: Enum
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceLifetime
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nSpecifies the lifetime of a service in an <xref href=\"Microsoft.Extensions.DependencyInjection.IServiceCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public enum ServiceLifetime
    content.vb: Public Enum ServiceLifetime
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  id: Singleton
  parent: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  langs:
  - csharp
  - vb
  name: Singleton
  nameWithType: ServiceLifetime.Singleton
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Singleton
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nSpecifies that a single instance of the service will be created.\n"
  example: []
  syntax:
    content: Singleton = 0
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  id: Scoped
  parent: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  langs:
  - csharp
  - vb
  name: Scoped
  nameWithType: ServiceLifetime.Scoped
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Scoped
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nSpecifies that a new instance of the service will be created for each scope.\n"
  remarks: "\nIn ASP.NET Core applications a scope is created around each server request.\n"
  example: []
  syntax:
    content: Scoped = 1
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  commentId: F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  id: Transient
  parent: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  langs:
  - csharp
  - vb
  name: Transient
  nameWithType: ServiceLifetime.Transient
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: Transient
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceLifetime.cs
    startLine: 24
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nSpecifies that a new instance of the service will be created every time it is requested.\n"
  example: []
  syntax:
    content: Transient = 2
    return:
      type: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.DependencyInjection.ServiceLifetime
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceLifetime
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: ServiceLifetime
  nameWithType: ServiceLifetime
  fullName: Microsoft.Extensions.DependencyInjection.ServiceLifetime
