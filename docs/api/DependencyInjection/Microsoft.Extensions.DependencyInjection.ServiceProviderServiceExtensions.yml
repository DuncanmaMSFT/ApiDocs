### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  commentId: T:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  id: ServiceProviderServiceExtensions
  parent: Microsoft.Extensions.DependencyInjection
  children:
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider,System.Type)
  - Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)
  langs:
  - csharp
  - vb
  name: ServiceProviderServiceExtensions
  nameWithType: ServiceProviderServiceExtensions
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: ServiceProviderServiceExtensions
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nExtension methods for getting services from an <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class ServiceProviderServiceExtensions
    content.vb: Public Module ServiceProviderServiceExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService``1(System.IServiceProvider)
  id: GetService``1(System.IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetService<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetService<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService<T>(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetService
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 20
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <em>T</em> from the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static T GetService<T>(this IServiceProvider provider)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetService(Of T)(provider As IServiceProvider) As T
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> to retrieve the service object from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: '{T}'
      description: A service object of type <em>T</em> or null if there is no such service.
  nameWithType.vb: ServiceProviderServiceExtensions.GetService(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService(Of T)(System.IServiceProvider)
  name.vb: GetService(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider,System.Type)
  id: GetRequiredService(System.IServiceProvider,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetRequiredService(IServiceProvider, Type)
  nameWithType: ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(System.IServiceProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetRequiredService
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <em>serviceType</em> from the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static object GetRequiredService(this IServiceProvider provider, Type serviceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRequiredService(provider As IServiceProvider, serviceType As Type) As Object
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> to retrieve the service object from.
    - id: serviceType
      type: System.Type
      description: An object that specifies the type of service object to get.
    return:
      type: System.Object
      description: A service object of type <em>serviceType</em>.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: There is no service of type <em>serviceType</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService``1(System.IServiceProvider)
  id: GetRequiredService``1(System.IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetRequiredService<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetRequiredService<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<T>(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetRequiredService
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 71
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet service of type <em>T</em> from the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static T GetRequiredService<T>(this IServiceProvider provider)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRequiredService(Of T)(provider As IServiceProvider) As T
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> to retrieve the service object from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: '{T}'
      description: A service object of type <em>T</em>.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: There is no service of type <em>T</em>.
  nameWithType.vb: ServiceProviderServiceExtensions.GetRequiredService(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(Of T)(System.IServiceProvider)
  name.vb: GetRequiredService(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices``1(System.IServiceProvider)
  id: GetServices``1(System.IServiceProvider)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetServices<T>(IServiceProvider)
  nameWithType: ServiceProviderServiceExtensions.GetServices<T>(IServiceProvider)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices<T>(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServices
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 87
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet an enumeration of services of type <em>T</em> from the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IEnumerable<T> GetServices<T>(this IServiceProvider provider)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetServices(Of T)(provider As IServiceProvider) As IEnumerable(Of T)
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> to retrieve the services from.
    typeParameters:
    - id: T
      description: The type of service object to get.
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: An enumeration of services of type <em>T</em>.
  nameWithType.vb: ServiceProviderServiceExtensions.GetServices(Of T)(IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(Of T)(System.IServiceProvider)
  name.vb: GetServices(Of T)(IServiceProvider)
- uid: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider,System.Type)
  commentId: M:Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider,System.Type)
  id: GetServices(System.IServiceProvider,System.Type)
  isExtensionMethod: true
  parent: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions
  langs:
  - csharp
  - vb
  name: GetServices(IServiceProvider, Type)
  nameWithType: ServiceProviderServiceExtensions.GetServices(IServiceProvider, Type)
  fullName: Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetServices(System.IServiceProvider, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
      branch: master
      repo: https://github.com/aspnet/DependencyInjection.git
    id: GetServices
    path: src/Microsoft.Extensions.DependencyInjection.Abstractions/ServiceProviderServiceExtensions.cs
    startLine: 103
  assemblies:
  - Microsoft.Extensions.DependencyInjection.Abstractions
  namespace: Microsoft.Extensions.DependencyInjection
  summary: "\nGet an enumeration of services of type <em>serviceType</em> from the <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static IEnumerable<object> GetServices(this IServiceProvider provider, Type serviceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetServices(provider As IServiceProvider, serviceType As Type) As IEnumerable(Of Object)
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> to retrieve the services from.
    - id: serviceType
      type: System.Type
      description: An object that specifies the type of service object to get.
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: An enumeration of services of type <em>serviceType</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
