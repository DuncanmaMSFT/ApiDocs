### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  id: ProxyBase`1
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.#ctor(`0)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.Instance
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstance
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstanceAsObject
  langs:
  - csharp
  - vb
  name: ProxyBase<T>
  nameWithType: ProxyBase<T>
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyBase
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
    startLine: 7
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: 'public class ProxyBase<T> : ProxyBase, IProxy where T : class'
    content.vb: >-
      Public Class ProxyBase(Of T As Class)
          Inherits ProxyBase
          Implements IProxy
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  implements:
  - Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  inheritedMembers:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ProxyBase(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase(Of T)
  name.vb: ProxyBase(Of T)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.Instance
  commentId: F:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.Instance
  id: Instance
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ProxyBase<T>.Instance
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase<T>.Instance
  type: Field
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Instance
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public readonly T Instance
    content.vb: Public ReadOnly Instance As T
    return:
      type: '{T}'
  nameWithType.vb: ProxyBase(Of T).Instance
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase(Of T).Instance
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.#ctor(`0)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  langs:
  - csharp
  - vb
  name: ProxyBase(T)
  nameWithType: ProxyBase<T>.ProxyBase(T)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase<T>.ProxyBase(T)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: .ctor
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
    startLine: 12
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public ProxyBase(T instance)
    content.vb: Public Sub New(instance As T)
    parameters:
    - id: instance
      type: '{T}'
  nameWithType.vb: ProxyBase(Of T).ProxyBase(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase(Of T).ProxyBase(T)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstance
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstance
  id: UnderlyingInstance
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  langs:
  - csharp
  - vb
  name: UnderlyingInstance
  nameWithType: ProxyBase<T>.UnderlyingInstance
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase<T>.UnderlyingInstance
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: UnderlyingInstance
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
    startLine: 23
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public T UnderlyingInstance { get; }
    content.vb: Public ReadOnly Property UnderlyingInstance As T
    parameters: []
    return:
      type: '{T}'
  nameWithType.vb: ProxyBase(Of T).UnderlyingInstance
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase(Of T).UnderlyingInstance
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstanceAsObject
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1.UnderlyingInstanceAsObject
  id: UnderlyingInstanceAsObject
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase`1
  langs:
  - csharp
  - vb
  name: UnderlyingInstanceAsObject
  nameWithType: ProxyBase<T>.UnderlyingInstanceAsObject
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase<T>.UnderlyingInstanceAsObject
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: UnderlyingInstanceAsObject
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyBaseOfT.cs
    startLine: 31
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public override object UnderlyingInstanceAsObject { get; }
    content.vb: Public Overrides ReadOnly Property UnderlyingInstanceAsObject As Object
    parameters: []
    return:
      type: System.Object
  overridden: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  nameWithType.vb: ProxyBase(Of T).UnderlyingInstanceAsObject
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase(Of T).UnderlyingInstanceAsObject
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
- uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
  parent: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  isExternal: false
  name: IProxy
  nameWithType: IProxy
  fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure.IProxy
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  commentId: F:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  isExternal: false
  name: WrappedType
  nameWithType: ProxyBase.WrappedType
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.WrappedType
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  isExternal: false
  name: Upwrap<T>()
  nameWithType: ProxyBase.Upwrap<T>()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap<T>()
  nameWithType.vb: ProxyBase.Upwrap(Of T)()
  fullname.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap(Of T)()
  name.vb: Upwrap(Of T)()
  spec.csharp:
  - uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
    name: Upwrap<T>
    nameWithType: ProxyBase.Upwrap<T>
    fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap``1
    name: Upwrap(Of T)
    nameWithType: ProxyBase.Upwrap(Of T)
    fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.Upwrap(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
  fullName: Microsoft.Extensions.DiagnosticAdapter.Infrastructure
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase
  isExternal: false
  name: UnderlyingInstanceAsObject
  nameWithType: ProxyBase.UnderlyingInstanceAsObject
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyBase.UnderlyingInstanceAsObject
