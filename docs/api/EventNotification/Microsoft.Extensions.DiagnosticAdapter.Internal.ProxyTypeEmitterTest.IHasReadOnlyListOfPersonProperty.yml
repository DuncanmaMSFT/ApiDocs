### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  id: ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty.ListProperty
  langs:
  - csharp
  - vb
  name: ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  nameWithType: ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  type: Interface
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: IHasReadOnlyListOfPersonProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 635
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public interface IHasReadOnlyListOfPersonProperty
    content.vb: Public Interface IHasReadOnlyListOfPersonProperty
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty.ListProperty
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty.ListProperty
  id: ListProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty
  langs:
  - csharp
  - vb
  name: ListProperty
  nameWithType: ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty.ListProperty
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IHasReadOnlyListOfPersonProperty.ListProperty
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ListProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 637
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: IReadOnlyList<ProxyTypeEmitterTest.IPerson> ListProperty { get; }
    content.vb: ReadOnly Property ListProperty As IReadOnlyList(Of ProxyTypeEmitterTest.IPerson)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson}
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ProxyTypeEmitterTest.IPerson>
  nameWithType: IReadOnlyList<ProxyTypeEmitterTest.IPerson>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson>
  nameWithType.vb: IReadOnlyList(Of ProxyTypeEmitterTest.IPerson)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson)
  name.vb: IReadOnlyList(Of ProxyTypeEmitterTest.IPerson)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson
    name: ProxyTypeEmitterTest.IPerson
    nameWithType: ProxyTypeEmitterTest.IPerson
    fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson
    name: ProxyTypeEmitterTest.IPerson
    nameWithType: ProxyTypeEmitterTest.IPerson
    fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.IPerson
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
