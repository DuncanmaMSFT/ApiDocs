### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter
  id: IDiagnosticSourceMethodAdapter
  parent: Microsoft.Extensions.DiagnosticAdapter
  children:
  - Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter.Adapt(System.Reflection.MethodInfo,System.Type)
  langs:
  - csharp
  - vb
  name: IDiagnosticSourceMethodAdapter
  nameWithType: IDiagnosticSourceMethodAdapter
  fullName: Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter
  type: Interface
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/IDiagnosticSourceMethodAdapter.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: IDiagnosticSourceMethodAdapter
    path: src/Microsoft.Extensions.DiagnosticAdapter/IDiagnosticSourceMethodAdapter.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter
  syntax:
    content: public interface IDiagnosticSourceMethodAdapter
    content.vb: Public Interface IDiagnosticSourceMethodAdapter
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter.Adapt(System.Reflection.MethodInfo,System.Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter.Adapt(System.Reflection.MethodInfo,System.Type)
  id: Adapt(System.Reflection.MethodInfo,System.Type)
  parent: Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter
  langs:
  - csharp
  - vb
  name: Adapt(MethodInfo, Type)
  nameWithType: IDiagnosticSourceMethodAdapter.Adapt(MethodInfo, Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter.Adapt(System.Reflection.MethodInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/IDiagnosticSourceMethodAdapter.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt
    path: src/Microsoft.Extensions.DiagnosticAdapter/IDiagnosticSourceMethodAdapter.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter
  syntax:
    content: Func<object, object, bool> Adapt(MethodInfo method, Type inputType)
    content.vb: Function Adapt(method As MethodInfo, inputType As Type) As Func(Of Object, Object, Boolean)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: inputType
      type: System.Type
    return:
      type: System.Func{System.Object,System.Object,System.Boolean}
references:
- uid: Microsoft.Extensions.DiagnosticAdapter
  commentId: N:Microsoft.Extensions.DiagnosticAdapter
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter
  nameWithType: Microsoft.Extensions.DiagnosticAdapter
  fullName: Microsoft.Extensions.DiagnosticAdapter
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Func{System.Object,System.Object,System.Boolean}
  commentId: T:System.Func{System.Object,System.Object,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<Object, Object, Boolean>
  nameWithType: Func<Object, Object, Boolean>
  fullName: System.Func<System.Object, System.Object, System.Boolean>
  nameWithType.vb: Func(Of Object, Object, Boolean)
  fullname.vb: System.Func(Of System.Object, System.Object, System.Boolean)
  name.vb: Func(Of Object, Object, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
