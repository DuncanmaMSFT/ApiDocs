### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  id: ProxyTypeCacheResult
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(System.Tuple{System.Type,System.Type},System.String)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(System.Tuple{System.Type,System.Type},System.Type,System.Reflection.ConstructorInfo)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  langs:
  - csharp
  - vb
  name: ProxyTypeCacheResult
  nameWithType: ProxyTypeCacheResult
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  type: Class
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyTypeCacheResult
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 8
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public class ProxyTypeCacheResult
    content.vb: Public Class ProxyTypeCacheResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(System.Tuple{System.Type,System.Type},System.String)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(System.Tuple{System.Type,System.Type},System.String)
  id: FromError(System.Tuple{System.Type,System.Type},System.String)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: FromError(Tuple<Type, Type>, String)
  nameWithType: ProxyTypeCacheResult.FromError(Tuple<Type, Type>, String)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(System.Tuple<System.Type, System.Type>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: FromError
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 10
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static ProxyTypeCacheResult FromError(Tuple<Type, Type> key, string error)
    content.vb: Public Shared Function FromError(key As Tuple(Of Type, Type), error As String) As ProxyTypeCacheResult
    parameters:
    - id: key
      type: System.Tuple{System.Type,System.Type}
    - id: error
      type: System.String
    return:
      type: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  nameWithType.vb: ProxyTypeCacheResult.FromError(Tuple(Of Type, Type), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromError(System.Tuple(Of System.Type, System.Type), System.String)
  name.vb: FromError(Tuple(Of Type, Type), String)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(System.Tuple{System.Type,System.Type},System.Type,System.Reflection.ConstructorInfo)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(System.Tuple{System.Type,System.Type},System.Type,System.Reflection.ConstructorInfo)
  id: FromType(System.Tuple{System.Type,System.Type},System.Type,System.Reflection.ConstructorInfo)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: FromType(Tuple<Type, Type>, Type, ConstructorInfo)
  nameWithType: ProxyTypeCacheResult.FromType(Tuple<Type, Type>, Type, ConstructorInfo)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(System.Tuple<System.Type, System.Type>, System.Type, System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: FromType
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 19
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static ProxyTypeCacheResult FromType(Tuple<Type, Type> key, Type type, ConstructorInfo constructor)
    content.vb: Public Shared Function FromType(key As Tuple(Of Type, Type), type As Type, constructor As ConstructorInfo) As ProxyTypeCacheResult
    parameters:
    - id: key
      type: System.Tuple{System.Type,System.Type}
    - id: type
      type: System.Type
    - id: constructor
      type: System.Reflection.ConstructorInfo
    return:
      type: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  nameWithType.vb: ProxyTypeCacheResult.FromType(Tuple(Of Type, Type), Type, ConstructorInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.FromType(System.Tuple(Of System.Type, System.Type), System.Type, System.Reflection.ConstructorInfo)
  name.vb: FromType(Tuple(Of Type, Type), Type, ConstructorInfo)
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  id: Constructor
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Constructor
  nameWithType: ProxyTypeCacheResult.Constructor
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Constructor
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Constructor
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 32
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public ConstructorInfo Constructor { get; }
    content.vb: Public ReadOnly Property Constructor As ConstructorInfo
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  id: Error
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ProxyTypeCacheResult.Error
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Error
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Error
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 34
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public string Error { get; }
    content.vb: Public ReadOnly Property Error As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  id: IsError
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: IsError
  nameWithType: ProxyTypeCacheResult.IsError
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.IsError
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: IsError
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 36
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public bool IsError { get; }
    content.vb: Public ReadOnly Property IsError As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  id: Key
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ProxyTypeCacheResult.Key
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Key
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Key
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 38
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public Tuple<Type, Type> Key { get; }
    content.vb: Public ReadOnly Property Key As Tuple(Of Type, Type)
    parameters: []
    return:
      type: System.Tuple{System.Type,System.Type}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  id: Type
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ProxyTypeCacheResult.Type
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult.Type
  type: Property
  source:
    remote:
      path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Type
    path: src/Microsoft.Extensions.DiagnosticAdapter/Internal/ProxyTypeCacheResult.cs
    startLine: 40
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public Type Type { get; }
    content.vb: Public ReadOnly Property Type As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Tuple{System.Type,System.Type}
  commentId: T:System.Tuple{System.Type,System.Type}
  parent: System
  definition: System.Tuple`2
  name: Tuple<Type, Type>
  nameWithType: Tuple<Type, Type>
  fullName: System.Tuple<System.Type, System.Type>
  nameWithType.vb: Tuple(Of Type, Type)
  fullname.vb: System.Tuple(Of System.Type, System.Type)
  name.vb: Tuple(Of Type, Type)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: ProxyTypeCacheResult
  nameWithType: ProxyTypeCacheResult
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeCacheResult
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
