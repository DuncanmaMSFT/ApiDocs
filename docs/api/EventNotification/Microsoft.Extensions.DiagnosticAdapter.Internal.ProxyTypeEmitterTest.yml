### YamlMime:ManagedReference
items:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  commentId: T:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  id: ProxyTypeEmitterTest
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal
  children:
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_InvalidProxy_IndexerProperty
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListListProperty_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListProperty_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Null
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_NestedList
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_NullProperty
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithTypeCycle
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable(System.Type,System.Type)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable_Data
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Fails_DestinationIsNotInterface
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity(System.Type)
  - Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity_Data
  langs:
  - csharp
  - vb
  name: ProxyTypeEmitterTest
  nameWithType: ProxyTypeEmitterTest
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  type: Class
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: ProxyTypeEmitterTest
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 11
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public class ProxyTypeEmitterTest
    content.vb: Public Class ProxyTypeEmitterTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity_Data
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity_Data
  id: GetProxyType_Identity_Data
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: GetProxyType_Identity_Data
  nameWithType: ProxyTypeEmitterTest.GetProxyType_Identity_Data
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity_Data
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetProxyType_Identity_Data
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 13
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static TheoryData<Type> GetProxyType_Identity_Data { get; }
    content.vb: Public Shared ReadOnly Property GetProxyType_Identity_Data As TheoryData(Of Type)
    parameters: []
    return:
      type: Xunit.TheoryData{System.Type}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity(System.Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity(System.Type)
  id: GetProxyType_Identity(System.Type)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: GetProxyType_Identity(Type)
  nameWithType: ProxyTypeEmitterTest.GetProxyType_Identity(Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Identity(System.Type)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetProxyType_Identity
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 27
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Theory]

      [MemberData("GetProxyType_Identity_Data", new object[]{})]

      public void GetProxyType_Identity(Type type)
    content.vb: >-
      <Theory>

      <MemberData("GetProxyType_Identity_Data", New Object() {})>

      Public Sub GetProxyType_Identity(type As Type)
    parameters:
    - id: type
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable_Data
  commentId: P:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable_Data
  id: GetProxyType_Assignable_Data
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: GetProxyType_Assignable_Data
  nameWithType: ProxyTypeEmitterTest.GetProxyType_Assignable_Data
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable_Data
  type: Property
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetProxyType_Assignable_Data
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 41
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: public static TheoryData<Type, Type> GetProxyType_Assignable_Data { get; }
    content.vb: Public Shared ReadOnly Property GetProxyType_Assignable_Data As TheoryData(Of Type, Type)
    parameters: []
    return:
      type: Xunit.TheoryData{System.Type,System.Type}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable(System.Type,System.Type)
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable(System.Type,System.Type)
  id: GetProxyType_Assignable(System.Type,System.Type)
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: GetProxyType_Assignable(Type, Type)
  nameWithType: ProxyTypeEmitterTest.GetProxyType_Assignable(Type, Type)
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Assignable(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetProxyType_Assignable
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 54
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Theory]

      [MemberData("GetProxyType_Assignable_Data", new object[]{})]

      public void GetProxyType_Assignable(Type sourceType, Type targetType)
    content.vb: >-
      <Theory>

      <MemberData("GetProxyType_Assignable_Data", New Object() {})>

      Public Sub GetProxyType_Assignable(sourceType As Type, targetType As Type)
    parameters:
    - id: sourceType
      type: System.Type
    - id: targetType
      type: System.Type
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Fails_DestinationIsNotInterface
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Fails_DestinationIsNotInterface
  id: GetProxyType_Fails_DestinationIsNotInterface
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: GetProxyType_Fails_DestinationIsNotInterface()
  nameWithType: ProxyTypeEmitterTest.GetProxyType_Fails_DestinationIsNotInterface()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.GetProxyType_Fails_DestinationIsNotInterface()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: GetProxyType_Fails_DestinationIsNotInterface
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 68
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void GetProxyType_Fails_DestinationIsNotInterface()
    content.vb: >-
      <Fact>

      Public Sub GetProxyType_Fails_DestinationIsNotInterface
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
  id: Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy_InvalidProperty_DestinationIsNotInterface()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy_InvalidProperty_DestinationIsNotInterface()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_InvalidProperty_DestinationIsNotInterface()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 88
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy_InvalidProperty_DestinationIsNotInterface()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy_InvalidProperty_DestinationIsNotInterface
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy
  id: Adapt_Proxy
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 108
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_NullProperty
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_NullProperty
  id: Adapt_Proxy_NullProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy_NullProperty()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy_NullProperty()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_NullProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy_NullProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 139
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy_NullProperty()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy_NullProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithTypeCycle
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithTypeCycle
  id: Adapt_Proxy_WithTypeCycle
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy_WithTypeCycle()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy_WithTypeCycle()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithTypeCycle()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy_WithTypeCycle
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 162
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy_WithTypeCycle()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy_WithTypeCycle
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
  id: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 191
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ReferenceTypeProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
  id: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty()
  nameWithType: ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 208
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Proxy_WithPrivatePropertyGetterOnSourceType_ValueTypeProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_InvalidProxy_IndexerProperty
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_InvalidProxy_IndexerProperty
  id: Adapt_InvalidProxy_IndexerProperty
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_InvalidProxy_IndexerProperty()
  nameWithType: ProxyTypeEmitterTest.Adapt_InvalidProxy_IndexerProperty()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_InvalidProxy_IndexerProperty()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_InvalidProxy_IndexerProperty
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 222
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_InvalidProxy_IndexerProperty()
    content.vb: >-
      <Fact>

      Public Sub Adapt_InvalidProxy_IndexerProperty
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList
  id: Adapt_List_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_List_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_List_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 238
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_List_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_List_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList_Enumerator
  id: Adapt_List_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_List_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_List_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_List_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 258
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_List_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_List_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList
  id: Adapt_ListWithProxy_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListWithProxy_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListWithProxy_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 281
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListWithProxy_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListWithProxy_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Null
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Null
  id: Adapt_ListWithProxy_ToReadOnlyList_Null
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListWithProxy_ToReadOnlyList_Null()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Null()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Null()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListWithProxy_ToReadOnlyList_Null
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 301
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListWithProxy_ToReadOnlyList_Null()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListWithProxy_ToReadOnlyList_Null
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator
  id: Adapt_ListWithProxy_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListWithProxy_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListWithProxy_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 321
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListWithProxy_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListWithProxy_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
  id: Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 344
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListWithProxy_ToReadOnlyList_Enumerator_Null
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList
  id: Adapt_Array_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Array_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Array_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 367
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Array_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Array_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList_Enumerator
  id: Adapt_Array_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_Array_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_Array_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_Array_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 387
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_Array_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_Array_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListProperty_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListProperty_ToReadOnlyList
  id: Adapt_ListProperty_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListProperty_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListProperty_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListProperty_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListProperty_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 410
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListProperty_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListProperty_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListListProperty_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListListProperty_ToReadOnlyList_Enumerator
  id: Adapt_ListListProperty_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListListProperty_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListListProperty_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListListProperty_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListListProperty_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 433
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListListProperty_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListListProperty_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList
  id: Adapt_ArrayListProperty_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ArrayListProperty_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ArrayListProperty_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 459
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ArrayListProperty_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ArrayListProperty_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
  id: Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ArrayListProperty_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ArrayListProperty_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 482
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ArrayListProperty_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ArrayListProperty_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList
  id: Adapt_ListPropertyWithProxy_ToReadOnlyList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListPropertyWithProxy_ToReadOnlyList()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListPropertyWithProxy_ToReadOnlyList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 508
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListPropertyWithProxy_ToReadOnlyList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListPropertyWithProxy_ToReadOnlyList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
  id: Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator()
  nameWithType: ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 531
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator()
    content.vb: >-
      <Fact>

      Public Sub Adapt_ListPropertyWithProxy_ToReadOnlyList_Enumerator
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_NestedList
  commentId: M:Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_NestedList
  id: Adapt_NestedList
  parent: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest
  langs:
  - csharp
  - vb
  name: Adapt_NestedList()
  nameWithType: ProxyTypeEmitterTest.Adapt_NestedList()
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal.ProxyTypeEmitterTest.Adapt_NestedList()
  type: Method
  source:
    remote:
      path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
      branch: master
      repo: https://github.com/aspnet/EventNotification.git
    id: Adapt_NestedList
    path: test/Microsoft.Extensions.DiagnosticAdapter.Test/Internal/ProxyTypeEmitterTest.cs
    startLine: 557
  assemblies:
  - Microsoft.Extensions.DiagnosticAdapter.Test
  namespace: Microsoft.Extensions.DiagnosticAdapter.Internal
  syntax:
    content: >-
      [Fact]

      public void Adapt_NestedList()
    content.vb: >-
      <Fact>

      Public Sub Adapt_NestedList
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Extensions.DiagnosticAdapter.Internal
  commentId: N:Microsoft.Extensions.DiagnosticAdapter.Internal
  isExternal: false
  name: Microsoft.Extensions.DiagnosticAdapter.Internal
  nameWithType: Microsoft.Extensions.DiagnosticAdapter.Internal
  fullName: Microsoft.Extensions.DiagnosticAdapter.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.TheoryData{System.Type}
  commentId: T:Xunit.TheoryData{System.Type}
  parent: Xunit
  definition: Xunit.TheoryData`1
  name: TheoryData<Type>
  nameWithType: TheoryData<Type>
  fullName: Xunit.TheoryData<System.Type>
  nameWithType.vb: TheoryData(Of Type)
  fullname.vb: Xunit.TheoryData(Of System.Type)
  name.vb: TheoryData(Of Type)
  spec.csharp:
  - uid: Xunit.TheoryData`1
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`1
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit.TheoryData`1
  commentId: T:Xunit.TheoryData`1
  isExternal: true
  name: TheoryData<T>
  nameWithType: TheoryData<T>
  fullName: Xunit.TheoryData<T>
  nameWithType.vb: TheoryData(Of T)
  fullname.vb: Xunit.TheoryData(Of T)
  name.vb: TheoryData(Of T)
  spec.csharp:
  - uid: Xunit.TheoryData`1
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`1
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Xunit.TheoryData{System.Type,System.Type}
  commentId: T:Xunit.TheoryData{System.Type,System.Type}
  parent: Xunit
  definition: Xunit.TheoryData`2
  name: TheoryData<Type, Type>
  nameWithType: TheoryData<Type, Type>
  fullName: Xunit.TheoryData<System.Type, System.Type>
  nameWithType.vb: TheoryData(Of Type, Type)
  fullname.vb: Xunit.TheoryData(Of System.Type, System.Type)
  name.vb: TheoryData(Of Type, Type)
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit.TheoryData`2
  commentId: T:Xunit.TheoryData`2
  isExternal: true
  name: TheoryData<T1, T2>
  nameWithType: TheoryData<T1, T2>
  fullName: Xunit.TheoryData<T1, T2>
  nameWithType.vb: TheoryData(Of T1, T2)
  fullname.vb: Xunit.TheoryData(Of T1, T2)
  name.vb: TheoryData(Of T1, T2)
  spec.csharp:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.TheoryData`2
    name: TheoryData
    nameWithType: TheoryData
    fullName: Xunit.TheoryData
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
