### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  id: UserStore`8
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  children:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  langs:
  - csharp
  - vb
  name: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserStore
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 112
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRepresents a new instance of a persistence store for the specified user and role types.\n"
  example: []
  syntax:
    content: 'public abstract class UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken> : IUserLoginStore<TUser>, IUserRoleStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IQueryableUserStore<TUser>, IUserTwoFactorStore<TUser>, IUserAuthenticationTokenStore<TUser>, IUserStore<TUser>, IDisposable where TUser : IdentityUser<TKey, TUserClaim, TUserRole, TUserLogin> where TRole : IdentityRole<TKey, TUserRole, IdentityRoleClaim<TKey>> where TContext : DbContext where TKey : IEquatable<TKey> where TUserClaim : IdentityUserClaim<TKey> where TUserRole : IdentityUserRole<TKey> where TUserLogin : IdentityUserLogin<TKey> where TUserToken : IdentityUserToken<TKey>'
    content.vb: >-
      Public MustInherit Class UserStore(Of TUser As IdentityUser(Of TKey, TUserClaim, TUserRole, TUserLogin), TRole As IdentityRole(Of TKey, TUserRole, IdentityRoleClaim(Of TKey)), TContext As DbContext, TKey As IEquatable(Of TKey), TUserClaim As IdentityUserClaim(Of TKey), TUserRole As IdentityUserRole(Of TKey), TUserLogin As IdentityUserLogin(Of TKey), TUserToken As IdentityUserToken(Of TKey))
          Implements IUserLoginStore(Of TUser), IUserRoleStore(Of TUser), IUserClaimStore(Of TUser), IUserPasswordStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserPhoneNumberStore(Of TUser), IQueryableUserStore(Of TUser), IUserTwoFactorStore(Of TUser), IUserAuthenticationTokenStore(Of TUser), IUserStore(Of TUser), IDisposable
    typeParameters:
    - id: TUser
      description: The type representing a user.
    - id: TRole
      description: The type representing a role.
    - id: TContext
      description: The type of the data context class used to access the store.
    - id: TKey
      description: The type of the primary key for a role.
    - id: TUserClaim
      description: The type representing a claim.
    - id: TUserRole
      description: The type representing a user role.
    - id: TUserLogin
      description: The type representing a user external login.
    - id: TUserToken
      description: The type representing a user token.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
  name.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.#ctor(`2,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  id: '#ctor(`2,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)'
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: UserStore(TContext, IdentityErrorDescriber)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore(TContext, IdentityErrorDescriber)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UserStore(TContext, Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 138
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new instance of <xref href=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserStore(TContext context, IdentityErrorDescriber describer = null)
    content.vb: Public Sub New(context As TContext, describer As IdentityErrorDescriber = Nothing)
    parameters:
    - id: context
      type: '{TContext}'
      description: The context used to access the store.
    - id: describer
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
      description: The <xref href="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" data-throw-if-not-resolved="false"></xref> used to describe store errors.
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore(TContext, IdentityErrorDescriber)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UserStore(TContext, Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Context
  id: Context
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Context
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 153
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the database context for this store.\n"
  example: []
  syntax:
    content: public TContext Context { get; }
    content.vb: Public ReadOnly Property Context As TContext
    parameters: []
    return:
      type: '{TContext}'
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Context
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ErrorDescriber
  id: ErrorDescriber
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ErrorDescriber
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ErrorDescriber
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ErrorDescriber
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 158
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Identity.IdentityErrorDescriber\" data-throw-if-not-resolved=\"false\"></xref> for any error that occurred with the current operation.\n"
  example: []
  syntax:
    content: public IdentityErrorDescriber ErrorDescriber { get; set; }
    content.vb: Public Property ErrorDescriber As IdentityErrorDescriber
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ErrorDescriber
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserRole(`0,`1)
  id: CreateUserRole(`0,`1)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserRole(TUser, TRole)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole(TUser, TRole)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserRole(TUser, TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserRole
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 172
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new entity to represent a user role.\n"
  example: []
  syntax:
    content: protected abstract TUserRole CreateUserRole(TUser user, TRole role)
    content.vb: Protected MustOverride Function CreateUserRole(user As TUser, role As TRole) As TUserRole
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: role
      type: '{TRole}'
      description: ''
    return:
      type: '{TUserRole}'
      description: ''
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole(TUser, TRole)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserRole(TUser, TRole)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserClaim(`0,System.Security.Claims.Claim)
  id: CreateUserClaim(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserClaim(TUser, Claim)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim(TUser, Claim)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserClaim(TUser, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserClaim
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 180
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user claim.\n"
  example: []
  syntax:
    content: protected abstract TUserClaim CreateUserClaim(TUser user, Claim claim)
    content.vb: Protected MustOverride Function CreateUserClaim(user As TUser, claim As Claim) As TUserClaim
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: claim
      type: System.Security.Claims.Claim
      description: ''
    return:
      type: '{TUserClaim}'
      description: ''
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim(TUser, Claim)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserClaim(TUser, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserLogin(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  id: CreateUserLogin(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserLogin(TUser, UserLoginInfo)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin(TUser, UserLoginInfo)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserLogin(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserLogin
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 188
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user login.\n"
  example: []
  syntax:
    content: protected abstract TUserLogin CreateUserLogin(TUser user, UserLoginInfo login)
    content.vb: Protected MustOverride Function CreateUserLogin(user As TUser, login As UserLoginInfo) As TUserLogin
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: login
      type: Microsoft.AspNetCore.Identity.UserLoginInfo
      description: ''
    return:
      type: '{TUserLogin}'
      description: ''
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin(TUser, UserLoginInfo)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserLogin(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateUserToken(`0,System.String,System.String,System.String)
  id: CreateUserToken(`0,System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateUserToken(TUser, String, String, String)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken(TUser, String, String, String)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateUserToken(TUser, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserToken
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 198
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreate a new entity representing a user token.\n"
  example: []
  syntax:
    content: protected abstract TUserToken CreateUserToken(TUser user, string loginProvider, string name, string value)
    content.vb: Protected MustOverride Function CreateUserToken(user As TUser, loginProvider As String, name As String, value As String) As TUserToken
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: loginProvider
      type: System.String
      description: ''
    - id: name
      type: System.String
      description: ''
    - id: value
      type: System.String
      description: ''
    return:
      type: '{TUserToken}'
      description: ''
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken(TUser, String, String, String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateUserToken(TUser, System.String, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AutoSaveChanges
  id: AutoSaveChanges
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AutoSaveChanges
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AutoSaveChanges
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AutoSaveChanges
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 206
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.\n"
  example: []
  syntax:
    content: public bool AutoSaveChanges { get; set; }
    content.vb: Public Property AutoSaveChanges As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if changes should be automatically persisted, otherwise false.\n"
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AutoSaveChanges
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SaveChanges(System.Threading.CancellationToken)
  id: SaveChanges(System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SaveChanges(CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges(CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SaveChanges(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SaveChanges
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 211
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: Saves the current store.
  example: []
  syntax:
    content: protected Task SaveChanges(CancellationToken cancellationToken)
    content.vb: Protected Function SaveChanges(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges(CancellationToken)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SaveChanges(System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserIdAsync(`0,System.Threading.CancellationToken)
  id: GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserIdAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 222
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user identifier for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetUserIdAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose identifier should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the identifier for the specified <em>user</em>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserIdAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 239
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the name for the specified <em>user</em>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 257
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the given <em>userName</em> for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: userName
      type: System.String
      description: The user name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedUserNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 275
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the normalized user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetNormalizedUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the normalized user name for the specified <em>user</em>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedUserNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 293
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the given normalized name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetNormalizedUserNameAsync(user As TUser, normalizedName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.CreateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 311
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates the specified <em>user</em> in the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function CreateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the creation operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).CreateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.UpdateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 330
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nUpdates the specified <em>user</em> in the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function UpdateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to update.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).UpdateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.DeleteAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 359
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDeletes the specified <em>user</em> from the user store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function DeleteAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).DeleteAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 388
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds and returns a user, if any, who has the specified <em>userId</em>.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByIdAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: userId
      type: System.String
      description: The user ID to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>userId</em> if it exists.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdFromString(System.String)
  id: ConvertIdFromString(System.String)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ConvertIdFromString(String)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString(String)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdFromString(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdFromString
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 401
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <em>id</em> to a strongly typed key object.\n"
  example: []
  syntax:
    content: public virtual TKey ConvertIdFromString(string id)
    content.vb: Public Overridable Function ConvertIdFromString(id As String) As TKey
    parameters:
    - id: id
      type: System.String
      description: The id to convert.
    return:
      type: '{TKey}'
      description: An instance of <em>TKey</em> representing the provided <em>id</em>.
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdFromString(System.String)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ConvertIdToString(`3)
  id: ConvertIdToString(`3)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ConvertIdToString(TKey)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString(TKey)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ConvertIdToString(TKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdToString
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 415
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <em>id</em> to its string representation.\n"
  example: []
  syntax:
    content: public virtual string ConvertIdToString(TKey id)
    content.vb: Public Overridable Function ConvertIdToString(id As TKey) As String
    parameters:
    - id: id
      type: '{TKey}'
      description: The id to convert.
    return:
      type: System.String
      description: An <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the provided <em>id</em>.
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ConvertIdToString(TKey)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 432
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds and returns a user, if any, who has the specified normalized user name.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByNameAsync(normalizedUserName As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: normalizedUserName
      type: System.String
      description: The normalized user name to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>normalizedUserName</em> if it exists.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Users
  id: Users
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Users
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Users
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 442
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nA navigation property for the users the store contains.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TUser> Users { get; }
    content.vb: Public Overridable ReadOnly Property Users As IQueryable(Of TUser)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Users
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPasswordHashAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 454
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the password hash for a user.\n"
  example: []
  syntax:
    content: public virtual Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetPasswordHashAsync(user As TUser, passwordHash As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to set the password hash for.
    - id: passwordHash
      type: System.String
      description: The password hash to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  id: GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPasswordHashAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 472
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the password hash for a user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetPasswordHashAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to retrieve the password hash for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the password hash for the user.
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.HasPasswordAsync(`0,System.Threading.CancellationToken)
  id: HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: HasPasswordAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 490
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating if the specified user has a password.\n"
  example: []
  syntax:
    content: public virtual Task<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function HasPasswordAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to retrieve the password hash for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> containing a flag indicating if the specified user has a password. If the \nuser has a password the returned value with be true, otherwise it will be false."
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).HasPasswordAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddToRoleAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 503
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the given <em>normalizedRoleName</em> to the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task AddToRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddToRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the role to.
    - id: normalizedRoleName
      type: System.String
      description: The role to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveFromRoleAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 530
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the given <em>normalizedRoleName</em> from the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveFromRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function RemoveFromRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the role from.
    - id: normalizedRoleName
      type: System.String
      description: The role to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetRolesAsync(`0,System.Threading.CancellationToken)
  id: GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRolesAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 559
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the roles the specified <em>user</em> is a member of.\n"
  example: []
  syntax:
    content: public virtual Task<IList<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetRolesAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of String))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose roles should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the roles the user is a member of.
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetRolesAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsInRoleAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 583
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating if the specified user is a member of the give <em>normalizedRoleName</em>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsInRoleAsync(TUser user, string normalizedRoleName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function IsInRoleAsync(user As TUser, normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role membership should be checked.
    - id: normalizedRoleName
      type: System.String
      description: The role to check membership of
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> containing a flag indicating if the specified user is a member of the given group. If the \nuser is a member of the group the returned value with be true, otherwise it will be false."
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ThrowIfDisposed
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 605
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ThrowIfDisposed()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 616
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDispose the store\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).Dispose()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 627
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet the claims associated with the specified <em>user</em> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IList<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetClaimsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose claims should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the claims granted to a user.
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetClaimsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimsAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 645
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the <em>claims</em> given to the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task AddClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the claim to.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The claim to add to the user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ReplaceClaimAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 671
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReplaces the <em>claim</em> on the specified <em>user</em>, with the <em>newClaim</em>.\n"
  example: []
  syntax:
    content: public virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ReplaceClaimAsync(user As TUser, claim As Claim, newClaim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The role to replace the claim on.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim replace.
    - id: newClaim
      type: System.Security.Claims.Claim
      description: The new claim replacing the <em>claim</em>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimsAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 702
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the <em>claims</em> given from the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function RemoveClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the claims from.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The claim to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  id: AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddLoginAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 730
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the <em>login</em> given to the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddLoginAsync(user As TUser, login As UserLoginInfo, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the login to.
    - id: login
      type: Microsoft.AspNetCore.Identity.UserLoginInfo
      description: The login to add to the user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveLoginAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 755
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the <em>loginProvider</em> given from the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function RemoveLoginAsync(user As TUser, loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the login from.
    - id: loginProvider
      type: System.String
      description: The login to remove from the user.
    - id: providerKey
      type: System.String
      description: The key provided by the <em>loginProvider</em> to identify a user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLoginsAsync(`0,System.Threading.CancellationToken)
  id: GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLoginsAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 779
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the associated logins for the specified <param ref=\"user\" />.\n"
  example: []
  syntax:
    content: public virtual Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetLoginsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose associated logins to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing a list of <xref href=\"Microsoft.AspNetCore.Identity.UserLoginInfo\" data-throw-if-not-resolved=\"false\"></xref> for the specified <em>user</em>, if any.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLoginsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByLoginAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 801
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the user associated with the specified login provider and login provider key..\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByLoginAsync(loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: loginProvider
      type: System.String
      description: The login provider who provided the <em>providerKey</em>.
    - id: providerKey
      type: System.String
      description: The key provided by the <em>loginProvider</em> to identify a user.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync(String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 825
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets a flag indicating whether the email address for the specified <em>user</em> has been verified, true if the email address is verified otherwise\nfalse.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetEmailConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <em>user</em>\nhas been confirmed or not.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 843
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the flag indicating whether the specified <em>user</em>'s email address has been confirmed or not.\n"
  example: []
  syntax:
    content: public virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetEmailConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 862
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the <em>email</em> address for a <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetEmailAsync(user As TUser, email As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be set.
    - id: email
      type: System.String
      description: The email to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetEmailAsync(`0,System.Threading.CancellationToken)
  id: GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 880
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the email address for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetEmailAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The task object containing the results of the asynchronous operation, the email address for the specified <em>user</em>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedEmailAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 899
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns the normalized email for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetNormalizedEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to retrieve.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedEmailAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 917
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the normalized email for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetNormalizedEmailAsync(user As TUser, normalizedEmail As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address to set.
    - id: normalizedEmail
      type: System.String
      description: The normalized email to set for the specified <em>user</em>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  id: FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByEmailAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 937
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the user, if any, associated with the specified, normalized email address.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByEmailAsync(normalizedEmail As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: normalizedEmail
      type: System.String
      description: The normalized email address to return the user for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).FindByEmailAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEndDateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 954
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the last <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> a user's last lockout expired, if any.\nAny time in the past should be indicates a user is not locked out.\n"
  example: []
  syntax:
    content: public virtual Task<DateTimeOffset? > GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetLockoutEndDateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of DateTimeOffset?)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> containing the last time\na user's lockout expired, if any.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  id: SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEndDateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 972
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nLocks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.\n"
  example: []
  syntax:
    content: public virtual Task SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetLockoutEndDateAsync(user As TUser, lockoutEnd As DateTimeOffset?, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be set.
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
      description: The <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> after which the <em>user</em>'s lockout should end.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IncrementAccessFailedCountAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 990
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRecords that a failed access has occurred, incrementing the failed access count.\n"
  example: []
  syntax:
    content: public virtual Task<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function IncrementAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose cancellation count should be incremented.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the incremented failed access count.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetAccessFailedCountAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1009
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nResets a user's failed access count.\n"
  remarks: This is typically called after the account is successfully accessed.
  example: []
  syntax:
    content: public virtual Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ResetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be reset.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAccessFailedCountAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1027
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves the current failed access count for the specified <em>user</em>..\n"
  example: []
  syntax:
    content: public virtual Task<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the failed access count.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEnabledAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1046
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves a flag indicating whether user lockout can enabled for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetLockoutEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if a user can be locked out, otherwise false.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEnabledAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1064
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSet the flag indicating if the specified <em>user</em> can be locked out..\n"
  example: []
  syntax:
    content: public virtual Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetLockoutEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating if lock out can be enabled for the specified <em>user</em>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1083
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the telephone number for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetPhoneNumberAsync(user As TUser, phoneNumber As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be set.
    - id: phoneNumber
      type: System.String
      description: The telephone number to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1101
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the telephone number, if any, for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetPhoneNumberAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the user's telephone number, if any.
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1121
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets a flag indicating whether the specified <em>user</em>'s telephone number has been confirmed.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetPhoneNumberConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether their telephone number is confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <em>user</em> has a confirmed\ntelephone number otherwise false.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1139
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets a flag indicating if the specified <em>user</em>'s phone number has been confirmed..\n"
  example: []
  syntax:
    content: public virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetPhoneNumberConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number confirmation status should be set.
    - id: confirmed
      type: System.Boolean
      description: A flag indicating whether the user's telephone number has been confirmed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetSecurityStampAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1158
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the provided security <em>stamp</em> for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetSecurityStampAsync(user As TUser, stamp As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: stamp
      type: System.String
      description: The security stamp to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  id: GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetSecurityStampAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1176
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet the security stamp for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetSecurityStampAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the security stamp for the specified <em>user</em>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTwoFactorEnabledAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1195
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets a flag indicating whether the specified <em>user</em> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetTwoFactorEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating whether the specified <em>user</em> has two factor authentication enabled.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTwoFactorEnabledAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1217
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nReturns a flag indicating whether the specified <em>user</em> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetTwoFactorEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a flag indicating whether the specified \n<em>user</em> has two factor authentication enabled or not.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersForClaimAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1236
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves all users with the specified claim.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetUsersForClaimAsync(claim As Claim, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim whose users should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> contains a list of users, if any, that contain the specified claim. \n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync(Claim, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  id: GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersInRoleAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1262
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRetrieves all users in the specified role.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersInRoleAsync(string normalizedRoleName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetUsersInRoleAsync(normalizedRoleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
    parameters:
    - id: normalizedRoleName
      type: System.String
      description: The role whose users should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> contains a list of users, if any, that are in the specified role. \n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTokenAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1292
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public virtual Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken)
    content.vb: Public Overridable Function SetTokenAsync(user As TUser, loginProvider As String, name As String, value As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: value
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync(TUser, String, String, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveTokenAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1313
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    content.vb: Public Function RemoveTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`8
  langs:
  - csharp
  - vb
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore<TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTokenAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/UserStore.cs
    startLine: 1330
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public Task<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    content.vb: Public Function GetTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
references:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  commentId: N:Microsoft.AspNetCore.Identity.EntityFrameworkCore
  isExternal: false
  name: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  nameWithType: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserStore`1
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore`1
  isExternal: false
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore`1
  isExternal: false
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore`1
  isExternal: false
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  isExternal: false
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  isExternal: false
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore`1
  isExternal: false
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  isExternal: false
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  isExternal: false
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  isExternal: false
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  isExternal: false
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  isExternal: false
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore`1
  isExternal: false
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
  isExternal: false
  name: UserStore
  nameWithType: UserStore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore
- uid: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  commentId: T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: TContext
  isExternal: false
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: '{TUserRole}'
  commentId: '!:TUserRole'
  definition: TUserRole
  name: TUserRole
  nameWithType: TUserRole
  fullName: TUserRole
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: TUserRole
  commentId: '!:TUserRole'
  isExternal: false
  name: TUserRole
  nameWithType: TUserRole
  fullName: TUserRole
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: '{TUserClaim}'
  commentId: '!:TUserClaim'
  definition: TUserClaim
  name: TUserClaim
  nameWithType: TUserClaim
  fullName: TUserClaim
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: TUserClaim
  commentId: '!:TUserClaim'
  isExternal: false
  name: TUserClaim
  nameWithType: TUserClaim
  fullName: TUserClaim
- uid: Microsoft.AspNetCore.Identity.UserLoginInfo
  commentId: T:Microsoft.AspNetCore.Identity.UserLoginInfo
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
- uid: '{TUserLogin}'
  commentId: '!:TUserLogin'
  definition: TUserLogin
  name: TUserLogin
  nameWithType: TUserLogin
  fullName: TUserLogin
- uid: TUserLogin
  commentId: '!:TUserLogin'
  isExternal: false
  name: TUserLogin
  nameWithType: TUserLogin
  fullName: TUserLogin
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TUserToken}'
  commentId: '!:TUserToken'
  definition: TUserToken
  name: TUserToken
  nameWithType: TUserToken
  fullName: TUserToken
- uid: TUserToken
  commentId: '!:TUserToken'
  isExternal: false
  name: TUserToken
  nameWithType: TUserToken
  fullName: TUserToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullname.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}.Users
  parent: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq.IQueryable{{TUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TUser>
  nameWithType: IQueryable<TUser>
  fullName: System.Linq.IQueryable<TUser>
  nameWithType.vb: IQueryable(Of TUser)
  fullname.vb: System.Linq.IQueryable(Of TUser)
  name.vb: IQueryable(Of TUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  isExternal: false
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<String>>
  nameWithType: Task<IList<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: Task(Of IList(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.String))
  name.vb: Task(Of IList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  isExternal: true
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<UserLoginInfo>>
  nameWithType: Task<IList<UserLoginInfo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo>>
  nameWithType.vb: Task(Of IList(Of UserLoginInfo))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNetCore.Identity.UserLoginInfo))
  name.vb: Task(Of IList(Of UserLoginInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<DateTimeOffset>>
  nameWithType: Task<Nullable<DateTimeOffset>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.DateTimeOffset>>
  nameWithType.vb: Task(Of Nullable(Of DateTimeOffset))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.DateTimeOffset))
  name.vb: Task(Of Nullable(Of DateTimeOffset))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TUser>>
  nameWithType: Task<IList<TUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser>>
  nameWithType.vb: Task(Of IList(Of TUser))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TUser))
  name.vb: Task(Of IList(Of TUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
