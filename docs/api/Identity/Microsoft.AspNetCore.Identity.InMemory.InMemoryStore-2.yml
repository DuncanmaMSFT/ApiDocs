### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  commentId: T:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  id: InMemoryStore`2
  parent: Microsoft.AspNetCore.Identity.InMemory
  children:
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Dispose
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLoginsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedRoleNameAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleIdAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleNameAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRolesAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.HasPasswordAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Roles
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`1,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Users
  langs:
  - csharp
  - vb
  name: InMemoryStore<TUser, TRole>
  nameWithType: InMemoryStore<TUser, TRole>
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: InMemoryStore
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: 'public class InMemoryStore<TUser, TRole> : IUserLoginStore<TUser>, IUserRoleStore<TUser>, IUserClaimStore<TUser>, IUserPasswordStore<TUser>, IUserSecurityStampStore<TUser>, IUserEmailStore<TUser>, IUserLockoutStore<TUser>, IUserPhoneNumberStore<TUser>, IQueryableUserStore<TUser>, IUserTwoFactorStore<TUser>, IQueryableRoleStore<TRole>, IRoleClaimStore<TRole>, IRoleStore<TRole>, IUserAuthenticationTokenStore<TUser>, IUserStore<TUser>, IDisposable where TUser : TestUser where TRole : TestRole'
    content.vb: >-
      Public Class InMemoryStore(Of TUser As TestUser, TRole As TestRole)
          Implements IUserLoginStore(Of TUser), IUserRoleStore(Of TUser), IUserClaimStore(Of TUser), IUserPasswordStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserPhoneNumberStore(Of TUser), IQueryableUserStore(Of TUser), IUserTwoFactorStore(Of TUser), IQueryableRoleStore(Of TRole), IRoleClaimStore(Of TRole), IRoleStore(Of TRole), IUserAuthenticationTokenStore(Of TUser), IUserStore(Of TUser), IDisposable
    typeParameters:
    - id: TUser
    - id: TRole
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: InMemoryStore(Of TUser, TRole)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole)
  name.vb: InMemoryStore(Of TUser, TRole)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Users
  commentId: P:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Users
  id: Users
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: InMemoryStore<TUser, TRole>.Users
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.Users
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Users
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public IQueryable<TUser> Users { get; }
    content.vb: Public ReadOnly Property Users As IQueryable(Of TUser)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  nameWithType.vb: InMemoryStore(Of TUser, TRole).Users
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).Users
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetClaimsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetClaimsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetClaimsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimsAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 45
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task AddClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    content.vb: Public Function AddClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ReplaceClaimAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken = null)
    content.vb: Public Function ReplaceClaimAsync(user As TUser, claim As Claim, newClaim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: claim
      type: System.Security.Claims.Claim
    - id: newClaim
      type: System.Security.Claims.Claim
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  id: RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimsAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 65
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveClaimsAsync(user As TUser, claims As IEnumerable(Of Claim), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 80
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken = null)
    content.vb: Public Function SetEmailAsync(user As TUser, email As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: email
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailAsync(`0,System.Threading.CancellationToken)
  id: GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 86
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetEmailAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedEmailAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNormalizedEmailAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetNormalizedEmailAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedEmailAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 96
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken = null)
    content.vb: Public Function SetNormalizedEmailAsync(user As TUser, normalizedEmail As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: normalizedEmail
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailConfirmedAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 103
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetEmailConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetEmailConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailConfirmedAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 108
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    content.vb: Public Function SetEmailConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: confirmed
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  id: FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByEmailAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 114
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<TUser> FindByEmailAsync(string email, CancellationToken cancellationToken = null)
    content.vb: Public Function FindByEmailAsync(email As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: email
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).FindByEmailAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).FindByEmailAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEndDateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 121
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<DateTimeOffset? > GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetLockoutEndDateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of DateTimeOffset?)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetLockoutEndDateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  id: SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEndDateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 126
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd, CancellationToken cancellationToken = null)
    content.vb: Public Function SetLockoutEndDateAsync(user As TUser, lockoutEnd As DateTimeOffset?, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IncrementAccessFailedCountAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 132
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function IncrementAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetAccessFailedCountAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 138
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function ResetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).ResetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  id: GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAccessFailedCountAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 144
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetAccessFailedCountAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetAccessFailedCountAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEnabledAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 149
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetLockoutEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetLockoutEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEnabledAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 154
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    content.vb: Public Function SetLockoutEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: enabled
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  id: AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddLoginAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 165
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function AddLoginAsync(user As TUser, login As UserLoginInfo, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: login
      type: Microsoft.AspNetCore.Identity.UserLoginInfo
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveLoginAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 179
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveLoginAsync(user As TUser, loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: providerKey
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).RemoveLoginAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetLoginsAsync(`0,System.Threading.CancellationToken)
  id: GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLoginsAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 195
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetLoginsAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetLoginsAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetLoginsAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  id: FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByLoginAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 202
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken = null)
    content.vb: Public Function FindByLoginAsync(loginProvider As String, providerKey As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: loginProvider
      type: System.String
    - id: providerKey
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).FindByLoginAsync(String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserIdAsync(`0,System.Threading.CancellationToken)
  id: GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserIdAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 212
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetUserIdAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetUserIdAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetUserIdAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 217
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 222
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken = null)
    content.vb: Public Function SetUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: userName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.CreateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 228
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function CreateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).CreateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).CreateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.UpdateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 234
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function UpdateAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).UpdateAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).UpdateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 240
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken = null)
    content.vb: Public Function FindByIdAsync(userId As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: userId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: InMemoryStore<TUser, TRole>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.Dispose()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 249
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: InMemoryStore(Of TUser, TRole).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).Dispose()
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 253
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<TUser> FindByNameAsync(string userName, CancellationToken cancellationToken = null)
    content.vb: Public Function FindByNameAsync(userName As String, cancellationToken As CancellationToken = Nothing) As Task(Of TUser)
    parameters:
    - id: userName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TUser}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.DeleteAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 260
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).DeleteAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).DeleteAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPasswordHashAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 270
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken = null)
    content.vb: Public Function SetPasswordHashAsync(user As TUser, passwordHash As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: passwordHash
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetPasswordHashAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  id: GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPasswordHashAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 276
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetPasswordHashAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetPasswordHashAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.HasPasswordAsync(`0,System.Threading.CancellationToken)
  id: HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: HasPasswordAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 281
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function HasPasswordAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).HasPasswordAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).HasPasswordAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 286
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken = null)
    content.vb: Public Function SetPhoneNumberAsync(user As TUser, phoneNumber As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: phoneNumber
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetPhoneNumberAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 292
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetPhoneNumberAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetPhoneNumberAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  id: GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberConfirmedAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 297
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetPhoneNumberConfirmedAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberConfirmedAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 302
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken = null)
    content.vb: Public Function SetPhoneNumberConfirmedAsync(user As TUser, confirmed As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: confirmed
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddToRoleAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 309
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task AddToRoleAsync(TUser user, string role, CancellationToken cancellationToken = null)
    content.vb: Public Function AddToRoleAsync(user As TUser, role As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: role
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).AddToRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveFromRoleAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 320
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task RemoveFromRoleAsync(TUser user, string role, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveFromRoleAsync(user As TUser, role As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: role
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).RemoveFromRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRolesAsync(`0,System.Threading.CancellationToken)
  id: GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRolesAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 331
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRolesAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of String))
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetRolesAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetRolesAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  id: IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsInRoleAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 341
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> IsInRoleAsync(TUser user, string role, CancellationToken cancellationToken = null)
    content.vb: Public Function IsInRoleAsync(user As TUser, role As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: role
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).IsInRoleAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetSecurityStampAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 348
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken = null)
    content.vb: Public Function SetSecurityStampAsync(user As TUser, stamp As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: stamp
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetSecurityStampAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  id: GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetSecurityStampAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 354
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetSecurityStampAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetSecurityStampAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  id: SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTwoFactorEnabledAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 359
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken = null)
    content.vb: Public Function SetTwoFactorEnabledAsync(user As TUser, enabled As Boolean, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: enabled
      type: System.Boolean
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  id: GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTwoFactorEnabledAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 365
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetTwoFactorEnabledAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedUserNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 370
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNormalizedUserNameAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetNormalizedUserNameAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedUserNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 375
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetNormalizedUserNameAsync(TUser user, string userName, CancellationToken cancellationToken = null)
    content.vb: Public Function SetNormalizedUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: userName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  id: GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersInRoleAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 382
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<TUser>> GetUsersInRoleAsync(string roleName, CancellationToken cancellationToken = null)
    content.vb: Public Function GetUsersInRoleAsync(roleName As String, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
    parameters:
    - id: roleName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetUsersInRoleAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersForClaimAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 397
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Function GetUsersForClaimAsync(claim As Claim, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetUsersForClaimAsync(Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.CreateAsync(`1,System.Threading.CancellationToken)
  id: CreateAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 413
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function CreateAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).CreateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).CreateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.DeleteAsync(`1,System.Threading.CancellationToken)
  id: DeleteAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 419
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).DeleteAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleIdAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleIdAsync(`1,System.Threading.CancellationToken)
  id: GetRoleIdAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleIdAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 429
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRoleIdAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetRoleIdAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleNameAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetRoleNameAsync(`1,System.Threading.CancellationToken)
  id: GetRoleNameAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 434
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRoleNameAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  id: SetRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetRoleNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 439
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken = null)
    content.vb: Public Function SetRoleNameAsync(role As TRole, roleName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
    - id: roleName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.UpdateAsync(`1,System.Threading.CancellationToken)
  id: UpdateAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 445
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function UpdateAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).UpdateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByIdAsync(System.String,System.Threading.CancellationToken)
  isEii: true
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 451
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: Task<TRole> IRoleStore<TRole>.FindByIdAsync(string roleId, CancellationToken cancellationToken)
    content.vb: Function Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(roleId As String, cancellationToken As CancellationToken) As Task(Of TRole) Implements IRoleStore(Of TRole).FindByIdAsync
    parameters:
    - id: roleId
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TRole}}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  name.vb: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: Microsoft#AspNetCore#Identity#IRoleStore{TRole}#FindByNameAsync(System.String,System.Threading.CancellationToken)
  isEii: true
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 460
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: Task<TRole> IRoleStore<TRole>.FindByNameAsync(string roleName, CancellationToken cancellationToken)
    content.vb: Function Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(roleName As String, cancellationToken As CancellationToken) As Task(Of TRole) Implements IRoleStore(Of TRole).FindByNameAsync
    parameters:
    - id: roleName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{{TRole}}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  name.vb: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetClaimsAsync(`1,System.Threading.CancellationToken)
  id: GetClaimsAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 467
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<IList<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetClaimsAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetClaimsAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.AddClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: AddClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 473
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Function AddClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
    - id: claim
      type: System.Security.Claims.Claim
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: RemoveClaimAsync(`1,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 479
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
    - id: claim
      type: System.Security.Claims.Claim
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedRoleNameAsync(`1,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetNormalizedRoleNameAsync(`1,System.Threading.CancellationToken)
  id: GetNormalizedRoleNameAsync(`1,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedRoleNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 491
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetNormalizedRoleNameAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetNormalizedRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  id: SetNormalizedRoleNameAsync(`1,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedRoleNameAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 496
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken = null)
    content.vb: Public Function SetNormalizedRoleNameAsync(role As TRole, normalizedName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
    - id: normalizedName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  id: SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTokenAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 502
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken)
    content.vb: Public Function SetTokenAsync(user As TUser, loginProvider As String, name As String, value As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: value
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).SetTokenAsync(TUser, String, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveTokenAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 526
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    content.vb: Public Function RemoveTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).RemoveTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  id: GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: InMemoryStore<TUser, TRole>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTokenAsync
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 540
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public Task<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken)
    content.vb: Public Function GetTokenAsync(user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: loginProvider
      type: System.String
    - id: name
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.String}
  implements:
  - Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  nameWithType.vb: InMemoryStore(Of TUser, TRole).GetTokenAsync(TUser, String, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Roles
  commentId: P:Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2.Roles
  id: Roles
  parent: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore`2
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: InMemoryStore<TUser, TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore<TUser, TRole>.Roles
  type: Property
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Roles
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/InMemoryStore.cs
    startLine: 550
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public IQueryable<TRole> Roles { get; }
    content.vb: Public ReadOnly Property Roles As IQueryable(Of TRole)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TRole}}
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  nameWithType.vb: InMemoryStore(Of TUser, TRole).Roles
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.InMemory.InMemoryStore(Of TUser, TRole).Roles
references:
- uid: Microsoft.AspNetCore.Identity.InMemory
  commentId: N:Microsoft.AspNetCore.Identity.InMemory
  isExternal: false
  name: Microsoft.AspNetCore.Identity.InMemory
  nameWithType: Microsoft.AspNetCore.Identity.InMemory
  fullName: Microsoft.AspNetCore.Identity.InMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserStore`1
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLoginStore`1
  isExternal: false
  name: IUserLoginStore<TUser>
  nameWithType: IUserLoginStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
  nameWithType.vb: IUserLoginStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser)
  name.vb: IUserLoginStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1
    name: IUserLoginStore
    nameWithType: IUserLoginStore
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserRoleStore`1
  isExternal: false
  name: IUserRoleStore<TUser>
  nameWithType: IUserRoleStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
  nameWithType.vb: IUserRoleStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser)
  name.vb: IUserRoleStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1
    name: IUserRoleStore
    nameWithType: IUserRoleStore
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimStore`1
  isExternal: false
  name: IUserClaimStore<TUser>
  nameWithType: IUserClaimStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
  nameWithType.vb: IUserClaimStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser)
  name.vb: IUserClaimStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1
    name: IUserClaimStore
    nameWithType: IUserClaimStore
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  isExternal: false
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
  isExternal: false
  name: IUserSecurityStampStore<TUser>
  nameWithType: IUserSecurityStampStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
  nameWithType.vb: IUserSecurityStampStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser)
  name.vb: IUserSecurityStampStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1
    name: IUserSecurityStampStore
    nameWithType: IUserSecurityStampStore
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserEmailStore`1
  isExternal: false
  name: IUserEmailStore<TUser>
  nameWithType: IUserEmailStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
  nameWithType.vb: IUserEmailStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser)
  name.vb: IUserEmailStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1
    name: IUserEmailStore
    nameWithType: IUserEmailStore
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserLockoutStore`1
  isExternal: false
  name: IUserLockoutStore<TUser>
  nameWithType: IUserLockoutStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
  nameWithType.vb: IUserLockoutStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser)
  name.vb: IUserLockoutStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1
    name: IUserLockoutStore
    nameWithType: IUserLockoutStore
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
  isExternal: false
  name: IUserPhoneNumberStore<TUser>
  nameWithType: IUserPhoneNumberStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
  nameWithType.vb: IUserPhoneNumberStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser)
  name.vb: IUserPhoneNumberStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1
    name: IUserPhoneNumberStore
    nameWithType: IUserPhoneNumberStore
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableUserStore`1
  isExternal: false
  name: IQueryableUserStore<TUser>
  nameWithType: IQueryableUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
  nameWithType.vb: IQueryableUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser)
  name.vb: IQueryableUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1
    name: IQueryableUserStore
    nameWithType: IQueryableUserStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
  isExternal: false
  name: IUserTwoFactorStore<TUser>
  nameWithType: IUserTwoFactorStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
  nameWithType.vb: IUserTwoFactorStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser)
  name.vb: IUserTwoFactorStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1
    name: IUserTwoFactorStore
    nameWithType: IUserTwoFactorStore
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  isExternal: false
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  isExternal: false
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore`1
  isExternal: false
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
  isExternal: false
  name: IUserAuthenticationTokenStore<TUser>
  nameWithType: IUserAuthenticationTokenStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser)
  name.vb: IUserAuthenticationTokenStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1
    name: IUserAuthenticationTokenStore
    nameWithType: IUserAuthenticationTokenStore
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore`1
  isExternal: false
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore{`0}.Users
  parent: Microsoft.AspNetCore.Identity.IQueryableUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq.IQueryable{{TUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TUser>
  nameWithType: IQueryable<TUser>
  fullName: System.Linq.IQueryable<TUser>
  nameWithType.vb: IQueryable(Of TUser)
  fullname.vb: System.Linq.IQueryable(Of TUser)
  name.vb: IQueryable(Of TUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users
  isExternal: false
  name: Users
  nameWithType: IQueryableUserStore<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users
  nameWithType.vb: IQueryableUserStore(Of TUser).Users
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableUserStore(Of TUser).Users
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetClaimsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TUser, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetClaimsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetClaimsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore<TUser>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.AddClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore<TUser>.AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: AddClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).AddClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).AddClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.ReplaceClaimAsync({TUser},System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore<TUser>.ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: ReplaceClaimAsync
    nameWithType: IUserClaimStore(Of TUser).ReplaceClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).ReplaceClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.RemoveClaimsAsync({TUser},System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.Threading.CancellationToken)
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore<TUser>.RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)
    name: RemoveClaimsAsync
    nameWithType: IUserClaimStore(Of TUser).RemoveClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).RemoveClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)
    name: GetEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetNormalizedEmailAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedEmailAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).GetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetNormalizedEmailAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedEmailAsync(TUser, String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore<TUser>.SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedEmailAsync
    nameWithType: IUserEmailStore(Of TUser).SetNormalizedEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetNormalizedEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.GetEmailConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetEmailConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).GetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).GetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.SetEmailConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore<TUser>.SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetEmailConfirmedAsync
    nameWithType: IUserEmailStore(Of TUser).SetEmailConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).SetEmailConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore{`0}.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserEmailStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullname.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByEmailAsync(String, CancellationToken)
  nameWithType: IUserEmailStore<TUser>.FindByEmailAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserEmailStore(Of TUser).FindByEmailAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore<TUser>.FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)
    name: FindByEmailAsync
    nameWithType: IUserEmailStore(Of TUser).FindByEmailAsync
    fullName: Microsoft.AspNetCore.Identity.IUserEmailStore(Of TUser).FindByEmailAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEndDateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<DateTimeOffset>>
  nameWithType: Task<Nullable<DateTimeOffset>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.DateTimeOffset>>
  nameWithType.vb: Task(Of Nullable(Of DateTimeOffset))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.DateTimeOffset))
  name.vb: Task(Of Nullable(Of DateTimeOffset))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEndDateAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEndDateAsync({TUser},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset), System.Threading.CancellationToken)
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset), CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)
    name: SetLockoutEndDateAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEndDateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.IncrementAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: IncrementAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: IncrementAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).IncrementAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.ResetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: ResetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: ResetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).ResetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetAccessFailedCountAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetAccessFailedCountAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore<TUser>.GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)
    name: GetAccessFailedCountAsync
    nameWithType: IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetAccessFailedCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.GetLockoutEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLockoutEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).GetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}.SetLockoutEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore{`0}.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLockoutStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore<TUser>.SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetLockoutEnabledAsync
    nameWithType: IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLockoutStore(Of TUser).SetLockoutEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.AddLoginAsync({TUser},Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserLoginInfo
  commentId: T:Microsoft.AspNetCore.Identity.UserLoginInfo
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
  isExternal: true
  name: AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).AddLoginAsync(TUser, UserLoginInfo, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore<TUser>.AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)
    name: AddLoginAsync
    nameWithType: IUserLoginStore(Of TUser).AddLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).AddLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.RemoveLoginAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveLoginAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore<TUser>.RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveLoginAsync
    nameWithType: IUserLoginStore(Of TUser).RemoveLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).RemoveLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.GetLoginsAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.GetLoginsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<UserLoginInfo>>
  nameWithType: Task<IList<UserLoginInfo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo>>
  nameWithType.vb: Task(Of IList(Of UserLoginInfo))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNetCore.Identity.UserLoginInfo))
  name.vb: Task(Of IList(Of UserLoginInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetLoginsAsync(TUser, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.GetLoginsAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).GetLoginsAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore<TUser>.GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)
    name: GetLoginsAsync
    nameWithType: IUserLoginStore(Of TUser).GetLoginsAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).GetLoginsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore{`0}.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserLoginStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByLoginAsync(String, String, CancellationToken)
  nameWithType: IUserLoginStore<TUser>.FindByLoginAsync(String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserLoginStore(Of TUser).FindByLoginAsync(String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync(System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore<TUser>.FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)
    name: FindByLoginAsync
    nameWithType: IUserLoginStore(Of TUser).FindByLoginAsync
    fullName: Microsoft.AspNetCore.Identity.IUserLoginStore(Of TUser).FindByLoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserIdAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore<TUser>.GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
    name: GetUserIdAsync
    nameWithType: IUserStore(Of TUser).GetUserIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore<TUser>.GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetUserNameAsync
    nameWithType: IUserStore(Of TUser).GetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore<TUser>.SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetUserNameAsync
    nameWithType: IUserStore(Of TUser).SetUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.CreateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IUserStore(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.UpdateAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore<TUser>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IUserStore(Of TUser).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore<TUser>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IUserStore(Of TUser).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore<TUser>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IUserStore(Of TUser).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.DeleteAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore<TUser>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IUserStore(Of TUser).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.SetPasswordHashAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPasswordHashAsync(TUser, String, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).SetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).SetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.GetPasswordHashAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPasswordHashAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore<TUser>.GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)
    name: GetPasswordHashAsync
    nameWithType: IUserPasswordStore(Of TUser).GetPasswordHashAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).GetPasswordHashAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}.HasPasswordAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}.HasPasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: HasPasswordAsync(TUser, CancellationToken)
  nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore<TUser>.HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)
    name: HasPasswordAsync
    nameWithType: IUserPasswordStore(Of TUser).HasPasswordAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser).HasPasswordAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberAsync(TUser, String, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.GetPhoneNumberConfirmedAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)
    name: GetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).GetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}.SetPhoneNumberConfirmedAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{`0}.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetPhoneNumberConfirmedAsync
    nameWithType: IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
    fullName: Microsoft.AspNetCore.Identity.IUserPhoneNumberStore(Of TUser).SetPhoneNumberConfirmedAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.AddToRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: AddToRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.AddToRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).AddToRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore<TUser>.AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: AddToRoleAsync
    nameWithType: IUserRoleStore(Of TUser).AddToRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).AddToRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.RemoveFromRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveFromRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore<TUser>.RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: RemoveFromRoleAsync
    nameWithType: IUserRoleStore(Of TUser).RemoveFromRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).RemoveFromRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetRolesAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetRolesAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<String>>
  nameWithType: Task<IList<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: Task(Of IList(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.String))
  name.vb: Task(Of IList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRolesAsync(TUser, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetRolesAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetRolesAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore<TUser>.GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)
    name: GetRolesAsync
    nameWithType: IUserRoleStore(Of TUser).GetRolesAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.IsInRoleAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: IsInRoleAsync(TUser, String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.IsInRoleAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).IsInRoleAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore<TUser>.IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)
    name: IsInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).IsInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).IsInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.SetSecurityStampAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetSecurityStampAsync(TUser, String, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).SetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}.GetSecurityStampAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore{`0}.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserSecurityStampStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetSecurityStampAsync(TUser, CancellationToken)
  nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore<TUser>.GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)
    name: GetSecurityStampAsync
    nameWithType: IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
    fullName: Microsoft.AspNetCore.Identity.IUserSecurityStampStore(Of TUser).GetSecurityStampAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.SetTwoFactorEnabledAsync({TUser},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
  isExternal: true
  name: SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)
    name: SetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).SetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}.GetTwoFactorEnabledAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore{`0}.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetTwoFactorEnabledAsync(TUser, CancellationToken)
  nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)
    name: GetTwoFactorEnabledAsync
    nameWithType: IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorStore(Of TUser).GetTwoFactorEnabledAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.GetNormalizedUserNameAsync({TUser},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).GetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}.SetNormalizedUserNameAsync({TUser},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore{`0}.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedUserNameAsync
    nameWithType: IUserStore(Of TUser).SetNormalizedUserNameAsync
    fullName: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore{`0}.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserRoleStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TUser>>
  nameWithType: Task<IList<TUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser>>
  nameWithType.vb: Task(Of IList(Of TUser))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TUser))
  name.vb: Task(Of IList(Of TUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersInRoleAsync(String, CancellationToken)
  nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserRoleStore(Of TUser).GetUsersInRoleAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore<TUser>.GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)
    name: GetUsersInRoleAsync
    nameWithType: IUserRoleStore(Of TUser).GetUsersInRoleAsync
    fullName: Microsoft.AspNetCore.Identity.IUserRoleStore(Of TUser).GetUsersInRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore{`0}.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserClaimStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: GetUsersForClaimAsync(Claim, CancellationToken)
  nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync(Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IUserClaimStore(Of TUser).GetUsersForClaimAsync(Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore<TUser>.GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: GetUsersForClaimAsync
    nameWithType: IUserClaimStore(Of TUser).GetUsersForClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimStore(Of TUser).GetUsersForClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TRole}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRole>
  nameWithType: Task<TRole>
  fullName: System.Threading.Tasks.Task<TRole>
  nameWithType.vb: Task(Of TRole)
  fullname.vb: System.Threading.Tasks.Task(Of TRole)
  name.vb: Task(Of TRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.SetTokenAsync({TUser},System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetTokenAsync(TUser, String, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, String, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync(TUser, System.String, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)
    name: SetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).SetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.RemoveTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: RemoveTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).RemoveTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}.GetTokenAsync({TUser},System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{`0}.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: GetTokenAsync(TUser, String, String, CancellationToken)
  nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, String, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, String, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync(TUser, System.String, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore<TUser>.GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)
    name: GetTokenAsync
    nameWithType: IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore(Of TUser).GetTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}.Roles
  parent: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
- uid: System.Linq.IQueryable{{TRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TRole>
  nameWithType: IQueryable<TRole>
  fullName: System.Linq.IQueryable<TRole>
  nameWithType.vb: IQueryable(Of TRole)
  fullname.vb: System.Linq.IQueryable(Of TRole)
  name.vb: IQueryable(Of TRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  isExternal: false
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
