### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  commentId: T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  id: RoleStore`5
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  children:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.#ctor(`1,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AutoSaveChanges
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Context
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdFromString(System.String)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdToString(`2)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateRoleClaim(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Dispose
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ErrorDescriber
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetClaimsAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Roles
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ThrowIfDisposed
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.UpdateAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleStore
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new instance of a persistence store for roles.\n"
  example: []
  syntax:
    content: 'public abstract class RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim> : IQueryableRoleStore<TRole>, IRoleClaimStore<TRole>, IRoleStore<TRole>, IDisposable where TRole : IdentityRole<TKey, TUserRole, TRoleClaim> where TContext : DbContext where TKey : IEquatable<TKey> where TUserRole : IdentityUserRole<TKey> where TRoleClaim : IdentityRoleClaim<TKey>'
    content.vb: >-
      Public MustInherit Class RoleStore(Of TRole As IdentityRole(Of TKey, TUserRole, TRoleClaim), TContext As DbContext, TKey As IEquatable(Of TKey), TUserRole As IdentityUserRole(Of TKey), TRoleClaim As IdentityRoleClaim(Of TKey))
          Implements IQueryableRoleStore(Of TRole), IRoleClaimStore(Of TRole), IRoleStore(Of TRole), IDisposable
    typeParameters:
    - id: TRole
      description: The type of the class representing a role.
    - id: TContext
      description: The type of the data context class used to access the store.
    - id: TKey
      description: The type of the primary key for a role.
    - id: TUserRole
      description: The type of the class representing a user role.
    - id: TRoleClaim
      description: The type of the class representing a role claim.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim)
  name.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.#ctor(`1,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.#ctor(`1,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  id: '#ctor(`1,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)'
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: RoleStore(TContext, IdentityErrorDescriber)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.RoleStore(TContext, IdentityErrorDescriber)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.RoleStore(TContext, Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: public RoleStore(TContext context, IdentityErrorDescriber describer = null)
    content.vb: Public Sub New(context As TContext, describer As IdentityErrorDescriber = Nothing)
    parameters:
    - id: context
      type: '{TContext}'
    - id: describer
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).RoleStore(TContext, IdentityErrorDescriber)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).RoleStore(TContext, Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Context
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Context
  id: Context
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Context
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Context
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the database context for this store.\n"
  example: []
  syntax:
    content: public TContext Context { get; }
    content.vb: Public ReadOnly Property Context As TContext
    parameters: []
    return:
      type: '{TContext}'
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Context
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Context
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ErrorDescriber
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ErrorDescriber
  id: ErrorDescriber
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: ErrorDescriber
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ErrorDescriber
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ErrorDescriber
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets the <xref href=\"Microsoft.AspNetCore.Identity.IdentityErrorDescriber\" data-throw-if-not-resolved=\"false\"></xref> for any error that occurred with the current operation.\n"
  example: []
  syntax:
    content: public IdentityErrorDescriber ErrorDescriber { get; set; }
    content.vb: Public Property ErrorDescriber As IdentityErrorDescriber
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ErrorDescriber
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ErrorDescriber
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AutoSaveChanges
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AutoSaveChanges
  id: AutoSaveChanges
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: AutoSaveChanges
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.AutoSaveChanges
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.AutoSaveChanges
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AutoSaveChanges
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 105
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.\n"
  example: []
  syntax:
    content: public bool AutoSaveChanges { get; set; }
    content.vb: Public Property AutoSaveChanges As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if changes should be automatically persisted, otherwise false.\n"
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).AutoSaveChanges
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).AutoSaveChanges
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.CreateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 124
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a new role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function CreateAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to create in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).CreateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).CreateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.UpdateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 143
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nUpdates a role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function UpdateAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to update in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).UpdateAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).UpdateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.DeleteAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 171
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDeletes a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function DeleteAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to delete from the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).DeleteAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).DeleteAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  id: GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleIdAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 197
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the ID for a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRoleIdAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose ID should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the ID of the role.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetRoleIdAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 214
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGets the name of a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetRoleNameAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 232
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSets the name of a role in the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken = null)
    content.vb: Public Function SetRoleNameAsync(role As TRole, roleName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be set.
    - id: roleName
      type: System.String
      description: The name of the role.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).SetRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdFromString(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdFromString(System.String)
  id: ConvertIdFromString(System.String)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: ConvertIdFromString(String)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ConvertIdFromString(String)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ConvertIdFromString(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdFromString
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 249
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <em>id</em> to a strongly typed key object.\n"
  example: []
  syntax:
    content: public virtual TKey ConvertIdFromString(string id)
    content.vb: Public Overridable Function ConvertIdFromString(id As String) As TKey
    parameters:
    - id: id
      type: System.String
      description: The id to convert.
    return:
      type: '{TKey}'
      description: An instance of <em>TKey</em> representing the provided <em>id</em>.
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ConvertIdFromString(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ConvertIdFromString(System.String)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdToString(`2)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ConvertIdToString(`2)
  id: ConvertIdToString(`2)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: ConvertIdToString(TKey)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ConvertIdToString(TKey)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ConvertIdToString(TKey)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConvertIdToString
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 263
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nConverts the provided <em>id</em> to its string representation.\n"
  example: []
  syntax:
    content: public virtual string ConvertIdToString(TKey id)
    content.vb: Public Overridable Function ConvertIdToString(id As TKey) As String
    parameters:
    - id: id
      type: '{TKey}'
      description: The id to convert.
    return:
      type: System.String
      description: An <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the provided <em>id</em>.
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ConvertIdToString(TKey)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ConvertIdToString(TKey)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 278
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds the role who has the specified ID as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<TRole> FindByIdAsync(string id, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByIdAsync(id As String, cancellationToken As CancellationToken = Nothing) As Task(Of TRole)
    parameters:
    - id: id
      type: System.String
      description: The role ID to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).FindByIdAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 292
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nFinds the role who has the specified normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<TRole> FindByNameAsync(string normalizedName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function FindByNameAsync(normalizedName As String, cancellationToken As CancellationToken = Nothing) As Task(Of TRole)
    parameters:
    - id: normalizedName
      type: System.String
      description: The normalized role name to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).FindByNameAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).FindByNameAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 305
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet a role's normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetNormalizedRoleNameAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 323
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nSet a role's normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function SetNormalizedRoleNameAsync(role As TRole, normalizedName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ThrowIfDisposed
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 335
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).ThrowIfDisposed()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 346
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nDispose the stores\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Dispose()
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.GetClaimsAsync(`0,System.Threading.CancellationToken)
  id: GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 357
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nGet the claims associated with the specified <em>role</em> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public Task<IList<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken = null)
    content.vb: Public Function GetClaimsAsync(role As TRole, cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose claims should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the claims granted to a role.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetClaimsAsync(TRole, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).GetClaimsAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 375
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nAdds the <em>claim</em> given to the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Function AddClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to add the claim to.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to add to the role.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).AddClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  id: RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimAsync
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 398
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nRemoves the <em>claim</em> given from the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken = null)
    content.vb: Public Function RemoveClaimAsync(role As TRole, claim As Claim, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to remove the claim from.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to remove from the role.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).RemoveClaimAsync(TRole, Claim, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Roles
  commentId: P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.Roles
  id: Roles
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Roles
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.Roles
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Roles
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 419
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nA navigation property for the roles the store contains.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TRole> Roles { get; }
    content.vb: Public Overridable ReadOnly Property Roles As IQueryable(Of TRole)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TRole}}
  implements:
  - Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Roles
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).Roles
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateRoleClaim(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5.CreateRoleClaim(`0,System.Security.Claims.Claim)
  id: CreateRoleClaim(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore`5
  langs:
  - csharp
  - vb
  name: CreateRoleClaim(TRole, Claim)
  nameWithType: RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.CreateRoleClaim(TRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore<TRole, TContext, TKey, TUserRole, TRoleClaim>.CreateRoleClaim(TRole, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateRoleClaim
    path: src/Microsoft.AspNetCore.Identity.EntityFrameworkCore/RoleStore.cs
    startLine: 432
  assemblies:
  - Microsoft.AspNetCore.Identity.EntityFrameworkCore
  namespace: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  summary: "\nCreates a entity representing a role claim.\n"
  example: []
  syntax:
    content: protected abstract TRoleClaim CreateRoleClaim(TRole role, Claim claim)
    content.vb: Protected MustOverride Function CreateRoleClaim(role As TRole, claim As Claim) As TRoleClaim
    parameters:
    - id: role
      type: '{TRole}'
      description: ''
    - id: claim
      type: System.Security.Claims.Claim
      description: ''
    return:
      type: '{TRoleClaim}'
      description: ''
  nameWithType.vb: RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).CreateRoleClaim(TRole, Claim)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.EntityFrameworkCore.RoleStore(Of TRole, TContext, TKey, TUserRole, TRoleClaim).CreateRoleClaim(TRole, System.Security.Claims.Claim)
references:
- uid: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  commentId: N:Microsoft.AspNetCore.Identity.EntityFrameworkCore
  isExternal: false
  name: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  nameWithType: Microsoft.AspNetCore.Identity.EntityFrameworkCore
  fullName: Microsoft.AspNetCore.Identity.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  isExternal: false
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleClaimStore`1
  isExternal: false
  name: IRoleClaimStore<TRole>
  nameWithType: IRoleClaimStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
  nameWithType.vb: IRoleClaimStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole)
  name.vb: IRoleClaimStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1
    name: IRoleClaimStore
    nameWithType: IRoleClaimStore
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore`1
  isExternal: false
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TContext}'
  commentId: '!:TContext'
  definition: TContext
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  commentId: T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
- uid: TContext
  isExternal: false
  name: TContext
  nameWithType: TContext
  fullName: TContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.CreateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRoleStore(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.UpdateAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
    name: UpdateAsync
    nameWithType: IRoleStore(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.DeleteAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRoleStore(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleIdAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
    name: GetRoleIdAsync
    nameWithType: IRoleStore(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TRole}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRole>
  nameWithType: Task<TRole>
  fullName: System.Threading.Tasks.Task<TRole>
  nameWithType.vb: Task(Of TRole)
  fullname.vb: System.Threading.Tasks.Task(Of TRole)
  name.vb: Task(Of TRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
    name: FindByIdAsync
    nameWithType: IRoleStore(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  isExternal: true
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
    name: FindByNameAsync
    nameWithType: IRoleStore(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.GetNormalizedRoleNameAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
    name: GetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).GetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}.SetNormalizedRoleNameAsync({TRole},System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore{`0}.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  isExternal: true
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
    name: SetNormalizedRoleNameAsync
    nameWithType: IRoleStore(Of TRole).SetNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.GetClaimsAsync({TRole},System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.GetClaimsAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
  isExternal: true
  name: GetClaimsAsync(TRole, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync(TRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)
    name: GetClaimsAsync
    nameWithType: IRoleClaimStore(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.AddClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: AddClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.AddClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).AddClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: AddClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}.RemoveClaimAsync({TRole},System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore{`0}.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleClaimStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
  isExternal: true
  name: RemoveClaimAsync(TRole, Claim, CancellationToken)
  nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  nameWithType.vb: IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, Claim, CancellationToken)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleClaimStore`1.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)
    name: RemoveClaimAsync
    nameWithType: IRoleClaimStore(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.IRoleClaimStore(Of TRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore{`0}.Roles
  parent: Microsoft.AspNetCore.Identity.IQueryableRoleStore{{TRole}}
  definition: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
- uid: System.Linq.IQueryable{{TRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TRole>
  nameWithType: IQueryable<TRole>
  fullName: System.Linq.IQueryable<TRole>
  nameWithType.vb: IQueryable(Of TRole)
  fullname.vb: System.Linq.IQueryable(Of TRole)
  name.vb: IQueryable(Of TRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1.Roles
  isExternal: false
  name: Roles
  nameWithType: IQueryableRoleStore<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles
  nameWithType.vb: IQueryableRoleStore(Of TRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole).Roles
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: '{TRoleClaim}'
  commentId: '!:TRoleClaim'
  definition: TRoleClaim
  name: TRoleClaim
  nameWithType: TRoleClaim
  fullName: TRoleClaim
- uid: TRoleClaim
  commentId: '!:TRoleClaim'
  isExternal: false
  name: TRoleClaim
  nameWithType: TRoleClaim
  fullName: TRoleClaim
