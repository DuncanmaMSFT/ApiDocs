### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.SignInResult
  commentId: T:Microsoft.AspNetCore.Identity.SignInResult
  id: SignInResult
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.SignInResult.Failed
  - Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut
  - Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed
  - Microsoft.AspNetCore.Identity.SignInResult.LockedOut
  - Microsoft.AspNetCore.Identity.SignInResult.NotAllowed
  - Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor
  - Microsoft.AspNetCore.Identity.SignInResult.Succeeded
  - Microsoft.AspNetCore.Identity.SignInResult.Success
  - Microsoft.AspNetCore.Identity.SignInResult.ToString
  - Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired
  langs:
  - csharp
  - vb
  name: SignInResult
  nameWithType: SignInResult
  fullName: Microsoft.AspNetCore.Identity.SignInResult
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignInResult
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRepresents the result of a sign-in operation.\n"
  example: []
  syntax:
    content: public class SignInResult
    content.vb: Public Class SignInResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.SignInResult.Succeeded
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.Succeeded
  id: Succeeded
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: Succeeded
  nameWithType: SignInResult.Succeeded
  fullName: Microsoft.AspNetCore.Identity.SignInResult.Succeeded
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Succeeded
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indication whether the sign-in was successful.\n"
  example: []
  syntax:
    content: public bool Succeeded { get; protected set; }
    content.vb: Public Property Succeeded As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if the sign-in was successful, otherwise false.
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut
  id: IsLockedOut
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: IsLockedOut
  nameWithType: SignInResult.IsLockedOut
  fullName: Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsLockedOut
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indication whether the user attempting to sign-in is locked out.\n"
  example: []
  syntax:
    content: public bool IsLockedOut { get; protected set; }
    content.vb: Public Property IsLockedOut As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if the user attempting to sign-in is locked out, otherwise false.
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed
  id: IsNotAllowed
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: IsNotAllowed
  nameWithType: SignInResult.IsNotAllowed
  fullName: Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsNotAllowed
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indication whether the user attempting to sign-in is not allowed to sign-in.\n"
  example: []
  syntax:
    content: public bool IsNotAllowed { get; protected set; }
    content.vb: Public Property IsNotAllowed As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if the user attempting to sign-in is not allowed to sign-in, otherwise false.
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor
  id: RequiresTwoFactor
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: RequiresTwoFactor
  nameWithType: SignInResult.RequiresTwoFactor
  fullName: Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequiresTwoFactor
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 40
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indication whether the user attempting to sign-in requires two factor authentication.\n"
  example: []
  syntax:
    content: public bool RequiresTwoFactor { get; protected set; }
    content.vb: Public Property RequiresTwoFactor As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if the user attempting to sign-in requires two factor authentication, otherwise false.
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.AspNetCore.Identity.SignInResult.Success
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.Success
  id: Success
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: Success
  nameWithType: SignInResult.Success
  fullName: Microsoft.AspNetCore.Identity.SignInResult.Success
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Success
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> that represents a successful sign-in.\n"
  example: []
  syntax:
    content: public static SignInResult Success { get; }
    content.vb: Public Shared ReadOnly Property Success As SignInResult
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.SignInResult
      description: A <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> that represents a successful sign-in.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.SignInResult.Failed
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.Failed
  id: Failed
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: Failed
  nameWithType: SignInResult.Failed
  fullName: Microsoft.AspNetCore.Identity.SignInResult.Failed
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Failed
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> that represents a failed sign-in.\n"
  example: []
  syntax:
    content: public static SignInResult Failed { get; }
    content.vb: Public Shared ReadOnly Property Failed As SignInResult
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.SignInResult
      description: A <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> that represents a failed sign-in.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.SignInResult.LockedOut
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.LockedOut
  id: LockedOut
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: LockedOut
  nameWithType: SignInResult.LockedOut
  fullName: Microsoft.AspNetCore.Identity.SignInResult.LockedOut
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockedOut
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 60
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> that represents a sign-in attempt that failed because \nthe user was logged out.\n"
  example: []
  syntax:
    content: public static SignInResult LockedOut { get; }
    content.vb: Public Shared ReadOnly Property LockedOut As SignInResult
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.SignInResult
      description: >-
        A <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> that represents sign-in attempt that failed due to the

        user being locked out.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.SignInResult.NotAllowed
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.NotAllowed
  id: NotAllowed
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: NotAllowed
  nameWithType: SignInResult.NotAllowed
  fullName: Microsoft.AspNetCore.Identity.SignInResult.NotAllowed
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NotAllowed
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 68
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> that represents a sign-in attempt that failed because \nthe user is not allowed to sign-in.\n"
  example: []
  syntax:
    content: public static SignInResult NotAllowed { get; }
    content.vb: Public Shared ReadOnly Property NotAllowed As SignInResult
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.SignInResult
      description: >-
        A <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> that represents sign-in attempt that failed due to the

        user is not allowed to sign-in.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired
  commentId: P:Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired
  id: TwoFactorRequired
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: TwoFactorRequired
  nameWithType: SignInResult.TwoFactorRequired
  fullName: Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TwoFactorRequired
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 76
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> that represents a sign-in attempt that needs two-factor \nauthentication.\n"
  example: []
  syntax:
    content: public static SignInResult TwoFactorRequired { get; }
    content.vb: Public Shared ReadOnly Property TwoFactorRequired As SignInResult
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.SignInResult
      description: >-
        A <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> that represents sign-in attempt that needs two-factor

        authentication.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.SignInResult.ToString
  commentId: M:Microsoft.AspNetCore.Identity.SignInResult.ToString
  id: ToString
  parent: Microsoft.AspNetCore.Identity.SignInResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SignInResult.ToString()
  fullName: Microsoft.AspNetCore.Identity.SignInResult.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ToString
    path: src/Microsoft.AspNetCore.Identity/SignInResult.cs
    startLine: 82
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nConverts the value of the current <xref href=\"Microsoft.AspNetCore.Identity.SignInResult\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of value of the current <xref href="Microsoft.AspNetCore.Identity.SignInResult" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Identity.SignInResult
  commentId: T:Microsoft.AspNetCore.Identity.SignInResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: SignInResult
  nameWithType: SignInResult
  fullName: Microsoft.AspNetCore.Identity.SignInResult
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
