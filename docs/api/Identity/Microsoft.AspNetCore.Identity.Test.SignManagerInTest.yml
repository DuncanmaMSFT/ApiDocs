### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  commentId: T:Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  id: SignManagerInTest
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanExternalSignIn(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignIn(System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignInWithNoLogger
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedEmailForPasswordSignIn(System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedPhoneNumberForPasswordSignIn(System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanResignIn(System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanTwoFactorSignIn(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.ConstructorNullChecks
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithUnknownUser
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPassword
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInRequiresVerification(System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInReturnsLockedOutWhenLockedOut
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInWorksWithNonTwoFactorStore
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberBrowserSkipsTwoFactorVerificationSignIn(System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberClientStoresUserId
  - Microsoft.AspNetCore.Identity.Test.SignManagerInTest.SignOutCallsContextResponseSignOut(System.String)
  langs:
  - csharp
  - vb
  name: SignManagerInTest
  nameWithType: SignManagerInTest
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignManagerInTest
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 19
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public class SignManagerInTest
    content.vb: Public Class SignManagerInTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.ConstructorNullChecks
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.ConstructorNullChecks
  id: ConstructorNullChecks
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: ConstructorNullChecks()
  nameWithType: SignManagerInTest.ConstructorNullChecks()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.ConstructorNullChecks()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConstructorNullChecks
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public void ConstructorNullChecks()
    content.vb: >-
      <Fact>

      Public Sub ConstructorNullChecks
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInReturnsLockedOutWhenLockedOut
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInReturnsLockedOutWhenLockedOut
  id: PasswordSignInReturnsLockedOutWhenLockedOut
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInReturnsLockedOutWhenLockedOut()
  nameWithType: SignManagerInTest.PasswordSignInReturnsLockedOutWhenLockedOut()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInReturnsLockedOutWhenLockedOut()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInReturnsLockedOutWhenLockedOut
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 107
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordSignInReturnsLockedOutWhenLockedOut()
    content.vb: >-
      <Fact>

      Public Function PasswordSignInReturnsLockedOutWhenLockedOut As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignIn(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignIn(System.Boolean)
  id: CanPasswordSignIn(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanPasswordSignIn(Boolean)
  nameWithType: SignManagerInTest.CanPasswordSignIn(Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignIn(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanPasswordSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 162
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task CanPasswordSignIn(bool isPersistent)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function CanPasswordSignIn(isPersistent As Boolean) As Task
    parameters:
    - id: isPersistent
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignInWithNoLogger
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignInWithNoLogger
  id: CanPasswordSignInWithNoLogger
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanPasswordSignInWithNoLogger()
  nameWithType: SignManagerInTest.CanPasswordSignInWithNoLogger()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanPasswordSignInWithNoLogger()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanPasswordSignInWithNoLogger
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 190
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanPasswordSignInWithNoLogger()
    content.vb: >-
      <Fact>

      Public Function CanPasswordSignInWithNoLogger As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInWorksWithNonTwoFactorStore
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInWorksWithNonTwoFactorStore
  id: PasswordSignInWorksWithNonTwoFactorStore
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInWorksWithNonTwoFactorStore()
  nameWithType: SignManagerInTest.PasswordSignInWorksWithNonTwoFactorStore()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInWorksWithNonTwoFactorStore()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInWorksWithNonTwoFactorStore
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 217
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordSignInWorksWithNonTwoFactorStore()
    content.vb: >-
      <Fact>

      Public Function PasswordSignInWorksWithNonTwoFactorStore As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInRequiresVerification(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInRequiresVerification(System.Boolean)
  id: PasswordSignInRequiresVerification(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInRequiresVerification(Boolean)
  nameWithType: SignManagerInTest.PasswordSignInRequiresVerification(Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInRequiresVerification(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInRequiresVerification
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 244
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task PasswordSignInRequiresVerification(bool supportsLockout)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function PasswordSignInRequiresVerification(supportsLockout As Boolean) As Task
    parameters:
    - id: supportsLockout
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanExternalSignIn(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanExternalSignIn(System.Boolean,System.Boolean)
  id: CanExternalSignIn(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanExternalSignIn(Boolean, Boolean)
  nameWithType: SignManagerInTest.CanExternalSignIn(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanExternalSignIn(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanExternalSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 285
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true, true})]

      [InlineData(new object[]{true, false})]

      [InlineData(new object[]{false, true})]

      [InlineData(new object[]{false, false})]

      public Task CanExternalSignIn(bool isPersistent, bool supportsLockout)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True, True})>

      <InlineData(New Object() {True, False})>

      <InlineData(New Object() {False, True})>

      <InlineData(New Object() {False, False})>

      Public Function CanExternalSignIn(isPersistent As Boolean, supportsLockout As Boolean) As Task
    parameters:
    - id: isPersistent
      type: System.Boolean
    - id: supportsLockout
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanResignIn(System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanResignIn(System.Boolean,System.Boolean)
  id: CanResignIn(System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanResignIn(Boolean, Boolean)
  nameWithType: SignManagerInTest.CanResignIn(Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanResignIn(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanResignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 320
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true, true})]

      [InlineData(new object[]{true, false})]

      [InlineData(new object[]{false, true})]

      [InlineData(new object[]{false, false})]

      public Task CanResignIn(bool isPersistent, bool externalLogin)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True, True})>

      <InlineData(New Object() {True, False})>

      <InlineData(New Object() {False, True})>

      <InlineData(New Object() {False, False})>

      Public Function CanResignIn(isPersistent As Boolean, externalLogin As Boolean) As Task
    parameters:
    - id: isPersistent
      type: System.Boolean
    - id: externalLogin
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanTwoFactorSignIn(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanTwoFactorSignIn(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  id: CanTwoFactorSignIn(System.Boolean,System.Boolean,System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanTwoFactorSignIn(Boolean, Boolean, Boolean, Boolean)
  nameWithType: SignManagerInTest.CanTwoFactorSignIn(Boolean, Boolean, Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanTwoFactorSignIn(System.Boolean, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanTwoFactorSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 362
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true, true, true, true})]

      [InlineData(new object[]{true, true, false, true})]

      [InlineData(new object[]{true, false, true, true})]

      [InlineData(new object[]{true, false, false, true})]

      [InlineData(new object[]{false, true, true, true})]

      [InlineData(new object[]{false, true, false, true})]

      [InlineData(new object[]{false, false, true, true})]

      [InlineData(new object[]{false, false, false, true})]

      [InlineData(new object[]{true, true, true, false})]

      [InlineData(new object[]{true, true, false, false})]

      [InlineData(new object[]{true, false, true, false})]

      [InlineData(new object[]{true, false, false, false})]

      [InlineData(new object[]{false, true, true, false})]

      [InlineData(new object[]{false, true, false, false})]

      [InlineData(new object[]{false, false, true, false})]

      [InlineData(new object[]{false, false, false, false})]

      public Task CanTwoFactorSignIn(bool isPersistent, bool supportsLockout, bool externalLogin, bool rememberClient)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True, True, True, True})>

      <InlineData(New Object() {True, True, False, True})>

      <InlineData(New Object() {True, False, True, True})>

      <InlineData(New Object() {True, False, False, True})>

      <InlineData(New Object() {False, True, True, True})>

      <InlineData(New Object() {False, True, False, True})>

      <InlineData(New Object() {False, False, True, True})>

      <InlineData(New Object() {False, False, False, True})>

      <InlineData(New Object() {True, True, True, False})>

      <InlineData(New Object() {True, True, False, False})>

      <InlineData(New Object() {True, False, True, False})>

      <InlineData(New Object() {True, False, False, False})>

      <InlineData(New Object() {False, True, True, False})>

      <InlineData(New Object() {False, True, False, False})>

      <InlineData(New Object() {False, False, True, False})>

      <InlineData(New Object() {False, False, False, False})>

      Public Function CanTwoFactorSignIn(isPersistent As Boolean, supportsLockout As Boolean, externalLogin As Boolean, rememberClient As Boolean) As Task
    parameters:
    - id: isPersistent
      type: System.Boolean
    - id: supportsLockout
      type: System.Boolean
    - id: externalLogin
      type: System.Boolean
    - id: rememberClient
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberClientStoresUserId
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberClientStoresUserId
  id: RememberClientStoresUserId
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: RememberClientStoresUserId()
  nameWithType: SignManagerInTest.RememberClientStoresUserId()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberClientStoresUserId()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RememberClientStoresUserId
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 437
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task RememberClientStoresUserId()
    content.vb: >-
      <Fact>

      Public Function RememberClientStoresUserId As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberBrowserSkipsTwoFactorVerificationSignIn(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberBrowserSkipsTwoFactorVerificationSignIn(System.Boolean)
  id: RememberBrowserSkipsTwoFactorVerificationSignIn(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: RememberBrowserSkipsTwoFactorVerificationSignIn(Boolean)
  nameWithType: SignManagerInTest.RememberBrowserSkipsTwoFactorVerificationSignIn(Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.RememberBrowserSkipsTwoFactorVerificationSignIn(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RememberBrowserSkipsTwoFactorVerificationSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 463
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task RememberBrowserSkipsTwoFactorVerificationSignIn(bool isPersistent)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function RememberBrowserSkipsTwoFactorVerificationSignIn(isPersistent As Boolean) As Task
    parameters:
    - id: isPersistent
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.SignOutCallsContextResponseSignOut(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.SignOutCallsContextResponseSignOut(System.String)
  id: SignOutCallsContextResponseSignOut(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: SignOutCallsContextResponseSignOut(String)
  nameWithType: SignManagerInTest.SignOutCallsContextResponseSignOut(String)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.SignOutCallsContextResponseSignOut(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignOutCallsContextResponseSignOut
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 498
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"Microsoft.AspNetCore.Identity.Authentication.Application"})]

      [InlineData(new object[]{"Foo"})]

      public Task SignOutCallsContextResponseSignOut(string authenticationScheme)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"Microsoft.AspNetCore.Identity.Authentication.Application"})>

      <InlineData(New Object() {"Foo"})>

      Public Function SignOutCallsContextResponseSignOut(authenticationScheme As String) As Task
    parameters:
    - id: authenticationScheme
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPassword
  id: PasswordSignInFailsWithWrongPassword
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInFailsWithWrongPassword()
  nameWithType: SignManagerInTest.PasswordSignInFailsWithWrongPassword()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPassword()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInFailsWithWrongPassword
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 522
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordSignInFailsWithWrongPassword()
    content.vb: >-
      <Fact>

      Public Function PasswordSignInFailsWithWrongPassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithUnknownUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithUnknownUser
  id: PasswordSignInFailsWithUnknownUser
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInFailsWithUnknownUser()
  nameWithType: SignManagerInTest.PasswordSignInFailsWithUnknownUser()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithUnknownUser()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInFailsWithUnknownUser
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 544
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordSignInFailsWithUnknownUser()
    content.vb: >-
      <Fact>

      Public Function PasswordSignInFailsWithUnknownUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout
  id: PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout()
  nameWithType: SignManagerInTest.PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout()
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 562
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout()
    content.vb: >-
      <Fact>

      Public Function PasswordSignInFailsWithWrongPasswordCanAccessFailedAndLockout As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedEmailForPasswordSignIn(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedEmailForPasswordSignIn(System.Boolean)
  id: CanRequireConfirmedEmailForPasswordSignIn(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanRequireConfirmedEmailForPasswordSignIn(Boolean)
  nameWithType: SignManagerInTest.CanRequireConfirmedEmailForPasswordSignIn(Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedEmailForPasswordSignIn(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRequireConfirmedEmailForPasswordSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 589
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task CanRequireConfirmedEmailForPasswordSignIn(bool confirmed)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function CanRequireConfirmedEmailForPasswordSignIn(confirmed As Boolean) As Task
    parameters:
    - id: confirmed
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedPhoneNumberForPasswordSignIn(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedPhoneNumberForPasswordSignIn(System.Boolean)
  id: CanRequireConfirmedPhoneNumberForPasswordSignIn(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.SignManagerInTest
  langs:
  - csharp
  - vb
  name: CanRequireConfirmedPhoneNumberForPasswordSignIn(Boolean)
  nameWithType: SignManagerInTest.CanRequireConfirmedPhoneNumberForPasswordSignIn(Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.SignManagerInTest.CanRequireConfirmedPhoneNumberForPasswordSignIn(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRequireConfirmedPhoneNumberForPasswordSignIn
    path: test/Microsoft.AspNetCore.Identity.Test/SignInManagerTest.cs
    startLine: 638
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task CanRequireConfirmedPhoneNumberForPasswordSignIn(bool confirmed)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function CanRequireConfirmedPhoneNumberForPasswordSignIn(confirmed As Boolean) As Task
    parameters:
    - id: confirmed
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
