### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  id: IUserClaimsPrincipalFactory`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  langs:
  - csharp
  - vb
  name: IUserClaimsPrincipalFactory<TUser>
  nameWithType: IUserClaimsPrincipalFactory<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IUserClaimsPrincipalFactory
    path: src/Microsoft.AspNetCore.Identity/IUserClaimsPrincipalFactory.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides an abstraction for a factory to create a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> from a user.\n"
  example: []
  syntax:
    content: >-
      public interface IUserClaimsPrincipalFactory<TUser>
          where TUser : class
    content.vb: Public Interface IUserClaimsPrincipalFactory(Of TUser As Class)
    typeParameters:
    - id: TUser
      description: The type encapsulating a user.
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser)
  name.vb: IUserClaimsPrincipalFactory(Of TUser)
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  id: CreateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser)
  nameWithType: IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/IUserClaimsPrincipalFactory.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> from an user asynchronously.\n"
  example: []
  syntax:
    content: Task<ClaimsPrincipal> CreateAsync(TUser user)
    content.vb: Function CreateAsync(user As TUser) As Task(Of ClaimsPrincipal)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create a <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> from.
    return:
      type: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous creation operation, containing the created <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
references:
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  commentId: T:System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClaimsPrincipal>
  nameWithType: Task<ClaimsPrincipal>
  fullName: System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal>
  nameWithType.vb: Task(Of ClaimsPrincipal)
  fullname.vb: System.Threading.Tasks.Task(Of System.Security.Claims.ClaimsPrincipal)
  name.vb: Task(Of ClaimsPrincipal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
