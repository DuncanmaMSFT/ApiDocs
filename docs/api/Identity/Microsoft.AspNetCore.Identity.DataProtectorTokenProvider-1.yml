### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  commentId: T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  id: DataProtectorTokenProvider`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions})
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Name
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Options
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Protector
  - Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  langs:
  - csharp
  - vb
  name: DataProtectorTokenProvider<TUser>
  nameWithType: DataProtectorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DataProtectorTokenProvider
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides protection and validation of identity tokens.\n"
  example: []
  syntax:
    content: 'public class DataProtectorTokenProvider<TUser> : IUserTwoFactorTokenProvider<TUser> where TUser : class'
    content.vb: >-
      Public Class DataProtectorTokenProvider(Of TUser As Class)
          Implements IUserTwoFactorTokenProvider(Of TUser)
    typeParameters:
    - id: TUser
      description: The type used to represent a user.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: DataProtectorTokenProvider(Of TUser)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser)
  name.vb: DataProtectorTokenProvider(Of TUser)
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions})
  commentId: M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions})
  id: '#ctor(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider,Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions})'
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: DataProtectorTokenProvider(IDataProtectionProvider, IOptions<DataProtectionTokenProviderOptions>)
  nameWithType: DataProtectorTokenProvider<TUser>.DataProtectorTokenProvider(IDataProtectionProvider, IOptions<DataProtectionTokenProviderOptions>)
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.DataProtectorTokenProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Identity.DataProtectorTokenProvider%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public DataProtectorTokenProvider(IDataProtectionProvider dataProtectionProvider, IOptions<DataProtectionTokenProviderOptions> options)
    content.vb: Public Sub New(dataProtectionProvider As IDataProtectionProvider, options As IOptions(Of DataProtectionTokenProviderOptions))
    parameters:
    - id: dataProtectionProvider
      type: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
      description: The system data protection provider.
    - id: options
      type: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions}
      description: The configured <xref href="Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).DataProtectorTokenProvider(IDataProtectionProvider, IOptions(Of DataProtectionTokenProviderOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).DataProtectorTokenProvider(Microsoft.AspNetCore.DataProtection.IDataProtectionProvider, Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions))
  name.vb: DataProtectorTokenProvider(IDataProtectionProvider, IOptions(Of DataProtectionTokenProviderOptions))
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Options
  commentId: P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Options
  id: Options
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: DataProtectorTokenProvider<TUser>.Options
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.Options
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Options
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 41
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions\" data-throw-if-not-resolved=\"false\"></xref> for this instance.\n"
  example: []
  syntax:
    content: protected DataProtectionTokenProviderOptions Options { get; }
    content.vb: Protected ReadOnly Property Options As DataProtectionTokenProviderOptions
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
      description: "\nThe <xref href=\"Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions\" data-throw-if-not-resolved=\"false\"></xref> for this instance.\n"
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).Options
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).Options
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Protector
  commentId: P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Protector
  id: Protector
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: Protector
  nameWithType: DataProtectorTokenProvider<TUser>.Protector
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.Protector
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Protector
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.DataProtection.IDataProtector\" data-throw-if-not-resolved=\"false\"></xref> for this instance.\n"
  example: []
  syntax:
    content: protected IDataProtector Protector { get; }
    content.vb: Protected ReadOnly Property Protector As IDataProtector
    parameters: []
    return:
      type: Microsoft.AspNetCore.DataProtection.IDataProtector
      description: "\nThe <xref href=\"Microsoft.AspNetCore.DataProtection.IDataProtector\" data-throw-if-not-resolved=\"false\"></xref> for this instance.\n"
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).Protector
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).Protector
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Name
  commentId: P:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.Name
  id: Name
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DataProtectorTokenProvider<TUser>.Name
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Name
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the name of this instance.\n"
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\nThe name of this instance.\n"
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).Name
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  id: GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: GenerateAsync(String, UserManager<TUser>, TUser)
  nameWithType: DataProtectorTokenProvider<TUser>.GenerateAsync(String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateAsync
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates a protected token for the specified <em>user</em> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateAsync(string purpose, UserManager<TUser> manager, TUser user)
    content.vb: Public Overridable Function GenerateAsync(purpose As String, manager As UserManager(Of TUser), user As TUser) As Task(Of String)
    parameters:
    - id: purpose
      type: System.String
      description: The purpose the token will be used for.
    - id: manager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref> to retrieve user properties from.
    - id: user
      type: '{TUser}'
      description: The <em>TUser</em> the token will be generated from.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> representing the generated token.
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).GenerateAsync(String, UserManager(Of TUser), TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: GenerateAsync(String, UserManager(Of TUser), TUser)
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  id: ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: ValidateAsync(String, String, UserManager<TUser>, TUser)
  nameWithType: DataProtectorTokenProvider<TUser>.ValidateAsync(String, String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ValidateAsync
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 101
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nValidates the protected <em>token</em> for the specified <em>user</em> and <em>purpose</em> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> ValidateAsync(string purpose, string token, UserManager<TUser> manager, TUser user)
    content.vb: Public Overridable Function ValidateAsync(purpose As String, token As String, manager As UserManager(Of TUser), user As TUser) As Task(Of Boolean)
    parameters:
    - id: purpose
      type: System.String
      description: The purpose the token was be used for.
    - id: token
      type: System.String
      description: The token to validate.
    - id: manager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref> to retrieve user properties from.
    - id: user
      type: '{TUser}'
      description: The <em>TUser</em> the token was generated for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous validation,\ncontaining true if the token is valid, otherwise false.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).ValidateAsync(String, String, UserManager(Of TUser), TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: ValidateAsync(String, String, UserManager(Of TUser), TUser)
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  id: CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  langs:
  - csharp
  - vb
  name: CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  nameWithType: DataProtectorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGenerateTwoFactorTokenAsync
    path: src/Microsoft.AspNetCore.Identity/DataProtectionTokenProvider.cs
    startLine: 159
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> indicating whether a token generated by this instance\ncan be used as a Two Factor Authentication token as an asynchronous operation.\n"
  remarks: This method will always return false for instances of <xref href="Microsoft.AspNetCore.Identity.DataProtectorTokenProvider%601" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual Task<bool> CanGenerateTwoFactorTokenAsync(UserManager<TUser> manager, TUser user)
    content.vb: Public Overridable Function CanGenerateTwoFactorTokenAsync(manager As UserManager(Of TUser), user As TUser) As Task(Of Boolean)
    parameters:
    - id: manager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref> to retrieve user properties from.
    - id: user
      type: '{TUser}'
      description: The <em>TUser</em> the token was generated for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query,\ncontaining true if a token generated by this instance can be used as a Two Factor Authentication token, otherwise false.\n"
  implements:
  - Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  nameWithType.vb: DataProtectorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  name: IUserTwoFactorTokenProvider<TUser>
  nameWithType: IUserTwoFactorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser)
  name.vb: IUserTwoFactorTokenProvider(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  isExternal: false
  name: IUserTwoFactorTokenProvider<TUser>
  nameWithType: IUserTwoFactorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser)
  name.vb: IUserTwoFactorTokenProvider(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  commentId: T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
  isExternal: false
  name: DataProtectorTokenProvider<TUser>
  nameWithType: DataProtectorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider<TUser>
  nameWithType.vb: DataProtectorTokenProvider(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider(Of TUser)
  name.vb: DataProtectorTokenProvider(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
    name: DataProtectorTokenProvider
    nameWithType: DataProtectorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1
    name: DataProtectorTokenProvider
    nameWithType: DataProtectorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.DataProtectorTokenProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
  commentId: T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: DataProtectionTokenProviderOptions
  nameWithType: DataProtectionTokenProviderOptions
  fullName: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
- uid: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  commentId: T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: true
  name: IDataProtectionProvider
  nameWithType: IDataProtectionProvider
  fullName: Microsoft.AspNetCore.DataProtection.IDataProtectionProvider
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<DataProtectionTokenProviderOptions>
  nameWithType: IOptions<DataProtectionTokenProviderOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions>
  nameWithType.vb: IOptions(Of DataProtectionTokenProviderOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions)
  name.vb: IOptions(Of DataProtectionTokenProviderOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
    name: DataProtectionTokenProviderOptions
    nameWithType: DataProtectionTokenProviderOptions
    fullName: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
    name: DataProtectionTokenProviderOptions
    nameWithType: DataProtectionTokenProviderOptions
    fullName: Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.DataProtection
  commentId: N:Microsoft.AspNetCore.DataProtection
  isExternal: false
  name: Microsoft.AspNetCore.DataProtection
  nameWithType: Microsoft.AspNetCore.DataProtection
  fullName: Microsoft.AspNetCore.DataProtection
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Microsoft.AspNetCore.DataProtection.IDataProtector
  commentId: T:Microsoft.AspNetCore.DataProtection.IDataProtector
  parent: Microsoft.AspNetCore.DataProtection
  isExternal: true
  name: IDataProtector
  nameWithType: IDataProtector
  fullName: Microsoft.AspNetCore.DataProtection.IDataProtector
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0}.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  name: GenerateAsync(String, UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.GenerateAsync(String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).GenerateAsync(String, UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: GenerateAsync(String, UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: GenerateAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.GenerateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: GenerateAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).GenerateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).GenerateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  isExternal: true
  name: GenerateAsync(String, UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.GenerateAsync(String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).GenerateAsync(String, UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).GenerateAsync(System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: GenerateAsync(String, UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: GenerateAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.GenerateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.GenerateAsync(System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: GenerateAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).GenerateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).GenerateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0}.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  name: ValidateAsync(String, String, UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.ValidateAsync(String, String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).ValidateAsync(String, String, UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: ValidateAsync(String, String, UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: ValidateAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: ValidateAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  isExternal: true
  name: ValidateAsync(String, String, UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.ValidateAsync(String, String, UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).ValidateAsync(String, String, UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).ValidateAsync(System.String, System.String, Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: ValidateAsync(String, String, UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: ValidateAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.ValidateAsync(System.String,System.String,Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: ValidateAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser})
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0}.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  parent: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  name: CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: CanGenerateTwoFactorTokenAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: CanGenerateTwoFactorTokenAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  commentId: M:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
  isExternal: false
  name: CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  nameWithType: IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(UserManager<TUser>, TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser)
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser)
  name.vb: CanGenerateTwoFactorTokenAsync(UserManager(Of TUser), TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: CanGenerateTwoFactorTokenAsync
    nameWithType: IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0)
    name: CanGenerateTwoFactorTokenAsync
    nameWithType: IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser).CanGenerateTwoFactorTokenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
