### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.PasswordOptions
  commentId: T:Microsoft.AspNetCore.Identity.PasswordOptions
  id: PasswordOptions
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit
  - Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength
  - Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase
  - Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric
  - Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase
  langs:
  - csharp
  - vb
  name: PasswordOptions
  nameWithType: PasswordOptions
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordOptions
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 8
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSpecifies options for password requirements.\n"
  example: []
  syntax:
    content: public class PasswordOptions
    content.vb: Public Class PasswordOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength
  commentId: P:Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength
  id: RequiredLength
  parent: Microsoft.AspNetCore.Identity.PasswordOptions
  langs:
  - csharp
  - vb
  name: RequiredLength
  nameWithType: PasswordOptions.RequiredLength
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequiredLength
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets the minimum length a password must be.\n"
  remarks: "\nThis defaults to 6.\n"
  example: []
  syntax:
    content: public int RequiredLength { get; set; }
    content.vb: Public Property RequiredLength As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric
  commentId: P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric
  id: RequireNonAlphanumeric
  parent: Microsoft.AspNetCore.Identity.PasswordOptions
  langs:
  - csharp
  - vb
  name: RequireNonAlphanumeric
  nameWithType: PasswordOptions.RequireNonAlphanumeric
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequireNonAlphanumeric
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets a flag indicating if passwords must contain a non-alphanumeric character.\n"
  remarks: "\nThis defaults to true.\n"
  example: []
  syntax:
    content: public bool RequireNonAlphanumeric { get; set; }
    content.vb: Public Property RequireNonAlphanumeric As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if passwords must contain a non-alphanumeric character, otherwise false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase
  commentId: P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase
  id: RequireLowercase
  parent: Microsoft.AspNetCore.Identity.PasswordOptions
  langs:
  - csharp
  - vb
  name: RequireLowercase
  nameWithType: PasswordOptions.RequireLowercase
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequireLowercase
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 34
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets a flag indicating if passwords must contain a lower case ASCII character.\n"
  remarks: "\nThis defaults to true.\n"
  example: []
  syntax:
    content: public bool RequireLowercase { get; set; }
    content.vb: Public Property RequireLowercase As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if passwords must contain a lower case ASCII character.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase
  commentId: P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase
  id: RequireUppercase
  parent: Microsoft.AspNetCore.Identity.PasswordOptions
  langs:
  - csharp
  - vb
  name: RequireUppercase
  nameWithType: PasswordOptions.RequireUppercase
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequireUppercase
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 43
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets a flag indicating if passwords must contain a upper case ASCII character.\n"
  remarks: "\nThis defaults to true.\n"
  example: []
  syntax:
    content: public bool RequireUppercase { get; set; }
    content.vb: Public Property RequireUppercase As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if passwords must contain a upper case ASCII character.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit
  commentId: P:Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit
  id: RequireDigit
  parent: Microsoft.AspNetCore.Identity.PasswordOptions
  langs:
  - csharp
  - vb
  name: RequireDigit
  nameWithType: PasswordOptions.RequireDigit
  fullName: Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RequireDigit
    path: src/Microsoft.AspNetCore.Identity/PasswordOptions.cs
    startLine: 52
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets a flag indicating if passwords must contain a digit.\n"
  remarks: "\nThis defaults to true.\n"
  example: []
  syntax:
    content: public bool RequireDigit { get; set; }
    content.vb: Public Property RequireDigit As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if passwords must contain a digit.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
