### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.IUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore`1
  id: IUserStore`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IUserStore
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides an abstraction for a store which manages user accounts.\n"
  example: []
  syntax:
    content: 'public interface IUserStore<TUser> : IDisposable where TUser : class'
    content.vb: >-
      Public Interface IUserStore(Of TUser As Class)
          Inherits IDisposable
    typeParameters:
    - id: TUser
      description: The type encapsulating a user.
  inheritedMembers:
  - System.IDisposable.Dispose
  nameWithType.vb: IUserStore(Of TUser)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)
  id: GetUserIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserIdAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserIdAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the user identifier for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: Task<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function GetUserIdAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose identifier should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the identifier for the specified <em>user</em>.
  nameWithType.vb: IUserStore(Of TUser).GetUserIdAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserIdAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: Task<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function GetUserNameAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the name for the specified <em>user</em>.
  nameWithType.vb: IUserStore(Of TUser).GetUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the given <em>userName</em> for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken)
    content.vb: Function SetUserNameAsync(user As TUser, userName As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: userName
      type: System.String
      description: The user name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: IUserStore(Of TUser).SetUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: GetNormalizedUserNameAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 46
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the normalized user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: Task<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function GetNormalizedUserNameAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the normalized user name for the specified <em>user</em>.
  nameWithType.vb: IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).GetNormalizedUserNameAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  nameWithType: IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the given normalized name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken)
    content.vb: Function SetNormalizedUserNameAsync(user As TUser, normalizedName As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).SetNormalizedUserNameAsync(TUser, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.CreateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates the specified <em>user</em> in the user store.\n"
  example: []
  syntax:
    content: Task<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function CreateAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the creation operation.
  nameWithType.vb: IUserStore(Of TUser).CreateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).CreateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.UpdateAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the specified <em>user</em> in the user store.\n"
  example: []
  syntax:
    content: Task<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function UpdateAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to update.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
  nameWithType.vb: IUserStore(Of TUser).UpdateAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).UpdateAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser, CancellationToken)
  nameWithType: IUserStore<TUser>.DeleteAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nDeletes the specified <em>user</em> from the user store.\n"
  example: []
  syntax:
    content: Task<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken)
    content.vb: Function DeleteAsync(user As TUser, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the update operation.
  nameWithType.vb: IUserStore(Of TUser).DeleteAsync(TUser, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).DeleteAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 89
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds and returns a user, if any, who has the specified <em>userId</em>.\n"
  example: []
  syntax:
    content: Task<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken)
    content.vb: Function FindByIdAsync(userId As String, cancellationToken As CancellationToken) As Task(Of TUser)
    parameters:
    - id: userId
      type: System.String
      description: The user ID to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>userId</em> if it exists.\n"
  nameWithType.vb: IUserStore(Of TUser).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IUserStore`1
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IUserStore<TUser>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity/IUserStore.cs
    startLine: 99
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds and returns a user, if any, who has the specified normalized user name.\n"
  example: []
  syntax:
    content: Task<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken)
    content.vb: Function FindByNameAsync(normalizedUserName As String, cancellationToken As CancellationToken) As Task(Of TUser)
    parameters:
    - id: normalizedUserName
      type: System.String
      description: The normalized user name to search for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>normalizedUserName</em> if it exists.\n"
  nameWithType.vb: IUserStore(Of TUser).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser).FindByNameAsync(System.String, System.Threading.CancellationToken)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullname.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
