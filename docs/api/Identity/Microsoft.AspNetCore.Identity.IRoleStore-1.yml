### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore`1
  id: IRoleStore`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  type: Interface
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IRoleStore
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 13
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides an abstraction for a storage and management of roles.\n"
  example: []
  syntax:
    content: 'public interface IRoleStore<TRole> : IDisposable where TRole : class'
    content.vb: >-
      Public Interface IRoleStore(Of TRole As Class)
          Inherits IDisposable
    typeParameters:
    - id: TRole
      description: The type that represents a role.
  inheritedMembers:
  - System.IDisposable.Dispose
  nameWithType.vb: IRoleStore(Of TRole)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.CreateAsync(`0,System.Threading.CancellationToken)
  id: CreateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.CreateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates a new role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function CreateAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to create in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  nameWithType.vb: IRoleStore(Of TRole).CreateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).CreateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.UpdateAsync(`0,System.Threading.CancellationToken)
  id: UpdateAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.UpdateAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates a role in a store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function UpdateAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to update in the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  nameWithType.vb: IRoleStore(Of TRole).UpdateAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).UpdateAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.DeleteAsync(`0,System.Threading.CancellationToken)
  id: DeleteAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.DeleteAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nDeletes a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function DeleteAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to delete from the store.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that represents the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the asynchronous query.
  nameWithType.vb: IRoleStore(Of TRole).DeleteAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).DeleteAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleIdAsync(`0,System.Threading.CancellationToken)
  id: GetRoleIdAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: GetRoleIdAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleIdAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleIdAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 45
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the ID for a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function GetRoleIdAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose ID should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the ID of the role.
  nameWithType.vb: IRoleStore(Of TRole).GetRoleIdAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleIdAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: GetRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 53
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the name of a role from the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function GetRoleNameAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be returned.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
  nameWithType.vb: IRoleStore(Of TRole).GetRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: SetRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the name of a role in the store as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken)
    content.vb: Function SetRoleNameAsync(role As TRole, roleName As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be set.
    - id: roleName
      type: System.String
      description: The name of the role.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: IRoleStore(Of TRole).SetRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  id: GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: GetNormalizedRoleNameAsync(TRole, CancellationToken)
  nameWithType: IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetNormalizedRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGet a role's normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken)
    content.vb: Function GetNormalizedRoleNameAsync(role As TRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be retrieved.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that contains the name of the role.
  nameWithType.vb: IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).GetNormalizedRoleNameAsync(TRole, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  id: SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  nameWithType: IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetNormalizedRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSet a role's normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken)
    content.vb: Function SetNormalizedRoleNameAsync(role As TRole, normalizedName As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name should be set.
    - id: normalizedName
      type: System.String
      description: The normalized name to set
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).SetNormalizedRoleNameAsync(TRole, System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)
  id: FindByIdAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByIdAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 88
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds the role who has the specified ID as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<TRole> FindByIdAsync(string roleId, CancellationToken cancellationToken)
    content.vb: Function FindByIdAsync(roleId As String, cancellationToken As CancellationToken) As Task(Of TRole)
    parameters:
    - id: roleId
      type: System.String
      description: The role ID to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
  nameWithType.vb: IRoleStore(Of TRole).FindByIdAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByIdAsync(System.String, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.IRoleStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)
  id: FindByNameAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.IRoleStore`1
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String, CancellationToken)
  nameWithType: IRoleStore<TRole>.FindByNameAsync(String, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity/IRoleStore.cs
    startLine: 96
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds the role who has the specified normalized name as an asynchronous operation.\n"
  example: []
  syntax:
    content: Task<TRole> FindByNameAsync(string normalizedRoleName, CancellationToken cancellationToken)
    content.vb: Function FindByNameAsync(normalizedRoleName As String, cancellationToken As CancellationToken) As Task(Of TRole)
    parameters:
    - id: normalizedRoleName
      type: System.String
      description: The normalized role name to look for.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: A <xref href="System.Threading.Tasks.Task%601" data-throw-if-not-resolved="false"></xref> that result of the look up.
  nameWithType.vb: IRoleStore(Of TRole).FindByNameAsync(String, CancellationToken)
  fullName.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole).FindByNameAsync(System.String, System.Threading.CancellationToken)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{TRole}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRole>
  nameWithType: Task<TRole>
  fullName: System.Threading.Tasks.Task<TRole>
  nameWithType.vb: Task(Of TRole)
  fullname.vb: System.Threading.Tasks.Task(Of TRole)
  name.vb: Task(Of TRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
