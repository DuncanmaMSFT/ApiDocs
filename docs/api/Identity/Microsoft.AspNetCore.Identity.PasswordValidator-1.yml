### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1
  commentId: T:Microsoft.AspNetCore.Identity.PasswordValidator`1
  id: PasswordValidator`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.Describer
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.IsDigit(System.Char)
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLetterOrDigit(System.Char)
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLower(System.Char)
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.IsUpper(System.Char)
  - Microsoft.AspNetCore.Identity.PasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  langs:
  - csharp
  - vb
  name: PasswordValidator<TUser>
  nameWithType: PasswordValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidator
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides the default password policy for Identity.\n"
  example: []
  syntax:
    content: 'public class PasswordValidator<TUser> : IPasswordValidator<TUser> where TUser : class'
    content.vb: >-
      Public Class PasswordValidator(Of TUser As Class)
          Implements IPasswordValidator(Of TUser)
    typeParameters:
    - id: TUser
      description: The type that represents a user.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: PasswordValidator(Of TUser)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser)
  name.vb: PasswordValidator(Of TUser)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  id: '#ctor(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)'
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: PasswordValidator(IdentityErrorDescriber)
  nameWithType: PasswordValidator<TUser>.PasswordValidator(IdentityErrorDescriber)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.PasswordValidator(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 20
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nConstructions a new instance of <xref href=\"Microsoft.AspNetCore.Identity.PasswordValidator%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public PasswordValidator(IdentityErrorDescriber errors = null)
    content.vb: Public Sub New(errors As IdentityErrorDescriber = Nothing)
    parameters:
    - id: errors
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
      description: The <xref href="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" data-throw-if-not-resolved="false"></xref> to retrieve error text from.
  nameWithType.vb: PasswordValidator(Of TUser).PasswordValidator(IdentityErrorDescriber)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).PasswordValidator(Microsoft.AspNetCore.Identity.IdentityErrorDescriber)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.Describer
  commentId: P:Microsoft.AspNetCore.Identity.PasswordValidator`1.Describer
  id: Describer
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: Describer
  nameWithType: PasswordValidator<TUser>.Describer
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.Describer
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Describer
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Identity.IdentityErrorDescriber\" data-throw-if-not-resolved=\"false\"></xref> used to supply error text.\n"
  example: []
  syntax:
    content: public IdentityErrorDescriber Describer { get; }
    content.vb: Public ReadOnly Property Describer As IdentityErrorDescriber
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
      description: The <xref href="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" data-throw-if-not-resolved="false"></xref> used to supply error text.
  nameWithType.vb: PasswordValidator(Of TUser).Describer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).Describer
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  id: ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: ValidateAsync(UserManager<TUser>, TUser, String)
  nameWithType: PasswordValidator<TUser>.ValidateAsync(UserManager<TUser>, TUser, String)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ValidateAsync
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nValidates a password as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ValidateAsync(UserManager<TUser> manager, TUser user, string password)
    content.vb: Public Overridable Function ValidateAsync(manager As UserManager(Of TUser), user As TUser, password As String) As Task(Of IdentityResult)
    parameters:
    - id: manager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref> to retrieve the <em>user</em> properties from.
    - id: user
      type: '{TUser}'
      description: The user whose password should be validated.
    - id: password
      type: System.String
      description: The password supplied for validation
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The task object representing the asynchronous operation.
  implements:
  - Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser},System.String)
  nameWithType.vb: PasswordValidator(Of TUser).ValidateAsync(UserManager(Of TUser), TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).ValidateAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser, System.String)
  name.vb: ValidateAsync(UserManager(Of TUser), TUser, String)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.IsDigit(System.Char)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsDigit(System.Char)
  id: IsDigit(System.Char)
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: IsDigit(Char)
  nameWithType: PasswordValidator<TUser>.IsDigit(Char)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsDigit(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsDigit
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 81
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicting whether the supplied character is a digit.\n"
  example: []
  syntax:
    content: public virtual bool IsDigit(char c)
    content.vb: Public Overridable Function IsDigit(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: The character to check if it is a digit.
    return:
      type: System.Boolean
      description: True if the character is a digit, otherwise false.
  nameWithType.vb: PasswordValidator(Of TUser).IsDigit(Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).IsDigit(System.Char)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLower(System.Char)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLower(System.Char)
  id: IsLower(System.Char)
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: IsLower(Char)
  nameWithType: PasswordValidator<TUser>.IsLower(Char)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsLower(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsLower
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicting whether the supplied character is a lower case ASCII letter.\n"
  example: []
  syntax:
    content: public virtual bool IsLower(char c)
    content.vb: Public Overridable Function IsLower(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: The character to check if it is a lower case ASCII letter.
    return:
      type: System.Boolean
      description: True if the character is a lower case ASCII letter, otherwise false.
  nameWithType.vb: PasswordValidator(Of TUser).IsLower(Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).IsLower(System.Char)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.IsUpper(System.Char)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsUpper(System.Char)
  id: IsUpper(System.Char)
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: IsUpper(Char)
  nameWithType: PasswordValidator<TUser>.IsUpper(Char)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsUpper(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsUpper
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 101
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicting whether the supplied character is an upper case ASCII letter.\n"
  example: []
  syntax:
    content: public virtual bool IsUpper(char c)
    content.vb: Public Overridable Function IsUpper(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: The character to check if it is an upper case ASCII letter.
    return:
      type: System.Boolean
      description: True if the character is an upper case ASCII letter, otherwise false.
  nameWithType.vb: PasswordValidator(Of TUser).IsUpper(Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).IsUpper(System.Char)
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLetterOrDigit(System.Char)
  commentId: M:Microsoft.AspNetCore.Identity.PasswordValidator`1.IsLetterOrDigit(System.Char)
  id: IsLetterOrDigit(System.Char)
  parent: Microsoft.AspNetCore.Identity.PasswordValidator`1
  langs:
  - csharp
  - vb
  name: IsLetterOrDigit(Char)
  nameWithType: PasswordValidator<TUser>.IsLetterOrDigit(Char)
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsLetterOrDigit(System.Char)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsLetterOrDigit
    path: src/Microsoft.AspNetCore.Identity/PasswordValidator.cs
    startLine: 111
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicting whether the supplied character is an ASCII letter or digit.\n"
  example: []
  syntax:
    content: public virtual bool IsLetterOrDigit(char c)
    content.vb: Public Overridable Function IsLetterOrDigit(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: The character to check if it is an ASCII letter or digit.
    return:
      type: System.Boolean
      description: True if the character is an ASCII letter or digit, otherwise false.
  nameWithType.vb: PasswordValidator(Of TUser).IsLetterOrDigit(Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser).IsLetterOrDigit(System.Char)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IPasswordValidator{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IPasswordValidator`1
  name: IPasswordValidator<TUser>
  nameWithType: IPasswordValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>
  nameWithType.vb: IPasswordValidator(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser)
  name.vb: IPasswordValidator(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
  commentId: T:Microsoft.AspNetCore.Identity.IPasswordValidator`1
  isExternal: false
  name: IPasswordValidator<TUser>
  nameWithType: IPasswordValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>
  nameWithType.vb: IPasswordValidator(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser)
  name.vb: IPasswordValidator(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.PasswordValidator`1
  commentId: T:Microsoft.AspNetCore.Identity.PasswordValidator`1
  isExternal: false
  name: PasswordValidator<TUser>
  nameWithType: PasswordValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.PasswordValidator<TUser>
  nameWithType.vb: PasswordValidator(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.PasswordValidator(Of TUser)
  name.vb: PasswordValidator(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.PasswordValidator`1
    name: PasswordValidator
    nameWithType: PasswordValidator
    fullName: Microsoft.AspNetCore.Identity.PasswordValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.PasswordValidator`1
    name: PasswordValidator
    nameWithType: PasswordValidator
    fullName: Microsoft.AspNetCore.Identity.PasswordValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  commentId: T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{{TUser}},{TUser},System.String)
  commentId: M:Microsoft.AspNetCore.Identity.IPasswordValidator{`0}.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  parent: Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  name: ValidateAsync(UserManager<TUser>, TUser, String)
  nameWithType: IPasswordValidator<TUser>.ValidateAsync(UserManager<TUser>, TUser, String)
  fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser, System.String)
  nameWithType.vb: IPasswordValidator(Of TUser).ValidateAsync(UserManager(Of TUser), TUser, String)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser).ValidateAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser, System.String)
  name.vb: ValidateAsync(UserManager(Of TUser), TUser, String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
    name: ValidateAsync
    nameWithType: IPasswordValidator<TUser>.ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>.ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
    name: ValidateAsync
    nameWithType: IPasswordValidator(Of TUser).ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser).ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
  isExternal: true
  name: ValidateAsync(UserManager<TUser>, TUser, String)
  nameWithType: IPasswordValidator<TUser>.ValidateAsync(UserManager<TUser>, TUser, String)
  fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser>, TUser, System.String)
  nameWithType.vb: IPasswordValidator(Of TUser).ValidateAsync(UserManager(Of TUser), TUser, String)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser).ValidateAsync(Microsoft.AspNetCore.Identity.UserManager(Of TUser), TUser, System.String)
  name.vb: ValidateAsync(UserManager(Of TUser), TUser, String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
    name: ValidateAsync
    nameWithType: IPasswordValidator<TUser>.ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>.ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager{`0},`0,System.String)
    name: ValidateAsync
    nameWithType: IPasswordValidator(Of TUser).ValidateAsync
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser).ValidateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
