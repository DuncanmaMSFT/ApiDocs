### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  id: RoleManager`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.RoleManager`1.#ctor(Microsoft.AspNetCore.Identity.IRoleStore{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager{`0}},Microsoft.AspNetCore.Http.IHttpContextAccessor)
  - Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  - Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  - Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  - Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  - Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.RoleManager`1.Store
  - Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  - Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  - Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  - Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  - Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  langs:
  - csharp
  - vb
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleManager
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 18
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides the APIs for managing roles in a persistence store.\n"
  example: []
  syntax:
    content: 'public class RoleManager<TRole> : IDisposable where TRole : class'
    content.vb: >-
      Public Class RoleManager(Of TRole As Class)
          Implements IDisposable
    typeParameters:
    - id: TRole
      description: The type encapsulating a role.
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: RoleManager(Of TRole)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.#ctor(Microsoft.AspNetCore.Identity.IRoleStore{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager{`0}},Microsoft.AspNetCore.Http.IHttpContextAccessor)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.#ctor(Microsoft.AspNetCore.Identity.IRoleStore{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager{`0}},Microsoft.AspNetCore.Http.IHttpContextAccessor)
  id: '#ctor(Microsoft.AspNetCore.Identity.IRoleStore{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager{`0}},Microsoft.AspNetCore.Http.IHttpContextAccessor)'
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: RoleManager(IRoleStore<TRole>, IEnumerable<IRoleValidator<TRole>>, ILookupNormalizer, IdentityErrorDescriber, ILogger<RoleManager<TRole>>, IHttpContextAccessor)
  nameWithType: RoleManager<TRole>.RoleManager(IRoleStore<TRole>, IEnumerable<IRoleValidator<TRole>>, ILookupNormalizer, IdentityErrorDescriber, ILogger<RoleManager<TRole>>, IHttpContextAccessor)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleManager(Microsoft.AspNetCore.Identity.IRoleStore<TRole>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IRoleValidator<TRole>>, Microsoft.AspNetCore.Identity.ILookupNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.RoleManager<TRole>>, Microsoft.AspNetCore.Http.IHttpContextAccessor)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 33
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nConstructs a new instance of <xref href=\"Microsoft.AspNetCore.Identity.RoleManager%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RoleManager(IRoleStore<TRole> store, IEnumerable<IRoleValidator<TRole>> roleValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, ILogger<RoleManager<TRole>> logger, IHttpContextAccessor contextAccessor)
    content.vb: Public Sub New(store As IRoleStore(Of TRole), roleValidators As IEnumerable(Of IRoleValidator(Of TRole)), keyNormalizer As ILookupNormalizer, errors As IdentityErrorDescriber, logger As ILogger(Of RoleManager(Of TRole)), contextAccessor As IHttpContextAccessor)
    parameters:
    - id: store
      type: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
      description: The persistence store the manager will operate over.
    - id: roleValidators
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{{TRole}}}
      description: A collection of validators for roles.
    - id: keyNormalizer
      type: Microsoft.AspNetCore.Identity.ILookupNormalizer
      description: The normalizer to use when normalizing role names to keys.
    - id: errors
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
      description: The <xref href="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" data-throw-if-not-resolved="false"></xref> used to provider error messages.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager`1}
      description: The logger used to log messages, warnings and errors.
    - id: contextAccessor
      type: Microsoft.AspNetCore.Http.IHttpContextAccessor
      description: The accessor used to access the <xref href="Microsoft.AspNetCore.Http.HttpContext" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: RoleManager(Of TRole).RoleManager(IRoleStore(Of TRole), IEnumerable(Of IRoleValidator(Of TRole)), ILookupNormalizer, IdentityErrorDescriber, ILogger(Of RoleManager(Of TRole)), IHttpContextAccessor)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RoleManager(Microsoft.AspNetCore.Identity.IRoleStore(Of TRole), System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IRoleValidator(Of TRole)), Microsoft.AspNetCore.Identity.ILookupNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber, Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.RoleManager(Of TRole)), Microsoft.AspNetCore.Http.IHttpContextAccessor)
  name.vb: RoleManager(IRoleStore(Of TRole), IEnumerable(Of IRoleValidator(Of TRole)), ILookupNormalizer, IdentityErrorDescriber, ILogger(Of RoleManager(Of TRole)), IHttpContextAccessor)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Store
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Store
  id: Store
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: Store
  nameWithType: RoleManager<TRole>.Store
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Store
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Store
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the persistence store this instance operates over.\n"
  example: []
  syntax:
    content: protected IRoleStore<TRole> Store { get; }
    content.vb: Protected ReadOnly Property Store As IRoleStore(Of TRole)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
      description: The persistence store this instance operates over.
  nameWithType.vb: RoleManager(Of TRole).Store
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Store
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  id: Logger
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: RoleManager<TRole>.Logger
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Logger
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  example: []
  syntax:
    content: protected virtual ILogger Logger { get; set; }
    content.vb: Protected Overridable Property Logger As ILogger
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
      description: "\nThe <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  nameWithType.vb: RoleManager(Of TRole).Logger
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Logger
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  id: Roles
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: RoleManager<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Roles
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Roles
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 105
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets an IQueryable collection of Roles if the persistence store is an <xref href=\"Microsoft.AspNetCore.Identity.IQueryableRoleStore%601\" data-throw-if-not-resolved=\"false\"></xref>,\notherwise throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nCallers to this property should use <xref href=\"Microsoft.AspNetCore.Identity.RoleManager%601.SupportsQueryableRoles\" data-throw-if-not-resolved=\"false\"></xref> to ensure the backing role store supports \nreturning an IQueryable list of roles.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TRole> Roles { get; }
    content.vb: Public Overridable ReadOnly Property Roles As IQueryable(Of TRole)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TRole}}
      description: An IQueryable collection of Roles if the persistence store is an <xref href="Microsoft.AspNetCore.Identity.IQueryableRoleStore%601" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Thrown if the persistence store is not an <xref href="Microsoft.AspNetCore.Identity.IQueryableRoleStore%601" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: RoleManager(Of TRole).Roles
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Roles
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  id: SupportsQueryableRoles
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: SupportsQueryableRoles
  nameWithType: RoleManager<TRole>.SupportsQueryableRoles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsQueryableRoles
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsQueryableRoles
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 124
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the underlying persistence store supports returning an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> collection of roles.\n"
  example: []
  syntax:
    content: public virtual bool SupportsQueryableRoles { get; }
    content.vb: Public Overridable ReadOnly Property SupportsQueryableRoles As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the underlying persistence store supports returning an <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> collection of roles, otherwise false.\n"
  nameWithType.vb: RoleManager(Of TRole).SupportsQueryableRoles
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SupportsQueryableRoles
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  id: SupportsRoleClaims
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: SupportsRoleClaims
  nameWithType: RoleManager<TRole>.SupportsRoleClaims
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsRoleClaims
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsRoleClaims
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 139
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the underlying persistence store supports <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s for roles.\n"
  example: []
  syntax:
    content: public virtual bool SupportsRoleClaims { get; }
    content.vb: Public Overridable ReadOnly Property SupportsRoleClaims As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the underlying persistence store supports <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s for roles, otherwise false.\n"
  nameWithType.vb: RoleManager(Of TRole).SupportsRoleClaims
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SupportsRoleClaims
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  id: CreateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TRole)
  nameWithType: RoleManager<TRole>.CreateAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.CreateAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 155
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates the specified <em>role</em> in the persistence store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TRole role)
    content.vb: Public Overridable Function CreateAsync(role As TRole) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to create.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.\n"
  nameWithType.vb: RoleManager(Of TRole).CreateAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).CreateAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  id: UpdateNormalizedRoleNameAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: UpdateNormalizedRoleNameAsync(TRole)
  nameWithType: RoleManager<TRole>.UpdateNormalizedRoleNameAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateNormalizedRoleNameAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateNormalizedRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 179
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the normalized name for the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task UpdateNormalizedRoleNameAsync(TRole role)
    content.vb: Public Overridable Function UpdateNormalizedRoleNameAsync(role As TRole) As Task
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose normalized name needs to be updated.
    return:
      type: System.Threading.Tasks.Task
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.\n"
  nameWithType.vb: RoleManager(Of TRole).UpdateNormalizedRoleNameAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateNormalizedRoleNameAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(TRole)
  nameWithType: RoleManager<TRole>.UpdateAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 192
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateAsync(TRole role)
    content.vb: Public Overridable Function UpdateAsync(role As TRole) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to updated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref> for the update.\n"
  nameWithType.vb: RoleManager(Of TRole).UpdateAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  id: DeleteAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(TRole)
  nameWithType: RoleManager<TRole>.DeleteAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.DeleteAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 210
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nDeletes the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> DeleteAsync(TRole role)
    content.vb: Public Overridable Function DeleteAsync(role As TRole) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to delete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref> for the delete.\n"
  nameWithType.vb: RoleManager(Of TRole).DeleteAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).DeleteAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  id: RoleExistsAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: RoleExistsAsync(String)
  nameWithType: RoleManager<TRole>.RoleExistsAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleExistsAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleExistsAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 228
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the specified <em>roleName</em> exists.\n"
  example: []
  syntax:
    content: public virtual Task<bool> RoleExistsAsync(string roleName)
    content.vb: Public Overridable Function RoleExistsAsync(roleName As String) As Task(Of Boolean)
    parameters:
    - id: roleName
      type: System.String
      description: The role name whose existence should be checked.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing true if the role name exists, otherwise false.\n"
  nameWithType.vb: RoleManager(Of TRole).RoleExistsAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RoleExistsAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  id: NormalizeKey(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: NormalizeKey(String)
  nameWithType: RoleManager<TRole>.NormalizeKey(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.NormalizeKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NormalizeKey
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 244
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a normalized representation of the specified <em>key</em>.\n"
  example: []
  syntax:
    content: public virtual string NormalizeKey(string key)
    content.vb: Public Overridable Function NormalizeKey(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: The value to normalize.
    return:
      type: System.String
      description: A normalized representation of the specified <em>key</em>.
  nameWithType.vb: RoleManager(Of TRole).NormalizeKey(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).NormalizeKey(System.String)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  id: FindByIdAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String)
  nameWithType: RoleManager<TRole>.FindByIdAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByIdAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 257
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds the role associated with the specified <em>roleId</em> if any.\n"
  example: []
  syntax:
    content: public virtual Task<TRole> FindByIdAsync(string roleId)
    content.vb: Public Overridable Function FindByIdAsync(roleId As String) As Task(Of TRole)
    parameters:
    - id: roleId
      type: System.String
      description: The role ID whose role should be returned.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the role \nassociated with the specified <em>roleId</em>\n"
  nameWithType.vb: RoleManager(Of TRole).FindByIdAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByIdAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  id: GetRoleNameAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: GetRoleNameAsync(TRole)
  nameWithType: RoleManager<TRole>.GetRoleNameAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleNameAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 271
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the name of the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetRoleNameAsync(TRole role)
    content.vb: Public Overridable Function GetRoleNameAsync(role As TRole) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the name of the \nspecified <em>role</em>.\n"
  nameWithType.vb: RoleManager(Of TRole).GetRoleNameAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleNameAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  id: SetRoleNameAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: SetRoleNameAsync(TRole, String)
  nameWithType: RoleManager<TRole>.SetRoleNameAsync(TRole, String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SetRoleNameAsync(TRole, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetRoleNameAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 286
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the name of the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetRoleNameAsync(TRole role, string name)
    content.vb: Public Overridable Function SetRoleNameAsync(role As TRole, name As String) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose name should be set.
    - id: name
      type: System.String
      description: The name to set.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: RoleManager(Of TRole).SetRoleNameAsync(TRole, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SetRoleNameAsync(TRole, System.String)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  id: GetRoleIdAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: GetRoleIdAsync(TRole)
  nameWithType: RoleManager<TRole>.GetRoleIdAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleIdAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRoleIdAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 303
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the ID of the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetRoleIdAsync(TRole role)
    content.vb: Public Overridable Function GetRoleIdAsync(role As TRole) As Task(Of String)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose ID should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the ID of the \nspecified <em>role</em>.\n"
  nameWithType.vb: RoleManager(Of TRole).GetRoleIdAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleIdAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  id: FindByNameAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String)
  nameWithType: RoleManager<TRole>.FindByNameAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByNameAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 317
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds the role associated with the specified <em>roleName</em> if any.\n"
  example: []
  syntax:
    content: public virtual Task<TRole> FindByNameAsync(string roleName)
    content.vb: Public Overridable Function FindByNameAsync(roleName As String) As Task(Of TRole)
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to be returned.
    return:
      type: System.Threading.Tasks.Task{{TRole}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the role \nassociated with the specified <em>roleName</em>\n"
  nameWithType.vb: RoleManager(Of TRole).FindByNameAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByNameAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  id: AddClaimAsync(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: AddClaimAsync(TRole, Claim)
  nameWithType: RoleManager<TRole>.AddClaimAsync(TRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 337
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdds a claim to a role.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddClaimAsync(TRole role, Claim claim)
    content.vb: Public Overridable Function AddClaimAsync(role As TRole, claim As Claim) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to add the claim to.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to add.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: RoleManager(Of TRole).AddClaimAsync(TRole, Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  id: RemoveClaimAsync(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: RemoveClaimAsync(TRole, Claim)
  nameWithType: RoleManager<TRole>.RemoveClaimAsync(TRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 363
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves a claim from a role.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveClaimAsync(TRole role, Claim claim)
    content.vb: Public Overridable Function RemoveClaimAsync(role As TRole, claim As Claim) As Task(Of IdentityResult)
    parameters:
    - id: role
      type: '{TRole}'
      description: The role to remove the claim from.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to remove.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: RoleManager(Of TRole).RemoveClaimAsync(TRole, Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  id: GetClaimsAsync(`0)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TRole)
  nameWithType: RoleManager<TRole>.GetClaimsAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetClaimsAsync(TRole)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 384
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a list of claims associated with the specified <em>role</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IList<Claim>> GetClaimsAsync(TRole role)
    content.vb: Public Overridable Function GetClaimsAsync(role As TRole) As Task(Of IList(Of Claim))
    parameters:
    - id: role
      type: '{TRole}'
      description: The role whose claims should be returned.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s\nassociated with the specified <em>role</em>.\n"
  nameWithType.vb: RoleManager(Of TRole).GetClaimsAsync(TRole)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetClaimsAsync(TRole)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RoleManager<TRole>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 398
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReleases all resources used by the role manager.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: RoleManager(Of TRole).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose()
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: RoleManager<TRole>.Dispose(Boolean)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 408
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReleases the unmanaged resources used by the role manager and optionally releases the managed resources.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  nameWithType.vb: RoleManager(Of TRole).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose(System.Boolean)
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.RoleManager`1
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: RoleManager<TRole>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ThrowIfDisposed
    path: src/Microsoft.AspNetCore.Identity/RoleManager.cs
    startLine: 458
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  nameWithType.vb: RoleManager(Of TRole).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).ThrowIfDisposed()
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: false
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  commentId: T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
- uid: Microsoft.AspNetCore.Identity.IRoleStore{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IRoleStore`1
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{{TRole}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IRoleValidator{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IRoleValidator<TRole>>
  nameWithType: IEnumerable<IRoleValidator<TRole>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IRoleValidator<TRole>>
  nameWithType.vb: IEnumerable(Of IRoleValidator(Of TRole))
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IRoleValidator(Of TRole))
  name.vb: IEnumerable(Of IRoleValidator(Of TRole))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IRoleValidator`1
    name: IRoleValidator
    nameWithType: IRoleValidator
    fullName: Microsoft.AspNetCore.Identity.IRoleValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IRoleValidator`1
    name: IRoleValidator
    nameWithType: IRoleValidator
    fullName: Microsoft.AspNetCore.Identity.IRoleValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.ILookupNormalizer
  commentId: T:Microsoft.AspNetCore.Identity.ILookupNormalizer
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: ILookupNormalizer
  nameWithType: ILookupNormalizer
  fullName: Microsoft.AspNetCore.Identity.ILookupNormalizer
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager`1}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.RoleManager`1}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<RoleManager<TRole>>
  nameWithType: ILogger<RoleManager<TRole>>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.RoleManager<TRole>>
  nameWithType.vb: ILogger(Of RoleManager(Of TRole))
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.RoleManager(Of TRole))
  name.vb: ILogger(Of RoleManager(Of TRole))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.IHttpContextAccessor
  commentId: T:Microsoft.AspNetCore.Http.IHttpContextAccessor
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: IHttpContextAccessor
  nameWithType: IHttpContextAccessor
  fullName: Microsoft.AspNetCore.Http.IHttpContextAccessor
- uid: Microsoft.AspNetCore.Identity.IRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IRoleStore`1
  isExternal: false
  name: IRoleStore<TRole>
  nameWithType: IRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IRoleStore<TRole>
  nameWithType.vb: IRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IRoleStore(Of TRole)
  name.vb: IRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IRoleStore`1
    name: IRoleStore
    nameWithType: IRoleStore
    fullName: Microsoft.AspNetCore.Identity.IRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
  isExternal: false
  name: IQueryableRoleStore<TRole>
  nameWithType: IQueryableRoleStore<TRole>
  fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
  nameWithType.vb: IQueryableRoleStore(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.IQueryableRoleStore(Of TRole)
  name.vb: IQueryableRoleStore(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IQueryableRoleStore`1
    name: IQueryableRoleStore
    nameWithType: IQueryableRoleStore
    fullName: Microsoft.AspNetCore.Identity.IQueryableRoleStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
- uid: System.Linq.IQueryable{{TRole}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TRole>
  nameWithType: IQueryable<TRole>
  fullName: System.Linq.IQueryable<TRole>
  nameWithType.vb: IQueryable(Of TRole)
  fullname.vb: System.Linq.IQueryable(Of TRole)
  name.vb: IQueryable(Of TRole)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TRole}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRole>
  nameWithType: Task<TRole>
  fullName: System.Threading.Tasks.Task<TRole>
  nameWithType.vb: Task(Of TRole)
  fullname.vb: System.Threading.Tasks.Task(Of TRole)
  name.vb: Task(Of TRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
