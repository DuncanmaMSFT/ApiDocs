### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1
  commentId: T:Microsoft.AspNetCore.Identity.Test.TestUser`1
  id: TestUser`1
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor(System.String)
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.AccessFailedCount
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Claims
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.ConcurrencyStamp
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Email
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.EmailConfirmed
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Id
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnabled
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnd
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Logins
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedEmail
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedUserName
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.PasswordHash
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumber
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumberConfirmed
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Roles
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.SecurityStamp
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.Tokens
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.TwoFactorEnabled
  - Microsoft.AspNetCore.Identity.Test.TestUser`1.UserName
  langs:
  - csharp
  - vb
  name: TestUser<TKey>
  nameWithType: TestUser<TKey>
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>
  type: Class
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TestUser
    path: test/Shared/TestUser.cs
    startLine: 21
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      public class TestUser<TKey>
          where TKey : IEquatable<TKey>
    content.vb: Public Class TestUser(Of TKey As IEquatable(Of TKey))
    typeParameters:
    - id: TKey
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: TestUser(Of TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey)
  name.vb: TestUser(Of TKey)
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor
  commentId: M:Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: TestUser()
  nameWithType: TestUser<TKey>.TestUser()
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.TestUser()
  type: Constructor
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: test/Shared/TestUser.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public TestUser()
    content.vb: Public Sub New
  nameWithType.vb: TestUser(Of TKey).TestUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).TestUser()
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.TestUser`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: TestUser(String)
  nameWithType: TestUser<TKey>.TestUser(String)
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.TestUser(System.String)
  type: Constructor
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: test/Shared/TestUser.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public TestUser(string userName)
    content.vb: Public Sub New(userName As String)
    parameters:
    - id: userName
      type: System.String
  nameWithType.vb: TestUser(Of TKey).TestUser(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).TestUser(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Id
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Id
  id: Id
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: TestUser<TKey>.Id
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Id
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Id
    path: test/Shared/TestUser.cs
    startLine: 30
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual TKey Id { get; set; }
    content.vb: Public Overridable Property Id As TKey
    parameters: []
    return:
      type: '{TKey}'
  nameWithType.vb: TestUser(Of TKey).Id
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Id
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.UserName
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.UserName
  id: UserName
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: UserName
  nameWithType: TestUser<TKey>.UserName
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.UserName
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserName
    path: test/Shared/TestUser.cs
    startLine: 31
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual string UserName { get; set; }
    content.vb: Public Overridable Property UserName As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).UserName
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).UserName
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedUserName
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedUserName
  id: NormalizedUserName
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: NormalizedUserName
  nameWithType: TestUser<TKey>.NormalizedUserName
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.NormalizedUserName
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NormalizedUserName
    path: test/Shared/TestUser.cs
    startLine: 32
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual string NormalizedUserName { get; set; }
    content.vb: Public Overridable Property NormalizedUserName As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).NormalizedUserName
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).NormalizedUserName
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Email
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Email
  id: Email
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Email
  nameWithType: TestUser<TKey>.Email
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Email
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Email
    path: test/Shared/TestUser.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    Email\n"
  example: []
  syntax:
    content: public virtual string Email { get; set; }
    content.vb: Public Overridable Property Email As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).Email
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Email
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedEmail
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.NormalizedEmail
  id: NormalizedEmail
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: NormalizedEmail
  nameWithType: TestUser<TKey>.NormalizedEmail
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.NormalizedEmail
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NormalizedEmail
    path: test/Shared/TestUser.cs
    startLine: 39
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual string NormalizedEmail { get; set; }
    content.vb: Public Overridable Property NormalizedEmail As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).NormalizedEmail
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).NormalizedEmail
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.EmailConfirmed
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.EmailConfirmed
  id: EmailConfirmed
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: EmailConfirmed
  nameWithType: TestUser<TKey>.EmailConfirmed
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.EmailConfirmed
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: EmailConfirmed
    path: test/Shared/TestUser.cs
    startLine: 44
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    True if the email is confirmed, default is false\n"
  example: []
  syntax:
    content: public virtual bool EmailConfirmed { get; set; }
    content.vb: Public Overridable Property EmailConfirmed As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: TestUser(Of TKey).EmailConfirmed
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).EmailConfirmed
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.PasswordHash
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.PasswordHash
  id: PasswordHash
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: PasswordHash
  nameWithType: TestUser<TKey>.PasswordHash
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.PasswordHash
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordHash
    path: test/Shared/TestUser.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    The salted/hashed form of the user password\n"
  example: []
  syntax:
    content: public virtual string PasswordHash { get; set; }
    content.vb: Public Overridable Property PasswordHash As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).PasswordHash
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).PasswordHash
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.SecurityStamp
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.SecurityStamp
  id: SecurityStamp
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: SecurityStamp
  nameWithType: TestUser<TKey>.SecurityStamp
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.SecurityStamp
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SecurityStamp
    path: test/Shared/TestUser.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\nA random value that should change whenever a users credentials change (password changed, login removed)\n"
  example: []
  syntax:
    content: public virtual string SecurityStamp { get; set; }
    content.vb: Public Overridable Property SecurityStamp As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).SecurityStamp
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).SecurityStamp
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.ConcurrencyStamp
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.ConcurrencyStamp
  id: ConcurrencyStamp
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: ConcurrencyStamp
  nameWithType: TestUser<TKey>.ConcurrencyStamp
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.ConcurrencyStamp
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConcurrencyStamp
    path: test/Shared/TestUser.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\nA random value that should change whenever a user is persisted to the store\n"
  example: []
  syntax:
    content: public virtual string ConcurrencyStamp { get; set; }
    content.vb: Public Overridable Property ConcurrencyStamp As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).ConcurrencyStamp
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).ConcurrencyStamp
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumber
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumber
  id: PhoneNumber
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: PhoneNumber
  nameWithType: TestUser<TKey>.PhoneNumber
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.PhoneNumber
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PhoneNumber
    path: test/Shared/TestUser.cs
    startLine: 64
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    PhoneNumber for the user\n"
  example: []
  syntax:
    content: public virtual string PhoneNumber { get; set; }
    content.vb: Public Overridable Property PhoneNumber As String
    parameters: []
    return:
      type: System.String
  nameWithType.vb: TestUser(Of TKey).PhoneNumber
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).PhoneNumber
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumberConfirmed
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.PhoneNumberConfirmed
  id: PhoneNumberConfirmed
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: PhoneNumberConfirmed
  nameWithType: TestUser<TKey>.PhoneNumberConfirmed
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.PhoneNumberConfirmed
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PhoneNumberConfirmed
    path: test/Shared/TestUser.cs
    startLine: 69
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    True if the phone number is confirmed, default is false\n"
  example: []
  syntax:
    content: public virtual bool PhoneNumberConfirmed { get; set; }
    content.vb: Public Overridable Property PhoneNumberConfirmed As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: TestUser(Of TKey).PhoneNumberConfirmed
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).PhoneNumberConfirmed
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.TwoFactorEnabled
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.TwoFactorEnabled
  id: TwoFactorEnabled
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: TwoFactorEnabled
  nameWithType: TestUser<TKey>.TwoFactorEnabled
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.TwoFactorEnabled
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TwoFactorEnabled
    path: test/Shared/TestUser.cs
    startLine: 74
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    Is two factor enabled for the user\n"
  example: []
  syntax:
    content: public virtual bool TwoFactorEnabled { get; set; }
    content.vb: Public Overridable Property TwoFactorEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: TestUser(Of TKey).TwoFactorEnabled
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).TwoFactorEnabled
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnd
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnd
  id: LockoutEnd
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: LockoutEnd
  nameWithType: TestUser<TKey>.LockoutEnd
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.LockoutEnd
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutEnd
    path: test/Shared/TestUser.cs
    startLine: 79
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    DateTime in UTC when lockout ends, any time in the past is considered not locked out.\n"
  example: []
  syntax:
    content: public virtual DateTimeOffset? LockoutEnd { get; set; }
    content.vb: Public Overridable Property LockoutEnd As DateTimeOffset?
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
  nameWithType.vb: TestUser(Of TKey).LockoutEnd
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).LockoutEnd
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnabled
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.LockoutEnabled
  id: LockoutEnabled
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: LockoutEnabled
  nameWithType: TestUser<TKey>.LockoutEnabled
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.LockoutEnabled
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutEnabled
    path: test/Shared/TestUser.cs
    startLine: 84
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    Is lockout enabled for this user\n"
  example: []
  syntax:
    content: public virtual bool LockoutEnabled { get; set; }
    content.vb: Public Overridable Property LockoutEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  nameWithType.vb: TestUser(Of TKey).LockoutEnabled
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).LockoutEnabled
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.AccessFailedCount
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.AccessFailedCount
  id: AccessFailedCount
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: AccessFailedCount
  nameWithType: TestUser<TKey>.AccessFailedCount
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.AccessFailedCount
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AccessFailedCount
    path: test/Shared/TestUser.cs
    startLine: 89
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  summary: "\n    Used to record failures for the purposes of lockout\n"
  example: []
  syntax:
    content: public virtual int AccessFailedCount { get; set; }
    content.vb: Public Overridable Property AccessFailedCount As Integer
    parameters: []
    return:
      type: System.Int32
  nameWithType.vb: TestUser(Of TKey).AccessFailedCount
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).AccessFailedCount
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Roles
  id: Roles
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: TestUser<TKey>.Roles
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Roles
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Roles
    path: test/Shared/TestUser.cs
    startLine: 91
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual ICollection<TestUserRole<TKey>> Roles { get; }
    content.vb: Public Overridable ReadOnly Property Roles As ICollection(Of TestUserRole(Of TKey))
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserRole{{TKey}}}
  nameWithType.vb: TestUser(Of TKey).Roles
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Roles
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Claims
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Claims
  id: Claims
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Claims
  nameWithType: TestUser<TKey>.Claims
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Claims
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Claims
    path: test/Shared/TestUser.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual ICollection<TestUserClaim<TKey>> Claims { get; }
    content.vb: Public Overridable ReadOnly Property Claims As ICollection(Of TestUserClaim(Of TKey))
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserClaim{{TKey}}}
  nameWithType.vb: TestUser(Of TKey).Claims
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Claims
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Logins
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Logins
  id: Logins
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Logins
  nameWithType: TestUser<TKey>.Logins
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Logins
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Logins
    path: test/Shared/TestUser.cs
    startLine: 93
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual ICollection<TestUserLogin<TKey>> Logins { get; }
    content.vb: Public Overridable ReadOnly Property Logins As ICollection(Of TestUserLogin(Of TKey))
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserLogin{{TKey}}}
  nameWithType.vb: TestUser(Of TKey).Logins
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Logins
- uid: Microsoft.AspNetCore.Identity.Test.TestUser`1.Tokens
  commentId: P:Microsoft.AspNetCore.Identity.Test.TestUser`1.Tokens
  id: Tokens
  parent: Microsoft.AspNetCore.Identity.Test.TestUser`1
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: TestUser<TKey>.Tokens
  fullName: Microsoft.AspNetCore.Identity.Test.TestUser<TKey>.Tokens
  type: Property
  source:
    remote:
      path: test/Shared/TestUser.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Tokens
    path: test/Shared/TestUser.cs
    startLine: 94
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public virtual ICollection<TestUserToken<TKey>> Tokens { get; }
    content.vb: Public Overridable ReadOnly Property Tokens As ICollection(Of TestUserToken(Of TKey))
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserToken{{TKey}}}
  nameWithType.vb: TestUser(Of TKey).Tokens
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.Test.TestUser(Of TKey).Tokens
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserRole{{TKey}}}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserRole{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TestUserRole<TKey>>
  nameWithType: ICollection<TestUserRole<TKey>>
  fullName: System.Collections.Generic.ICollection<Microsoft.AspNetCore.Identity.Test.TestUserRole<TKey>>
  nameWithType.vb: ICollection(Of TestUserRole(Of TKey))
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.AspNetCore.Identity.Test.TestUserRole(Of TKey))
  name.vb: ICollection(Of TestUserRole(Of TKey))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserRole`1
    name: TestUserRole
    nameWithType: TestUserRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserRole
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserRole`1
    name: TestUserRole
    nameWithType: TestUserRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserRole
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserClaim{{TKey}}}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserClaim{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TestUserClaim<TKey>>
  nameWithType: ICollection<TestUserClaim<TKey>>
  fullName: System.Collections.Generic.ICollection<Microsoft.AspNetCore.Identity.Test.TestUserClaim<TKey>>
  nameWithType.vb: ICollection(Of TestUserClaim(Of TKey))
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.AspNetCore.Identity.Test.TestUserClaim(Of TKey))
  name.vb: ICollection(Of TestUserClaim(Of TKey))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserClaim`1
    name: TestUserClaim
    nameWithType: TestUserClaim
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserClaim
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserClaim`1
    name: TestUserClaim
    nameWithType: TestUserClaim
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserClaim
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserLogin{{TKey}}}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserLogin{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TestUserLogin<TKey>>
  nameWithType: ICollection<TestUserLogin<TKey>>
  fullName: System.Collections.Generic.ICollection<Microsoft.AspNetCore.Identity.Test.TestUserLogin<TKey>>
  nameWithType.vb: ICollection(Of TestUserLogin(Of TKey))
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.AspNetCore.Identity.Test.TestUserLogin(Of TKey))
  name.vb: ICollection(Of TestUserLogin(Of TKey))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserLogin`1
    name: TestUserLogin
    nameWithType: TestUserLogin
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserLogin
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserLogin`1
    name: TestUserLogin
    nameWithType: TestUserLogin
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserLogin
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserToken{{TKey}}}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.AspNetCore.Identity.Test.TestUserToken{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TestUserToken<TKey>>
  nameWithType: ICollection<TestUserToken<TKey>>
  fullName: System.Collections.Generic.ICollection<Microsoft.AspNetCore.Identity.Test.TestUserToken<TKey>>
  nameWithType.vb: ICollection(Of TestUserToken(Of TKey))
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.AspNetCore.Identity.Test.TestUserToken(Of TKey))
  name.vb: ICollection(Of TestUserToken(Of TKey))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserToken`1
    name: TestUserToken
    nameWithType: TestUserToken
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserToken
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.Test.TestUserToken`1
    name: TestUserToken
    nameWithType: TestUserToken
    fullName: Microsoft.AspNetCore.Identity.Test.TestUserToken
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
