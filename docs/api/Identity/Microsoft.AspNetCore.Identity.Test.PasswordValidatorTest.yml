### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  commentId: T:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  id: PasswordValidatorTest
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsIfTooShortTests(System.String)
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsWithoutRequiredNonAlphanumericTests(System.String)
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SucceedsWithRequiredNonAlphanumericTests(System.String)
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SuccessIfLongEnoughTests(System.String)
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.UberMixedRequiredTests(System.String,Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors)
  - Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.ValidateThrowsWithNullTest
  langs:
  - csharp
  - vb
  name: PasswordValidatorTest
  nameWithType: PasswordValidatorTest
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidatorTest
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 11
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public class PasswordValidatorTest
    content.vb: Public Class PasswordValidatorTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.ValidateThrowsWithNullTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.ValidateThrowsWithNullTest
  id: ValidateThrowsWithNullTest
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: ValidateThrowsWithNullTest()
  nameWithType: PasswordValidatorTest.ValidateThrowsWithNullTest()
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.ValidateThrowsWithNullTest()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ValidateThrowsWithNullTest
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 24
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ValidateThrowsWithNullTest()
    content.vb: >-
      <Fact>

      Public Function ValidateThrowsWithNullTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsIfTooShortTests(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsIfTooShortTests(System.String)
  id: FailsIfTooShortTests(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: FailsIfTooShortTests(String)
  nameWithType: PasswordValidatorTest.FailsIfTooShortTests(String)
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsIfTooShortTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FailsIfTooShortTests
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{""})]

      [InlineData(new object[]{"abc"})]

      [InlineData(new object[]{"abcde"})]

      public Task FailsIfTooShortTests(string input)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {""})>

      <InlineData(New Object() {"abc"})>

      <InlineData(New Object() {"abcde"})>

      Public Function FailsIfTooShortTests(input As String) As Task
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SuccessIfLongEnoughTests(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SuccessIfLongEnoughTests(System.String)
  id: SuccessIfLongEnoughTests(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: SuccessIfLongEnoughTests(String)
  nameWithType: PasswordValidatorTest.SuccessIfLongEnoughTests(String)
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SuccessIfLongEnoughTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SuccessIfLongEnoughTests
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 53
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"abcdef"})]

      [InlineData(new object[]{"aaaaaaaaaaa"})]

      public Task SuccessIfLongEnoughTests(string input)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"abcdef"})>

      <InlineData(New Object() {"aaaaaaaaaaa"})>

      Public Function SuccessIfLongEnoughTests(input As String) As Task
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsWithoutRequiredNonAlphanumericTests(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsWithoutRequiredNonAlphanumericTests(System.String)
  id: FailsWithoutRequiredNonAlphanumericTests(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: FailsWithoutRequiredNonAlphanumericTests(String)
  nameWithType: PasswordValidatorTest.FailsWithoutRequiredNonAlphanumericTests(String)
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.FailsWithoutRequiredNonAlphanumericTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FailsWithoutRequiredNonAlphanumericTests
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 67
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"a"})]

      [InlineData(new object[]{"aaaaaaaaaaa"})]

      public Task FailsWithoutRequiredNonAlphanumericTests(string input)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"a"})>

      <InlineData(New Object() {"aaaaaaaaaaa"})>

      Public Function FailsWithoutRequiredNonAlphanumericTests(input As String) As Task
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SucceedsWithRequiredNonAlphanumericTests(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SucceedsWithRequiredNonAlphanumericTests(System.String)
  id: SucceedsWithRequiredNonAlphanumericTests(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: SucceedsWithRequiredNonAlphanumericTests(String)
  nameWithType: PasswordValidatorTest.SucceedsWithRequiredNonAlphanumericTests(String)
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.SucceedsWithRequiredNonAlphanumericTests(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SucceedsWithRequiredNonAlphanumericTests
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 83
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"@"})]

      [InlineData(new object[]{"abcd@e!ld!kajfd"})]

      [InlineData(new object[]{"!!!!!!"})]

      public Task SucceedsWithRequiredNonAlphanumericTests(string input)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"@"})>

      <InlineData(New Object() {"abcd@e!ld!kajfd"})>

      <InlineData(New Object() {"!!!!!!"})>

      Public Function SucceedsWithRequiredNonAlphanumericTests(input As String) As Task
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.UberMixedRequiredTests(System.String,Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors)
  commentId: M:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.UberMixedRequiredTests(System.String,Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors)
  id: UberMixedRequiredTests(System.String,Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors)
  parent: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest
  langs:
  - csharp
  - vb
  name: UberMixedRequiredTests(String, PasswordValidatorTest.Errors)
  nameWithType: PasswordValidatorTest.UberMixedRequiredTests(String, PasswordValidatorTest.Errors)
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.UberMixedRequiredTests(System.String, Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UberMixedRequiredTests
    path: test/Microsoft.AspNetCore.Identity.Test/PasswordValidatorTest.cs
    startLine: 99
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"abcde", PasswordValidatorTest.Errors.Length | PasswordValidatorTest.Errors.Alpha | PasswordValidatorTest.Errors.Upper | PasswordValidatorTest.Errors.Digit})]

      [InlineData(new object[]{"a@B@cd", PasswordValidatorTest.Errors.Digit})]

      [InlineData(new object[]{"___", PasswordValidatorTest.Errors.Length | PasswordValidatorTest.Errors.Upper | PasswordValidatorTest.Errors.Lower | PasswordValidatorTest.Errors.Digit})]

      [InlineData(new object[]{"a_b9de", PasswordValidatorTest.Errors.Upper})]

      [InlineData(new object[]{"abcd@e!ld!kaj9Fd", PasswordValidatorTest.Errors.None})]

      [InlineData(new object[]{"aB1@df", PasswordValidatorTest.Errors.None})]

      public Task UberMixedRequiredTests(string input, PasswordValidatorTest.Errors errorMask)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"abcde", PasswordValidatorTest.Errors.Length Or PasswordValidatorTest.Errors.Alpha Or PasswordValidatorTest.Errors.Upper Or PasswordValidatorTest.Errors.Digit})>

      <InlineData(New Object() {"a@B@cd", PasswordValidatorTest.Errors.Digit})>

      <InlineData(New Object() {"___", PasswordValidatorTest.Errors.Length Or PasswordValidatorTest.Errors.Upper Or PasswordValidatorTest.Errors.Lower Or PasswordValidatorTest.Errors.Digit})>

      <InlineData(New Object() {"a_b9de", PasswordValidatorTest.Errors.Upper})>

      <InlineData(New Object() {"abcd@e!ld!kaj9Fd", PasswordValidatorTest.Errors.None})>

      <InlineData(New Object() {"aB1@df", PasswordValidatorTest.Errors.None})>

      Public Function UberMixedRequiredTests(input As String, errorMask As PasswordValidatorTest.Errors) As Task
    parameters:
    - id: input
      type: System.String
    - id: errorMask
      type: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors
  commentId: T:Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors
  parent: Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: PasswordValidatorTest.Errors
  nameWithType: PasswordValidatorTest.Errors
  fullName: Microsoft.AspNetCore.Identity.Test.PasswordValidatorTest.Errors
