### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  id: UserManager`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})
  - Microsoft.AspNetCore.Identity.UserManager`1.AccessFailedAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.UserManager`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - Microsoft.AspNetCore.Identity.UserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  - Microsoft.AspNetCore.Identity.UserManager`1.AddPasswordAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.AspNetCore.Identity.UserManager`1.ChangeEmailAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.ChangePasswordAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.CheckPasswordAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailTokenPurpose
  - Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.DeleteAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.Dispose
  - Microsoft.AspNetCore.Identity.UserManager`1.Dispose(System.Boolean)
  - Microsoft.AspNetCore.Identity.UserManager`1.FindByEmailAsync(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.FindByIdAsync(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.FindByLoginAsync(System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.FindByNameAsync(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangeEmailTokenAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangePhoneNumberTokenAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateConcurrencyStampAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateEmailConfirmationTokenAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GeneratePasswordResetTokenAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GenerateUserTokenAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetAccessFailedCountAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticationTokenAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetChangeEmailTokenPurpose(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetClaimsAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetEmailAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEnabledAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEndDateAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetLoginsAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetPhoneNumberAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetRolesAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetSecurityStampAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetTwoFactorEnabledAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUserAsync(System.Security.Claims.ClaimsPrincipal)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUserIdAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUserName(System.Security.Claims.ClaimsPrincipal)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUserNameAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUsersForClaimAsync(System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetUsersInRoleAsync(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.GetValidTwoFactorProvidersAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.HasPasswordAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.IsEmailConfirmedAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.IsInRoleAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.IsLockedOutAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.IsPhoneNumberConfirmedAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.Logger
  - Microsoft.AspNetCore.Identity.UserManager`1.NormalizeKey(System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveAuthenticationTokenAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRoleAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.AspNetCore.Identity.UserManager`1.RemoveLoginAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0,System.Threading.CancellationToken)
  - Microsoft.AspNetCore.Identity.UserManager`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.UserManager`1.ResetAccessFailedCountAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordTokenPurpose
  - Microsoft.AspNetCore.Identity.UserManager`1.SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.SetEmailAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEnabledAsync(`0,System.Boolean)
  - Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})
  - Microsoft.AspNetCore.Identity.UserManager`1.SetPhoneNumberAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.SetTwoFactorEnabledAsync(`0,System.Boolean)
  - Microsoft.AspNetCore.Identity.UserManager`1.SetUserNameAsync(`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.Store
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsQueryableUsers
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticationTokens
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserClaim
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserEmail
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLockout
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLogin
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPassword
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPhoneNumber
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserRole
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserSecurityStamp
  - Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactor
  - Microsoft.AspNetCore.Identity.UserManager`1.ThrowIfDisposed
  - Microsoft.AspNetCore.Identity.UserManager`1.UpdateAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedEmailAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedUserNameAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.UpdateSecurityStampAsync(`0)
  - Microsoft.AspNetCore.Identity.UserManager`1.Users
  - Microsoft.AspNetCore.Identity.UserManager`1.VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)
  - Microsoft.AspNetCore.Identity.UserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserManager
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 23
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides the APIs for managing user in a persistence store.\n"
  example: []
  syntax:
    content: 'public class UserManager<TUser> : IDisposable where TUser : class'
    content.vb: >-
      Public Class UserManager(Of TUser As Class)
          Implements IDisposable
    typeParameters:
    - id: TUser
      description: The type encapsulating a user.
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: UserManager(Of TUser)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordTokenPurpose
  commentId: F:Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordTokenPurpose
  id: ResetPasswordTokenPurpose
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ResetPasswordTokenPurpose
  nameWithType: UserManager<TUser>.ResetPasswordTokenPurpose
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetPasswordTokenPurpose
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetPasswordTokenPurpose
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: protected const string ResetPasswordTokenPurpose = "ResetPassword"
    content.vb: Protected Const ResetPasswordTokenPurpose As String = "ResetPassword"
    return:
      type: System.String
  nameWithType.vb: UserManager(Of TUser).ResetPasswordTokenPurpose
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ResetPasswordTokenPurpose
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailTokenPurpose
  commentId: F:Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailTokenPurpose
  id: ConfirmEmailTokenPurpose
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ConfirmEmailTokenPurpose
  nameWithType: UserManager<TUser>.ConfirmEmailTokenPurpose
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ConfirmEmailTokenPurpose
  type: Field
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfirmEmailTokenPurpose
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: protected const string ConfirmEmailTokenPurpose = "EmailConfirmation"
    content.vb: Protected Const ConfirmEmailTokenPurpose As String = "EmailConfirmation"
    return:
      type: System.String
  nameWithType.vb: UserManager(Of TUser).ConfirmEmailTokenPurpose
  modifiers.csharp:
  - protected
  - const
  modifiers.vb:
  - Protected
  - Const
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ConfirmEmailTokenPurpose
- uid: Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})
  id: '#ctor(Microsoft.AspNetCore.Identity.IUserStore{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.AspNetCore.Identity.IPasswordHasher{`0},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}},Microsoft.AspNetCore.Identity.ILookupNormalizer,Microsoft.AspNetCore.Identity.IdentityErrorDescriber,System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager{`0}})'
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: UserManager(IUserStore<TUser>, IOptions<IdentityOptions>, IPasswordHasher<TUser>, IEnumerable<IUserValidator<TUser>>, IEnumerable<IPasswordValidator<TUser>>, ILookupNormalizer, IdentityErrorDescriber, IServiceProvider, ILogger<UserManager<TUser>>)
  nameWithType: UserManager<TUser>.UserManager(IUserStore<TUser>, IOptions<IdentityOptions>, IPasswordHasher<TUser>, IEnumerable<IUserValidator<TUser>>, IEnumerable<IPasswordValidator<TUser>>, ILookupNormalizer, IdentityErrorDescriber, IServiceProvider, ILogger<UserManager<TUser>>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.UserManager(Microsoft.AspNetCore.Identity.IUserStore<TUser>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>, Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IUserValidator<TUser>>, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>>, Microsoft.AspNetCore.Identity.ILookupNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber, System.IServiceProvider, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.UserManager<TUser>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 48
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nConstructs a new instance of <xref href=\"Microsoft.AspNetCore.Identity.UserManager%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public UserManager(IUserStore<TUser> store, IOptions<IdentityOptions> optionsAccessor, IPasswordHasher<TUser> passwordHasher, IEnumerable<IUserValidator<TUser>> userValidators, IEnumerable<IPasswordValidator<TUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger<UserManager<TUser>> logger)
    content.vb: Public Sub New(store As IUserStore(Of TUser), optionsAccessor As IOptions(Of IdentityOptions), passwordHasher As IPasswordHasher(Of TUser), userValidators As IEnumerable(Of IUserValidator(Of TUser)), passwordValidators As IEnumerable(Of IPasswordValidator(Of TUser)), keyNormalizer As ILookupNormalizer, errors As IdentityErrorDescriber, services As IServiceProvider, logger As ILogger(Of UserManager(Of TUser)))
    parameters:
    - id: store
      type: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
      description: The persistence store the manager will operate over.
    - id: optionsAccessor
      type: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
      description: The accessor used to access the <xref href="Microsoft.AspNetCore.Builder.IdentityOptions" data-throw-if-not-resolved="false"></xref>.
    - id: passwordHasher
      type: Microsoft.AspNetCore.Identity.IPasswordHasher{{TUser}}
      description: The password hashing implementation to use when saving passwords.
    - id: userValidators
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{{TUser}}}
      description: A collection of <xref href="Microsoft.AspNetCore.Identity.IUserValidator%601" data-throw-if-not-resolved="false"></xref> to validate users against.
    - id: passwordValidators
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}}
      description: A collection of <xref href="Microsoft.AspNetCore.Identity.IPasswordValidator%601" data-throw-if-not-resolved="false"></xref> to validate passwords against.
    - id: keyNormalizer
      type: Microsoft.AspNetCore.Identity.ILookupNormalizer
      description: The <xref href="Microsoft.AspNetCore.Identity.ILookupNormalizer" data-throw-if-not-resolved="false"></xref> to use when generating index keys for users.
    - id: errors
      type: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
      description: The <xref href="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" data-throw-if-not-resolved="false"></xref> used to provider error messages.
    - id: services
      type: System.IServiceProvider
      description: The <xref href="System.IServiceProvider" data-throw-if-not-resolved="false"></xref> used to resolve services.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager`1}
      description: The logger used to log messages, warnings and errors.
  nameWithType.vb: UserManager(Of TUser).UserManager(IUserStore(Of TUser), IOptions(Of IdentityOptions), IPasswordHasher(Of TUser), IEnumerable(Of IUserValidator(Of TUser)), IEnumerable(Of IPasswordValidator(Of TUser)), ILookupNormalizer, IdentityErrorDescriber, IServiceProvider, ILogger(Of UserManager(Of TUser)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).UserManager(Microsoft.AspNetCore.Identity.IUserStore(Of TUser), Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions), Microsoft.AspNetCore.Identity.IPasswordHasher(Of TUser), System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IUserValidator(Of TUser)), System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser)), Microsoft.AspNetCore.Identity.ILookupNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber, System.IServiceProvider, Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.UserManager(Of TUser)))
  name.vb: UserManager(IUserStore(Of TUser), IOptions(Of IdentityOptions), IPasswordHasher(Of TUser), IEnumerable(Of IUserValidator(Of TUser)), IEnumerable(Of IPasswordValidator(Of TUser)), ILookupNormalizer, IdentityErrorDescriber, IServiceProvider, ILogger(Of UserManager(Of TUser)))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.Store
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.Store
  id: Store
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: Store
  nameWithType: UserManager<TUser>.Store
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.Store
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Store
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets or sets the persistence store the manager operates over.\n"
  example: []
  syntax:
    content: protected IUserStore<TUser> Store { get; set; }
    content.vb: Protected Property Store As IUserStore(Of TUser)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
      description: The persistence store the manager operates over.
  nameWithType.vb: UserManager(Of TUser).Store
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).Store
- uid: Microsoft.AspNetCore.Identity.UserManager`1.Logger
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.Logger
  id: Logger
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: UserManager<TUser>.Logger
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Logger
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 110
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  example: []
  syntax:
    content: protected virtual ILogger Logger { get; set; }
    content.vb: Protected Overridable Property Logger As ILogger
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
      description: "\nThe <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  nameWithType.vb: UserManager(Of TUser).Logger
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).Logger
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticationTokens
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserAuthenticationTokens
  id: SupportsUserAuthenticationTokens
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserAuthenticationTokens
  nameWithType: UserManager<TUser>.SupportsUserAuthenticationTokens
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserAuthenticationTokens
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserAuthenticationTokens
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 130
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports authentication tokens.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserAuthenticationTokens { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserAuthenticationTokens As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports  authentication tokens, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserAuthenticationTokens
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserAuthenticationTokens
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactor
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserTwoFactor
  id: SupportsUserTwoFactor
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserTwoFactor
  nameWithType: UserManager<TUser>.SupportsUserTwoFactor
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserTwoFactor
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserTwoFactor
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 145
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports two factor authentication.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserTwoFactor { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserTwoFactor As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user two factor authentication, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserTwoFactor
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserTwoFactor
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPassword
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPassword
  id: SupportsUserPassword
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserPassword
  nameWithType: UserManager<TUser>.SupportsUserPassword
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserPassword
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserPassword
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 160
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user passwords.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserPassword { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserPassword As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user passwords, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserPassword
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserPassword
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserSecurityStamp
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserSecurityStamp
  id: SupportsUserSecurityStamp
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserSecurityStamp
  nameWithType: UserManager<TUser>.SupportsUserSecurityStamp
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserSecurityStamp
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserSecurityStamp
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 175
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports security stamps.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserSecurityStamp { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserSecurityStamp As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user security stamps, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserSecurityStamp
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserSecurityStamp
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserRole
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserRole
  id: SupportsUserRole
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserRole
  nameWithType: UserManager<TUser>.SupportsUserRole
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserRole
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserRole
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 190
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user roles.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserRole { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserRole As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user roles, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserRole
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserRole
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLogin
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLogin
  id: SupportsUserLogin
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserLogin
  nameWithType: UserManager<TUser>.SupportsUserLogin
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserLogin
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserLogin
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 205
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports external logins.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserLogin { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserLogin As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports external logins, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserLogin
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserLogin
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserEmail
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserEmail
  id: SupportsUserEmail
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserEmail
  nameWithType: UserManager<TUser>.SupportsUserEmail
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserEmail
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserEmail
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 220
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user emails.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserEmail { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserEmail As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user emails, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserEmail
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserEmail
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPhoneNumber
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserPhoneNumber
  id: SupportsUserPhoneNumber
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserPhoneNumber
  nameWithType: UserManager<TUser>.SupportsUserPhoneNumber
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserPhoneNumber
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserPhoneNumber
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 235
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user telephone numbers.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserPhoneNumber { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserPhoneNumber As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user telephone numbers, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserPhoneNumber
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserPhoneNumber
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserClaim
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserClaim
  id: SupportsUserClaim
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserClaim
  nameWithType: UserManager<TUser>.SupportsUserClaim
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserClaim
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserClaim
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 250
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user claims.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserClaim { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserClaim As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user claims, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserClaim
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserClaim
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLockout
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsUserLockout
  id: SupportsUserLockout
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsUserLockout
  nameWithType: UserManager<TUser>.SupportsUserLockout
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserLockout
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsUserLockout
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 265
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports user lock-outs.\n"
  example: []
  syntax:
    content: public virtual bool SupportsUserLockout { get; }
    content.vb: Public Overridable ReadOnly Property SupportsUserLockout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports user lock-outs, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsUserLockout
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsUserLockout
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SupportsQueryableUsers
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.SupportsQueryableUsers
  id: SupportsQueryableUsers
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SupportsQueryableUsers
  nameWithType: UserManager<TUser>.SupportsQueryableUsers
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsQueryableUsers
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SupportsQueryableUsers
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 282
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the backing user store supports returning\n<xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> collections of information.\n"
  example: []
  syntax:
    content: public virtual bool SupportsQueryableUsers { get; }
    content.vb: Public Overridable ReadOnly Property SupportsQueryableUsers As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\ntrue if the backing user store supports returning <xref href=\"System.Linq.IQueryable\" data-throw-if-not-resolved=\"false\"></xref> collections of\ninformation, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).SupportsQueryableUsers
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SupportsQueryableUsers
- uid: Microsoft.AspNetCore.Identity.UserManager`1.Users
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.Users
  id: Users
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: UserManager<TUser>.Users
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.Users
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Users
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 294
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\n    Returns an IQueryable of users if the store is an IQueryableUserStore\n"
  example: []
  syntax:
    content: public virtual IQueryable<TUser> Users { get; }
    content.vb: Public Overridable ReadOnly Property Users As IQueryable(Of TUser)
    parameters: []
    return:
      type: System.Linq.IQueryable{{TUser}}
  nameWithType.vb: UserManager(Of TUser).Users
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).Users
- uid: Microsoft.AspNetCore.Identity.UserManager`1.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose
  id: Dispose
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: UserManager<TUser>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 310
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReleases all resources used by the user manager.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: UserManager(Of TUser).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).Dispose()
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUserName(System.Security.Claims.ClaimsPrincipal)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserName(System.Security.Claims.ClaimsPrincipal)
  id: GetUserName(System.Security.Claims.ClaimsPrincipal)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUserName(ClaimsPrincipal)
  nameWithType: UserManager<TUser>.GetUserName(ClaimsPrincipal)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserName(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserName
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 322
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns the Name claim value if present otherwise returns null.\n"
  remarks: The Name claim is identified by <xref href="System.Security.Claims.ClaimsIdentity.DefaultNameClaimType" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual string GetUserName(ClaimsPrincipal principal)
    content.vb: Public Overridable Function GetUserName(principal As ClaimsPrincipal) As String
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: The <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.String
      description: The Name claim value, or null if the claim is not present.
  nameWithType.vb: UserManager(Of TUser).GetUserName(ClaimsPrincipal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUserName(System.Security.Claims.ClaimsPrincipal)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserId(System.Security.Claims.ClaimsPrincipal)
  id: GetUserId(System.Security.Claims.ClaimsPrincipal)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUserId(ClaimsPrincipal)
  nameWithType: UserManager<TUser>.GetUserId(ClaimsPrincipal)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserId(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserId
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 337
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns the User ID claim value if present otherwise returns null.\n"
  remarks: The User ID claim is identified by <xref href="System.Security.Claims.ClaimTypes.NameIdentifier" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public virtual string GetUserId(ClaimsPrincipal principal)
    content.vb: Public Overridable Function GetUserId(principal As ClaimsPrincipal) As String
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: The <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.String
      description: The User ID claim value, or null if the claim is not present.
  nameWithType.vb: UserManager(Of TUser).GetUserId(ClaimsPrincipal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUserId(System.Security.Claims.ClaimsPrincipal)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUserAsync(System.Security.Claims.ClaimsPrincipal)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserAsync(System.Security.Claims.ClaimsPrincipal)
  id: GetUserAsync(System.Security.Claims.ClaimsPrincipal)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUserAsync(ClaimsPrincipal)
  nameWithType: UserManager<TUser>.GetUserAsync(ClaimsPrincipal)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserAsync(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 346
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: public virtual Task<TUser> GetUserAsync(ClaimsPrincipal principal)
    content.vb: Public Overridable Function GetUserAsync(principal As ClaimsPrincipal) As Task(Of TUser)
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
    return:
      type: System.Threading.Tasks.Task{{TUser}}
  nameWithType.vb: UserManager(Of TUser).GetUserAsync(ClaimsPrincipal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUserAsync(System.Security.Claims.ClaimsPrincipal)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateConcurrencyStampAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateConcurrencyStampAsync(`0)
  id: GenerateConcurrencyStampAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateConcurrencyStampAsync(TUser)
  nameWithType: UserManager<TUser>.GenerateConcurrencyStampAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateConcurrencyStampAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateConcurrencyStampAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 364
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates a value suitable for use in concurrency tracking.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateConcurrencyStampAsync(TUser user)
    content.vb: Public Overridable Function GenerateConcurrencyStampAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to generate the stamp for.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the security\nstamp for the specified <em>user</em>.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateConcurrencyStampAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateConcurrencyStampAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0)
  id: CreateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser)
  nameWithType: UserManager<TUser>.CreateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 378
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates the specified <em>user</em> in the backing store with no password,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TUser user)
    content.vb: Public Overridable Function CreateAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).CreateAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).CreateAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.UpdateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(TUser)
  nameWithType: UserManager<TUser>.UpdateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 405
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the specified <em>user</em> in the backing store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateAsync(TUser user)
    content.vb: Public Overridable Function UpdateAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to update.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).UpdateAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).UpdateAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.DeleteAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.DeleteAsync(`0)
  id: DeleteAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(TUser)
  nameWithType: UserManager<TUser>.DeleteAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.DeleteAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: DeleteAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 424
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nDeletes the specified <em>user</em> from the backing store.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> DeleteAsync(TUser user)
    content.vb: Public Overridable Function DeleteAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to delete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).DeleteAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).DeleteAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.FindByIdAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.FindByIdAsync(System.String)
  id: FindByIdAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: FindByIdAsync(String)
  nameWithType: UserManager<TUser>.FindByIdAsync(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByIdAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByIdAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 442
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds and returns a user, if any, who has the specified <em>userId</em>.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByIdAsync(string userId)
    content.vb: Public Overridable Function FindByIdAsync(userId As String) As Task(Of TUser)
    parameters:
    - id: userId
      type: System.String
      description: The user ID to search for.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>userId</em> if it exists.\n"
  nameWithType.vb: UserManager(Of TUser).FindByIdAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).FindByIdAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.FindByNameAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.FindByNameAsync(System.String)
  id: FindByNameAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: FindByNameAsync(String)
  nameWithType: UserManager<TUser>.FindByNameAsync(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByNameAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByNameAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 455
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nFinds and returns a user, if any, who has the specified user name.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByNameAsync(string userName)
    content.vb: Public Overridable Function FindByNameAsync(userName As String) As Task(Of TUser)
    parameters:
    - id: userName
      type: System.String
      description: The user name to search for.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the user matching the specified <em>userName</em> if it exists.\n"
  nameWithType.vb: UserManager(Of TUser).FindByNameAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).FindByNameAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.CreateAsync(`0,System.String)
  id: CreateAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser, String)
  nameWithType: UserManager<TUser>.CreateAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 476
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates the specified <em>user</em> in the backing store with given password,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> CreateAsync(TUser user, string password)
    content.vb: Public Overridable Function CreateAsync(user As TUser, password As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create.
    - id: password
      type: System.String
      description: The password for the user to hash and store.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).CreateAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).CreateAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.NormalizeKey(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.NormalizeKey(System.String)
  id: NormalizeKey(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: NormalizeKey(String)
  nameWithType: UserManager<TUser>.NormalizeKey(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.NormalizeKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NormalizeKey
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 501
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nNormalize a key (user name, email) for consistent comparisons.\n"
  example: []
  syntax:
    content: public virtual string NormalizeKey(string key)
    content.vb: Public Overridable Function NormalizeKey(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: The key to normalize.
    return:
      type: System.String
      description: A normalized value representing the specified <em>key</em>.
  nameWithType.vb: UserManager(Of TUser).NormalizeKey(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).NormalizeKey(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedUserNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedUserNameAsync(`0)
  id: UpdateNormalizedUserNameAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: UpdateNormalizedUserNameAsync(TUser)
  nameWithType: UserManager<TUser>.UpdateNormalizedUserNameAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateNormalizedUserNameAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateNormalizedUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 511
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the normalized user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task UpdateNormalizedUserNameAsync(TUser user)
    content.vb: Public Overridable Function UpdateNormalizedUserNameAsync(user As TUser) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose user name should be normalized and updated.
    return:
      type: System.Threading.Tasks.Task
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: UserManager(Of TUser).UpdateNormalizedUserNameAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).UpdateNormalizedUserNameAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUserNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserNameAsync(`0)
  id: GetUserNameAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUserNameAsync(TUser)
  nameWithType: UserManager<TUser>.GetUserNameAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserNameAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 522
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the user name for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserNameAsync(TUser user)
    content.vb: Public Overridable Function GetUserNameAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the name for the specified <em>user</em>.
  nameWithType.vb: UserManager(Of TUser).GetUserNameAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUserNameAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetUserNameAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetUserNameAsync(`0,System.String)
  id: SetUserNameAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetUserNameAsync(TUser, String)
  nameWithType: UserManager<TUser>.SetUserNameAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetUserNameAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 538
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the given <em>userName</em> for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetUserNameAsync(TUser user, string userName)
    content.vb: Public Overridable Function SetUserNameAsync(user As TUser, userName As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose name should be set.
    - id: userName
      type: System.String
      description: The user name to set.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  nameWithType.vb: UserManager(Of TUser).SetUserNameAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetUserNameAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUserIdAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUserIdAsync(`0)
  id: GetUserIdAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUserIdAsync(TUser)
  nameWithType: UserManager<TUser>.GetUserIdAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserIdAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUserIdAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 556
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the user identifier for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetUserIdAsync(TUser user)
    content.vb: Public Overridable Function GetUserIdAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose identifier should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the identifier for the specified <em>user</em>.
  nameWithType.vb: UserManager(Of TUser).GetUserIdAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUserIdAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.CheckPasswordAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.CheckPasswordAsync(`0,System.String)
  id: CheckPasswordAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: CheckPasswordAsync(TUser, String)
  nameWithType: UserManager<TUser>.CheckPasswordAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.CheckPasswordAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CheckPasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 571
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the given <em>password</em> is valid for the\nspecified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> CheckPasswordAsync(TUser user, string password)
    content.vb: Public Overridable Function CheckPasswordAsync(user As TUser, password As String) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password should be validated.
    - id: password
      type: System.String
      description: The password to validate
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: >-
        The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing true if

        the specified <em>password</em> matches the one store for the <em>user</em>,

        otherwise false.
  nameWithType.vb: UserManager(Of TUser).CheckPasswordAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).CheckPasswordAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.HasPasswordAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.HasPasswordAsync(`0)
  id: HasPasswordAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: HasPasswordAsync(TUser)
  nameWithType: UserManager<TUser>.HasPasswordAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.HasPasswordAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: HasPasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 603
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the specified <em>user</em> has a password.\n"
  example: []
  syntax:
    content: public virtual Task<bool> HasPasswordAsync(TUser user)
    content.vb: Public Overridable Function HasPasswordAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether they have a password or not.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <em>user</em> has a password\notherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).HasPasswordAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).HasPasswordAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddPasswordAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddPasswordAsync(`0,System.String)
  id: AddPasswordAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddPasswordAsync(TUser, String)
  nameWithType: UserManager<TUser>.AddPasswordAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddPasswordAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddPasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 625
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdds the <em>password</em> to the specified <em>user</em> only if the user\ndoes not already have a password.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddPasswordAsync(TUser user, string password)
    content.vb: Public Overridable Function AddPasswordAsync(user As TUser, password As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password should be set.
    - id: password
      type: System.String
      description: The password to set.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddPasswordAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddPasswordAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ChangePasswordAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePasswordAsync(`0,System.String,System.String)
  id: ChangePasswordAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ChangePasswordAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.ChangePasswordAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangePasswordAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangePasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 659
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nChanges a user's password after confirming the specified <em>currentPassword</em> is correct,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ChangePasswordAsync(TUser user, string currentPassword, string newPassword)
    content.vb: Public Overridable Function ChangePasswordAsync(user As TUser, currentPassword As String, newPassword As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password should be set.
    - id: currentPassword
      type: System.String
      description: The current password to validate before changing.
    - id: newPassword
      type: System.String
      description: The new password to set for the specified <em>user</em>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ChangePasswordAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ChangePasswordAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0,System.Threading.CancellationToken)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemovePasswordAsync(`0,System.Threading.CancellationToken)
  id: RemovePasswordAsync(`0,System.Threading.CancellationToken)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemovePasswordAsync(TUser, CancellationToken)
  nameWithType: UserManager<TUser>.RemovePasswordAsync(TUser, CancellationToken)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemovePasswordAsync(TUser, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemovePasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 691
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves a user's password.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemovePasswordAsync(TUser user, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function RemovePasswordAsync(user As TUser, cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password should be removed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601.CancellationToken" data-throw-if-not-resolved="false"></xref> used to propagate notifications that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemovePasswordAsync(TUser, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemovePasswordAsync(TUser, System.Threading.CancellationToken)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)
  id: VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore{`0},`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: VerifyPasswordAsync(IUserPasswordStore<TUser>, TUser, String)
  nameWithType: UserManager<TUser>.VerifyPasswordAsync(IUserPasswordStore<TUser>, TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>, TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyPasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 715
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a <xref href=\"Microsoft.AspNetCore.Identity.PasswordVerificationResult\" data-throw-if-not-resolved=\"false\"></xref> indicating the result of a password hash comparison.\n"
  example: []
  syntax:
    content: protected virtual Task<PasswordVerificationResult> VerifyPasswordAsync(IUserPasswordStore<TUser> store, TUser user, string password)
    content.vb: Protected Overridable Function VerifyPasswordAsync(store As IUserPasswordStore(Of TUser), user As TUser, password As String) As Task(Of PasswordVerificationResult)
    parameters:
    - id: store
      type: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
      description: The store containing a user's password.
    - id: user
      type: '{TUser}'
      description: The user whose password should be verified.
    - id: password
      type: System.String
      description: The password to verify.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.PasswordVerificationResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.PasswordVerificationResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).VerifyPasswordAsync(IUserPasswordStore(Of TUser), TUser, String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser), TUser, System.String)
  name.vb: VerifyPasswordAsync(IUserPasswordStore(Of TUser), TUser, String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetSecurityStampAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetSecurityStampAsync(`0)
  id: GetSecurityStampAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetSecurityStampAsync(TUser)
  nameWithType: UserManager<TUser>.GetSecurityStampAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetSecurityStampAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetSecurityStampAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 730
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGet the security stamp for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetSecurityStampAsync(TUser user)
    content.vb: Public Overridable Function GetSecurityStampAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be set.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the security stamp for the specified <em>user</em>.
  nameWithType.vb: UserManager(Of TUser).GetSecurityStampAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetSecurityStampAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.UpdateSecurityStampAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateSecurityStampAsync(`0)
  id: UpdateSecurityStampAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: UpdateSecurityStampAsync(TUser)
  nameWithType: UserManager<TUser>.UpdateSecurityStampAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateSecurityStampAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateSecurityStampAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 752
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRegenerates the security stamp for the specified <em>user</em>.\n"
  remarks: "\nRegenerating a security stamp will sign out any saved login for the user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateSecurityStampAsync(TUser user)
    content.vb: Public Overridable Function UpdateSecurityStampAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose security stamp should be regenerated.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).UpdateSecurityStampAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).UpdateSecurityStampAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GeneratePasswordResetTokenAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GeneratePasswordResetTokenAsync(`0)
  id: GeneratePasswordResetTokenAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GeneratePasswordResetTokenAsync(TUser)
  nameWithType: UserManager<TUser>.GeneratePasswordResetTokenAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GeneratePasswordResetTokenAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GeneratePasswordResetTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 772
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates a password reset token for the specified <em>user</em>, using\nthe configured password reset token provider.\n"
  example: []
  syntax:
    content: public virtual Task<string> GeneratePasswordResetTokenAsync(TUser user)
    content.vb: Public Overridable Function GeneratePasswordResetTokenAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to generate a password reset token for.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: >-
        The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation,

        containing a password reset token for the specified <em>user</em>.
  nameWithType.vb: UserManager(Of TUser).GeneratePasswordResetTokenAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GeneratePasswordResetTokenAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ResetPasswordAsync(`0,System.String,System.String)
  id: ResetPasswordAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ResetPasswordAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.ResetPasswordAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetPasswordAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetPasswordAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 789
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nResets the <em>user</em>'s password to the specified <em>newPassword</em> after\nvalidating the given password reset <em>token</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ResetPasswordAsync(TUser user, string token, string newPassword)
    content.vb: Public Overridable Function ResetPasswordAsync(user As TUser, token As String, newPassword As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose password should be reset.
    - id: token
      type: System.String
      description: The password reset token to verify.
    - id: newPassword
      type: System.String
      description: The new password to set if reset token verification fails.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ResetPasswordAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ResetPasswordAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.FindByLoginAsync(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.FindByLoginAsync(System.String,System.String)
  id: FindByLoginAsync(System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: FindByLoginAsync(String, String)
  nameWithType: UserManager<TUser>.FindByLoginAsync(String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByLoginAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByLoginAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 819
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRetrieves the user associated with the specified external login provider and login provider key..\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByLoginAsync(string loginProvider, string providerKey)
    content.vb: Public Overridable Function FindByLoginAsync(loginProvider As String, providerKey As String) As Task(Of TUser)
    parameters:
    - id: loginProvider
      type: System.String
      description: The login provider who provided the <em>providerKey</em>.
    - id: providerKey
      type: System.String
      description: The key provided by the <em>loginProvider</em> to identify a user.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.\n"
  nameWithType.vb: UserManager(Of TUser).FindByLoginAsync(String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).FindByLoginAsync(System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveLoginAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveLoginAsync(`0,System.String,System.String)
  id: RemoveLoginAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveLoginAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.RemoveLoginAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveLoginAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveLoginAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 845
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAttempts to remove the provided external login information from the specified <em>user</em>.\nand returns a flag indicating whether the removal succeed or not.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveLoginAsync(TUser user, string loginProvider, string providerKey)
    content.vb: Public Overridable Function RemoveLoginAsync(user As TUser, loginProvider As String, providerKey As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the login information from.
    - id: loginProvider
      type: System.String
      description: The login provide whose information should be removed.
    - id: providerKey
      type: System.String
      description: The key given by the external login provider for the specified user.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemoveLoginAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveLoginAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  id: AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddLoginAsync(TUser, UserLoginInfo)
  nameWithType: UserManager<TUser>.AddLoginAsync(TUser, UserLoginInfo)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddLoginAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 876
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdds an external <xref href=\"Microsoft.AspNetCore.Identity.UserLoginInfo\" data-throw-if-not-resolved=\"false\"></xref> to the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddLoginAsync(TUser user, UserLoginInfo login)
    content.vb: Public Overridable Function AddLoginAsync(user As TUser, login As UserLoginInfo) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the login to.
    - id: login
      type: Microsoft.AspNetCore.Identity.UserLoginInfo
      description: The external <xref href="Microsoft.AspNetCore.Identity.UserLoginInfo" data-throw-if-not-resolved="false"></xref> to add to the specified <em>user</em>.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddLoginAsync(TUser, UserLoginInfo)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddLoginAsync(TUser, Microsoft.AspNetCore.Identity.UserLoginInfo)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetLoginsAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetLoginsAsync(`0)
  id: GetLoginsAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetLoginsAsync(TUser)
  nameWithType: UserManager<TUser>.GetLoginsAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLoginsAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLoginsAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 906
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRetrieves the associated logins for the specified <param ref=\"user\" />.\n"
  example: []
  syntax:
    content: public virtual Task<IList<UserLoginInfo>> GetLoginsAsync(TUser user)
    content.vb: Public Overridable Function GetLoginsAsync(user As TUser) As Task(Of IList(Of UserLoginInfo))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose associated logins to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> for the asynchronous operation, containing a list of <xref href=\"Microsoft.AspNetCore.Identity.UserLoginInfo\" data-throw-if-not-resolved=\"false\"></xref> for the specified <em>user</em>, if any.\n"
  nameWithType.vb: UserManager(Of TUser).GetLoginsAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetLoginsAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  id: AddClaimAsync(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddClaimAsync(TUser, Claim)
  nameWithType: UserManager<TUser>.AddClaimAsync(TUser, Claim)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddClaimAsync(TUser, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 926
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdds the specified <em>claim</em> to the <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddClaimAsync(TUser user, Claim claim)
    content.vb: Public Overridable Function AddClaimAsync(user As TUser, claim As Claim) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the claim to.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to add.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddClaimAsync(TUser, Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddClaimAsync(TUser, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddClaimsAsync(TUser, IEnumerable<Claim>)
  nameWithType: UserManager<TUser>.AddClaimsAsync(TUser, IEnumerable<Claim>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddClaimsAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 950
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdds the specified <em>claims</em> to the <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddClaimsAsync(TUser user, IEnumerable<Claim> claims)
    content.vb: Public Overridable Function AddClaimsAsync(user As TUser, claims As IEnumerable(Of Claim)) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add the claim to.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: The claims to add.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddClaimsAsync(TUser, IEnumerable(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: AddClaimsAsync(TUser, IEnumerable(Of Claim))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)
  id: ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ReplaceClaimAsync(TUser, Claim, Claim)
  nameWithType: UserManager<TUser>.ReplaceClaimAsync(TUser, Claim, Claim)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ReplaceClaimAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 977
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReplaces the given <em>claim</em> on the specified <em>user</em> with the <em>newClaim</em>\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim)
    content.vb: Public Overridable Function ReplaceClaimAsync(user As TUser, claim As Claim, newClaim As Claim) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to replace the claim on.
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to replace.
    - id: newClaim
      type: System.Security.Claims.Claim
      description: The new claim to replace the existing <em>claim</em> with.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ReplaceClaimAsync(TUser, Claim, Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ReplaceClaimAsync(TUser, System.Security.Claims.Claim, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  id: RemoveClaimAsync(`0,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveClaimAsync(TUser, Claim)
  nameWithType: UserManager<TUser>.RemoveClaimAsync(TUser, Claim)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveClaimAsync(TUser, System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1007
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves the specified <em>claim</em> from the given <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveClaimAsync(TUser user, Claim claim)
    content.vb: Public Overridable Function RemoveClaimAsync(user As TUser, claim As Claim) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the specified <em>claim</em> from.
    - id: claim
      type: System.Security.Claims.Claim
      description: The <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemoveClaimAsync(TUser, Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveClaimAsync(TUser, System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveClaimsAsync(TUser, IEnumerable<Claim>)
  nameWithType: UserManager<TUser>.RemoveClaimsAsync(TUser, IEnumerable<Claim>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimsAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1031
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves the specified <em>claims</em> from the given <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveClaimsAsync(TUser user, IEnumerable<Claim> claims)
    content.vb: Public Overridable Function RemoveClaimsAsync(user As TUser, claims As IEnumerable(Of Claim)) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove the specified <em>claims</em> from.
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: A collection of <xref href="System.Security.Claims.Claim" data-throw-if-not-resolved="false"></xref>s to remove.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemoveClaimsAsync(TUser, IEnumerable(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveClaimsAsync(TUser, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: RemoveClaimsAsync(TUser, IEnumerable(Of Claim))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetClaimsAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetClaimsAsync(`0)
  id: GetClaimsAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetClaimsAsync(TUser)
  nameWithType: UserManager<TUser>.GetClaimsAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetClaimsAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetClaimsAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1055
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s to be belonging to the specified <em>user</em> as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IList<Claim>> GetClaimsAsync(TUser user)
    content.vb: Public Overridable Function GetClaimsAsync(user As TUser) As Task(Of IList(Of Claim))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose claims to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
  nameWithType.vb: UserManager(Of TUser).GetClaimsAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetClaimsAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRoleAsync(`0,System.String)
  id: AddToRoleAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddToRoleAsync(TUser, String)
  nameWithType: UserManager<TUser>.AddToRoleAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddToRoleAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddToRoleAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1075
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdd the specified <em>user</em> to the named role.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddToRoleAsync(TUser user, string role)
    content.vb: Public Overridable Function AddToRoleAsync(user As TUser, role As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add to the named role.
    - id: role
      type: System.String
      description: The name of the role to add the user to.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddToRoleAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddToRoleAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  id: AddToRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AddToRolesAsync(TUser, IEnumerable<String>)
  nameWithType: UserManager<TUser>.AddToRolesAsync(TUser, IEnumerable<String>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AddToRolesAsync(TUser, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddToRolesAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1102
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAdd the specified <em>user</em> to the named roles.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AddToRolesAsync(TUser user, IEnumerable<string> roles)
    content.vb: Public Overridable Function AddToRolesAsync(user As TUser, roles As IEnumerable(Of String)) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to add to the named roles.
    - id: roles
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The name of the roles to add the user to.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).AddToRolesAsync(TUser, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AddToRolesAsync(TUser, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AddToRolesAsync(TUser, IEnumerable(Of String))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRoleAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRoleAsync(`0,System.String)
  id: RemoveFromRoleAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveFromRoleAsync(TUser, String)
  nameWithType: UserManager<TUser>.RemoveFromRoleAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveFromRoleAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveFromRoleAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1136
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves the specified <em>user</em> from the named role.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveFromRoleAsync(TUser user, string role)
    content.vb: Public Overridable Function RemoveFromRoleAsync(user As TUser, role As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove from the named role.
    - id: role
      type: System.String
      description: The name of the role to remove the user from.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemoveFromRoleAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveFromRoleAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  id: RemoveFromRolesAsync(`0,System.Collections.Generic.IEnumerable{System.String})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveFromRolesAsync(TUser, IEnumerable<String>)
  nameWithType: UserManager<TUser>.RemoveFromRolesAsync(TUser, IEnumerable<String>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveFromRolesAsync(TUser, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveFromRolesAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1175
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemoves the specified <em>user</em> from the named roles.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveFromRolesAsync(TUser user, IEnumerable<string> roles)
    content.vb: Public Overridable Function RemoveFromRolesAsync(user As TUser, roles As IEnumerable(Of String)) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to remove from the named roles.
    - id: roles
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The name of the roles to remove the user from.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).RemoveFromRolesAsync(TUser, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveFromRolesAsync(TUser, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: RemoveFromRolesAsync(TUser, IEnumerable(Of String))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetRolesAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetRolesAsync(`0)
  id: GetRolesAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetRolesAsync(TUser)
  nameWithType: UserManager<TUser>.GetRolesAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetRolesAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetRolesAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1205
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a list of role names the specified <em>user</em> belongs to.\n"
  example: []
  syntax:
    content: public virtual Task<IList<string>> GetRolesAsync(TUser user)
    content.vb: Public Overridable Function GetRolesAsync(user As TUser) As Task(Of IList(Of String))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role names to retrieve.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing a list of role names.
  nameWithType.vb: UserManager(Of TUser).GetRolesAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetRolesAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.IsInRoleAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.IsInRoleAsync(`0,System.String)
  id: IsInRoleAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: IsInRoleAsync(TUser, String)
  nameWithType: UserManager<TUser>.IsInRoleAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.IsInRoleAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsInRoleAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1225
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified <em>user</em> is a member of the give named role.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsInRoleAsync(TUser user, string role)
    content.vb: Public Overridable Function IsInRoleAsync(user As TUser, role As String) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose role membership should be checked.
    - id: role
      type: System.String
      description: The name of the role to be checked.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing a flag indicating whether the specified <em>user</em> is\na member of the named role.\n"
  nameWithType.vb: UserManager(Of TUser).IsInRoleAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).IsInRoleAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetEmailAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetEmailAsync(`0)
  id: GetEmailAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetEmailAsync(TUser)
  nameWithType: UserManager<TUser>.GetEmailAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetEmailAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1241
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the email address for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetEmailAsync(TUser user)
    content.vb: Public Overridable Function GetEmailAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be returned.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The task object containing the results of the asynchronous operation, the email address for the specified <em>user</em>.
  nameWithType.vb: UserManager(Of TUser).GetEmailAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetEmailAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetEmailAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetEmailAsync(`0,System.String)
  id: SetEmailAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetEmailAsync(TUser, String)
  nameWithType: UserManager<TUser>.SetEmailAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetEmailAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1261
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the <em>email</em> address for a <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetEmailAsync(TUser user, string email)
    content.vb: Public Overridable Function SetEmailAsync(user As TUser, email As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be set.
    - id: email
      type: System.String
      description: The email to set.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).SetEmailAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetEmailAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.FindByEmailAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.FindByEmailAsync(System.String)
  id: FindByEmailAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: FindByEmailAsync(String)
  nameWithType: UserManager<TUser>.FindByEmailAsync(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByEmailAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FindByEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1283
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the user, if any, associated with the specified, normalized email address.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> FindByEmailAsync(string email)
    content.vb: Public Overridable Function FindByEmailAsync(email As String) As Task(Of TUser)
    parameters:
    - id: email
      type: System.String
      description: The normalized email address to return the user for.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: "\nThe task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.\n"
  nameWithType.vb: UserManager(Of TUser).FindByEmailAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).FindByEmailAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedEmailAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.UpdateNormalizedEmailAsync(`0)
  id: UpdateNormalizedEmailAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: UpdateNormalizedEmailAsync(TUser)
  nameWithType: UserManager<TUser>.UpdateNormalizedEmailAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateNormalizedEmailAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateNormalizedEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1299
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates the normalized email for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task UpdateNormalizedEmailAsync(TUser user)
    content.vb: Public Overridable Function UpdateNormalizedEmailAsync(user As TUser) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email address should be normalized and updated.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: UserManager(Of TUser).UpdateNormalizedEmailAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).UpdateNormalizedEmailAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateEmailConfirmationTokenAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateEmailConfirmationTokenAsync(`0)
  id: GenerateEmailConfirmationTokenAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateEmailConfirmationTokenAsync(TUser)
  nameWithType: UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateEmailConfirmationTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1316
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates an email confirmation token for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateEmailConfirmationTokenAsync(TUser user)
    content.vb: Public Overridable Function GenerateEmailConfirmationTokenAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to generate an email confirmation token for.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, an email confirmation token.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateEmailConfirmationTokenAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateEmailConfirmationTokenAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ConfirmEmailAsync(`0,System.String)
  id: ConfirmEmailAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ConfirmEmailAsync(TUser, String)
  nameWithType: UserManager<TUser>.ConfirmEmailAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ConfirmEmailAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfirmEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1331
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nValidates that an email confirmation token matches the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ConfirmEmailAsync(TUser user, string token)
    content.vb: Public Overridable Function ConfirmEmailAsync(user As TUser, token As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to validate the token against.
    - id: token
      type: System.String
      description: The email confirmation token to validate.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ConfirmEmailAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ConfirmEmailAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.IsEmailConfirmedAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.IsEmailConfirmedAsync(`0)
  id: IsEmailConfirmedAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: IsEmailConfirmedAsync(TUser)
  nameWithType: UserManager<TUser>.IsEmailConfirmedAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.IsEmailConfirmedAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsEmailConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1357
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the email address for the specified <em>user</em> has been verified, true if the email address is verified otherwise\nfalse.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsEmailConfirmedAsync(TUser user)
    content.vb: Public Overridable Function IsEmailConfirmedAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email confirmation status should be returned.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <em>user</em>\nhas been confirmed or not.\n"
  nameWithType.vb: UserManager(Of TUser).IsEmailConfirmedAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).IsEmailConfirmedAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangeEmailTokenAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangeEmailTokenAsync(`0,System.String)
  id: GenerateChangeEmailTokenAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateChangeEmailTokenAsync(TUser, String)
  nameWithType: UserManager<TUser>.GenerateChangeEmailTokenAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateChangeEmailTokenAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateChangeEmailTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1376
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates an email change token for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateChangeEmailTokenAsync(TUser user, string newEmail)
    content.vb: Public Overridable Function GenerateChangeEmailTokenAsync(user As TUser, newEmail As String) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to generate an email change token for.
    - id: newEmail
      type: System.String
      description: The new email address.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, an email change token.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateChangeEmailTokenAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateChangeEmailTokenAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ChangeEmailAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ChangeEmailAsync(`0,System.String,System.String)
  id: ChangeEmailAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ChangeEmailAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.ChangeEmailAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangeEmailAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangeEmailAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1392
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nUpdates a users emails if the specified email change <em>token</em> is valid for the user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ChangeEmailAsync(TUser user, string newEmail, string token)
    content.vb: Public Overridable Function ChangeEmailAsync(user As TUser, newEmail As String, token As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose email should be updated.
    - id: newEmail
      type: System.String
      description: The new email address.
    - id: token
      type: System.String
      description: The change email token to be verified.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ChangeEmailAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ChangeEmailAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetPhoneNumberAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetPhoneNumberAsync(`0)
  id: GetPhoneNumberAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetPhoneNumberAsync(TUser)
  nameWithType: UserManager<TUser>.GetPhoneNumberAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetPhoneNumberAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetPhoneNumberAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1417
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the telephone number, if any, for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetPhoneNumberAsync(TUser user)
    content.vb: Public Overridable Function GetPhoneNumberAsync(user As TUser) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose telephone number should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the user's telephone number, if any.
  nameWithType.vb: UserManager(Of TUser).GetPhoneNumberAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetPhoneNumberAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetPhoneNumberAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetPhoneNumberAsync(`0,System.String)
  id: SetPhoneNumberAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetPhoneNumberAsync(TUser, String)
  nameWithType: UserManager<TUser>.SetPhoneNumberAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetPhoneNumberAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1437
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the phone number for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetPhoneNumberAsync(TUser user, string phoneNumber)
    content.vb: Public Overridable Function SetPhoneNumberAsync(user As TUser, phoneNumber As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose phone number to set.
    - id: phoneNumber
      type: System.String
      description: The phone number to set.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).SetPhoneNumberAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetPhoneNumberAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ChangePhoneNumberAsync(`0,System.String,System.String)
  id: ChangePhoneNumberAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ChangePhoneNumberAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.ChangePhoneNumberAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangePhoneNumberAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangePhoneNumberAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1463
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets the phone number for the specified <em>user</em> if the specified\nchange <em>token</em> is valid.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ChangePhoneNumberAsync(TUser user, string phoneNumber, string token)
    content.vb: Public Overridable Function ChangePhoneNumberAsync(user As TUser, phoneNumber As String, token As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose phone number to set.
    - id: phoneNumber
      type: System.String
      description: The phone number to set.
    - id: token
      type: System.String
      description: The phone number confirmation token to validate.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref>\nof the operation.\n"
  nameWithType.vb: UserManager(Of TUser).ChangePhoneNumberAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ChangePhoneNumberAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.IsPhoneNumberConfirmedAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.IsPhoneNumberConfirmedAsync(`0)
  id: IsPhoneNumberConfirmedAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: IsPhoneNumberConfirmedAsync(TUser)
  nameWithType: UserManager<TUser>.IsPhoneNumberConfirmedAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.IsPhoneNumberConfirmedAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsPhoneNumberConfirmedAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1491
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a flag indicating whether the specified <em>user</em>'s telephone number has been confirmed.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsPhoneNumberConfirmedAsync(TUser user)
    content.vb: Public Overridable Function IsPhoneNumberConfirmedAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to return a flag for, indicating whether their telephone number is confirmed.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the specified <em>user</em> has a confirmed\ntelephone number otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).IsPhoneNumberConfirmedAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).IsPhoneNumberConfirmedAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangePhoneNumberTokenAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateChangePhoneNumberTokenAsync(`0,System.String)
  id: GenerateChangePhoneNumberTokenAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateChangePhoneNumberTokenAsync(TUser, String)
  nameWithType: UserManager<TUser>.GenerateChangePhoneNumberTokenAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateChangePhoneNumberTokenAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateChangePhoneNumberTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1510
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates a telephone number change token for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateChangePhoneNumberTokenAsync(TUser user, string phoneNumber)
    content.vb: Public Overridable Function GenerateChangePhoneNumberTokenAsync(user As TUser, phoneNumber As String) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to generate a telephone number token for.
    - id: phoneNumber
      type: System.String
      description: The new phone number the validation token should be sent to.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, containing the telephone change number token.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateChangePhoneNumberTokenAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateChangePhoneNumberTokenAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)
  id: VerifyChangePhoneNumberTokenAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: VerifyChangePhoneNumberTokenAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.VerifyChangePhoneNumberTokenAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyChangePhoneNumberTokenAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyChangePhoneNumberTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1529
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified <em>user</em>'s phone number change verification\ntoken is valid for the given <em>phoneNumber</em>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> VerifyChangePhoneNumberTokenAsync(TUser user, string token, string phoneNumber)
    content.vb: Public Overridable Function VerifyChangePhoneNumberTokenAsync(user As TUser, token As String, phoneNumber As String) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to validate the token against.
    - id: token
      type: System.String
      description: The telephone number change token to validate.
    - id: phoneNumber
      type: System.String
      description: The telephone number the token was generated for.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the <em>token</em>\nis valid, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).VerifyChangePhoneNumberTokenAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).VerifyChangePhoneNumberTokenAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyUserTokenAsync(`0,System.String,System.String,System.String)
  id: VerifyUserTokenAsync(`0,System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: VerifyUserTokenAsync(TUser, String, String, String)
  nameWithType: UserManager<TUser>.VerifyUserTokenAsync(TUser, String, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyUserTokenAsync(TUser, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyUserTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1558
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified <em>token</em> is valid for\nthe given <em>user</em> and <em>purpose</em>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> VerifyUserTokenAsync(TUser user, string tokenProvider, string purpose, string token)
    content.vb: Public Overridable Function VerifyUserTokenAsync(user As TUser, tokenProvider As String, purpose As String, token As String) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to validate the token against.
    - id: tokenProvider
      type: System.String
      description: The token provider used to generate the token.
    - id: purpose
      type: System.String
      description: The purpose the token should be generated for.
    - id: token
      type: System.String
      description: The token to validate
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, returning true if the <em>token</em>\nis valid, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).VerifyUserTokenAsync(TUser, String, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).VerifyUserTokenAsync(TUser, System.String, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateUserTokenAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateUserTokenAsync(`0,System.String,System.String)
  id: GenerateUserTokenAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateUserTokenAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.GenerateUserTokenAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateUserTokenAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateUserTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1594
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates a token for the given <em>user</em> and <em>purpose</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateUserTokenAsync(TUser user, string tokenProvider, string purpose)
    content.vb: Public Overridable Function GenerateUserTokenAsync(user As TUser, tokenProvider As String, purpose As String) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user the token will be for.
    - id: tokenProvider
      type: System.String
      description: The provider which will generate the token.
    - id: purpose
      type: System.String
      description: The purpose the token will be for.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents result of the asynchronous operation, a token for\nthe given user and purpose.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateUserTokenAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateUserTokenAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})
  id: RegisterTokenProvider(System.String,Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RegisterTokenProvider(String, IUserTwoFactorTokenProvider<TUser>)
  nameWithType: UserManager<TUser>.RegisterTokenProvider(String, IUserTwoFactorTokenProvider<TUser>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RegisterTokenProvider(System.String, Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RegisterTokenProvider
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1618
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRegisters a token provider.\n"
  example: []
  syntax:
    content: public virtual void RegisterTokenProvider(string providerName, IUserTwoFactorTokenProvider<TUser> provider)
    content.vb: Public Overridable Sub RegisterTokenProvider(providerName As String, provider As IUserTwoFactorTokenProvider(Of TUser))
    parameters:
    - id: providerName
      type: System.String
      description: The name of the provider to register.
    - id: provider
      type: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
      description: The provider to register.
  nameWithType.vb: UserManager(Of TUser).RegisterTokenProvider(String, IUserTwoFactorTokenProvider(Of TUser))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RegisterTokenProvider(System.String, Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser))
  name.vb: RegisterTokenProvider(String, IUserTwoFactorTokenProvider(Of TUser))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetValidTwoFactorProvidersAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetValidTwoFactorProvidersAsync(`0)
  id: GetValidTwoFactorProvidersAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetValidTwoFactorProvidersAsync(TUser)
  nameWithType: UserManager<TUser>.GetValidTwoFactorProvidersAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetValidTwoFactorProvidersAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetValidTwoFactorProvidersAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1637
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a list of valid two factor token providers for the specified <em>user</em>,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IList<string>> GetValidTwoFactorProvidersAsync(TUser user)
    content.vb: Public Overridable Function GetValidTwoFactorProvidersAsync(user As TUser) As Task(Of IList(Of String))
    parameters:
    - id: user
      type: '{TUser}'
      description: The user the whose two factor authentication providers will be returned.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents result of the asynchronous operation, a list of two\nfactor authentication providers for the specified user.\n"
  nameWithType.vb: UserManager(Of TUser).GetValidTwoFactorProvidersAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetValidTwoFactorProvidersAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.VerifyTwoFactorTokenAsync(`0,System.String,System.String)
  id: VerifyTwoFactorTokenAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: VerifyTwoFactorTokenAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.VerifyTwoFactorTokenAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyTwoFactorTokenAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyTwoFactorTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1665
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nVerifies the specified two factor authentication <em>token</em> against the <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<bool> VerifyTwoFactorTokenAsync(TUser user, string tokenProvider, string token)
    content.vb: Public Overridable Function VerifyTwoFactorTokenAsync(user As TUser, tokenProvider As String, token As String) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user the token is supposed to be for.
    - id: tokenProvider
      type: System.String
      description: The provider which will verify the token.
    - id: token
      type: System.String
      description: The token to verify.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents result of the asynchronous operation, true if the token is valid,\notherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).VerifyTwoFactorTokenAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).VerifyTwoFactorTokenAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GenerateTwoFactorTokenAsync(`0,System.String)
  id: GenerateTwoFactorTokenAsync(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GenerateTwoFactorTokenAsync(TUser, String)
  nameWithType: UserManager<TUser>.GenerateTwoFactorTokenAsync(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateTwoFactorTokenAsync(TUser, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateTwoFactorTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1696
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a two factor authentication token for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<string> GenerateTwoFactorTokenAsync(TUser user, string tokenProvider)
    content.vb: Public Overridable Function GenerateTwoFactorTokenAsync(user As TUser, tokenProvider As String) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user the token is for.
    - id: tokenProvider
      type: System.String
      description: The provider which will generate the token.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents result of the asynchronous operation, a two factor authentication token\nfor the user.\n"
  nameWithType.vb: UserManager(Of TUser).GenerateTwoFactorTokenAsync(TUser, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GenerateTwoFactorTokenAsync(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetTwoFactorEnabledAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetTwoFactorEnabledAsync(`0)
  id: GetTwoFactorEnabledAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetTwoFactorEnabledAsync(TUser)
  nameWithType: UserManager<TUser>.GetTwoFactorEnabledAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetTwoFactorEnabledAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTwoFactorEnabledAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1721
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified <em>user</em> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetTwoFactorEnabledAsync(TUser user)
    content.vb: Public Overridable Function GetTwoFactorEnabledAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if the specified <em>user </em>\nhas two factor authentication enabled, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).GetTwoFactorEnabledAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetTwoFactorEnabledAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetTwoFactorEnabledAsync(`0,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetTwoFactorEnabledAsync(`0,System.Boolean)
  id: SetTwoFactorEnabledAsync(`0,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetTwoFactorEnabledAsync(TUser, Boolean)
  nameWithType: UserManager<TUser>.SetTwoFactorEnabledAsync(TUser, Boolean)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetTwoFactorEnabledAsync(TUser, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetTwoFactorEnabledAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1741
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets a flag indicating whether the specified <em>user</em> has two factor authentication enabled or not,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetTwoFactorEnabledAsync(TUser user, bool enabled)
    content.vb: Public Overridable Function SetTwoFactorEnabledAsync(user As TUser, enabled As Boolean) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose two factor authentication enabled status should be set.
    - id: enabled
      type: System.Boolean
      description: A flag indicating whether the specified <em>user</em> has two factor authentication enabled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref> of the operation\n"
  nameWithType.vb: UserManager(Of TUser).SetTwoFactorEnabledAsync(TUser, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetTwoFactorEnabledAsync(TUser, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.IsLockedOutAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.IsLockedOutAsync(`0)
  id: IsLockedOutAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: IsLockedOutAsync(TUser)
  nameWithType: UserManager<TUser>.IsLockedOutAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.IsLockedOutAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsLockedOutAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1764
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified <em>user</em> his locked out,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsLockedOutAsync(TUser user)
    content.vb: Public Overridable Function IsLockedOutAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose locked out status should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if the specified <em>user </em>\nis locked out, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).IsLockedOutAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).IsLockedOutAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEnabledAsync(`0,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEnabledAsync(`0,System.Boolean)
  id: SetLockoutEnabledAsync(`0,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetLockoutEnabledAsync(TUser, Boolean)
  nameWithType: UserManager<TUser>.SetLockoutEnabledAsync(TUser, Boolean)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetLockoutEnabledAsync(TUser, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEnabledAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1789
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets a flag indicating whether the specified <em>user</em> is locked out,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetLockoutEnabledAsync(TUser user, bool enabled)
    content.vb: Public Overridable Function SetLockoutEnabledAsync(user As TUser, enabled As Boolean) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose locked out status should be set.
    - id: enabled
      type: System.Boolean
      description: Flag indicating whether the user is locked out or not.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, the <xref href=\"Microsoft.AspNetCore.Identity.IdentityResult\" data-throw-if-not-resolved=\"false\"></xref> of the operation\n"
  nameWithType.vb: UserManager(Of TUser).SetLockoutEnabledAsync(TUser, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetLockoutEnabledAsync(TUser, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEnabledAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEnabledAsync(`0)
  id: GetLockoutEnabledAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetLockoutEnabledAsync(TUser)
  nameWithType: UserManager<TUser>.GetLockoutEnabledAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLockoutEnabledAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEnabledAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1809
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRetrieves a flag indicating whether user lockout can enabled for the specified user.\n"
  example: []
  syntax:
    content: public virtual Task<bool> GetLockoutEnabledAsync(TUser user)
    content.vb: Public Overridable Function GetLockoutEnabledAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose ability to be locked out should be returned.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation, true if a user can be locked out, otherwise false.\n"
  nameWithType.vb: UserManager(Of TUser).GetLockoutEnabledAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetLockoutEnabledAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEndDateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetLockoutEndDateAsync(`0)
  id: GetLockoutEndDateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetLockoutEndDateAsync(TUser)
  nameWithType: UserManager<TUser>.GetLockoutEndDateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLockoutEndDateAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetLockoutEndDateAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1828
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the last <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> a user's last lockout expired, if any.\nAny time in the past should be indicates a user is not locked out.\n"
  example: []
  syntax:
    content: public virtual Task<DateTimeOffset? > GetLockoutEndDateAsync(TUser user)
    content.vb: Public Overridable Function GetLockoutEndDateAsync(user As TUser) As Task(Of DateTimeOffset?)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the lookup, a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> containing the last time a user's lockout expired, if any.\n"
  nameWithType.vb: UserManager(Of TUser).GetLockoutEndDateAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetLockoutEndDateAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})
  id: SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset})
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>)
  nameWithType: UserManager<TUser>.SetLockoutEndDateAsync(TUser, Nullable<DateTimeOffset>)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetLockoutEndDateAsync(TUser, System.Nullable<System.DateTimeOffset>)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetLockoutEndDateAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1845
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nLocks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetLockoutEndDateAsync(TUser user, DateTimeOffset? lockoutEnd)
    content.vb: Public Overridable Function SetLockoutEndDateAsync(user As TUser, lockoutEnd As DateTimeOffset?) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose lockout date should be set.
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
      description: The <xref href="System.DateTimeOffset" data-throw-if-not-resolved="false"></xref> after which the <em>user</em>'s lockout should end.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the operation.
  nameWithType.vb: UserManager(Of TUser).SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetLockoutEndDateAsync(TUser, System.Nullable(Of System.DateTimeOffset))
  name.vb: SetLockoutEndDateAsync(TUser, Nullable(Of DateTimeOffset))
- uid: Microsoft.AspNetCore.Identity.UserManager`1.AccessFailedAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.AccessFailedAsync(`0)
  id: AccessFailedAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: AccessFailedAsync(TUser)
  nameWithType: UserManager<TUser>.AccessFailedAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.AccessFailedAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AccessFailedAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1870
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nIncrements the access failed count for the user as an asynchronous operation.\nIf the failed access account is greater than or equal to the configured maximum number of attempts,\nthe user will be locked out for the configured lockout time span.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> AccessFailedAsync(TUser user)
    content.vb: Public Overridable Function AccessFailedAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count to increment.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the operation.
  nameWithType.vb: UserManager(Of TUser).AccessFailedAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).AccessFailedAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ResetAccessFailedCountAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ResetAccessFailedCountAsync(`0)
  id: ResetAccessFailedCountAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ResetAccessFailedCountAsync(TUser)
  nameWithType: UserManager<TUser>.ResetAccessFailedCountAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetAccessFailedCountAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetAccessFailedCountAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1897
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nResets the access failed count for the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> ResetAccessFailedCountAsync(TUser user)
    content.vb: Public Overridable Function ResetAccessFailedCountAsync(user As TUser) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose failed access count should be reset.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the operation.
  nameWithType.vb: UserManager(Of TUser).ResetAccessFailedCountAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ResetAccessFailedCountAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetAccessFailedCountAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetAccessFailedCountAsync(`0)
  id: GetAccessFailedCountAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetAccessFailedCountAsync(TUser)
  nameWithType: UserManager<TUser>.GetAccessFailedCountAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetAccessFailedCountAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAccessFailedCountAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1920
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRetrieves the current number of failed accesses for the given <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task<int> GetAccessFailedCountAsync(TUser user)
    content.vb: Public Overridable Function GetAccessFailedCountAsync(user As TUser) As Task(Of Integer)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose access failed count should be retrieved for.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: >-
        The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that contains the result the asynchronous operation, the current failed access count

        for the user.
  nameWithType.vb: UserManager(Of TUser).GetAccessFailedCountAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetAccessFailedCountAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUsersForClaimAsync(System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersForClaimAsync(System.Security.Claims.Claim)
  id: GetUsersForClaimAsync(System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUsersForClaimAsync(Claim)
  nameWithType: UserManager<TUser>.GetUsersForClaimAsync(Claim)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersForClaimAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1939
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a list of users from the user store who have the specified <em>claim</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersForClaimAsync(Claim claim)
    content.vb: Public Overridable Function GetUsersForClaimAsync(claim As Claim) As Task(Of IList(Of TUser))
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: The claim to look for.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <em>TUser</em>s who\nhave the specified claim.\n"
  nameWithType.vb: UserManager(Of TUser).GetUsersForClaimAsync(Claim)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUsersForClaimAsync(System.Security.Claims.Claim)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetUsersInRoleAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetUsersInRoleAsync(System.String)
  id: GetUsersInRoleAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetUsersInRoleAsync(String)
  nameWithType: UserManager<TUser>.GetUsersInRoleAsync(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUsersInRoleAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetUsersInRoleAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1958
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a list of users from the user store who are members of the specified <em>roleName</em>.\n"
  example: []
  syntax:
    content: public virtual Task<IList<TUser>> GetUsersInRoleAsync(string roleName)
    content.vb: Public Overridable Function GetUsersInRoleAsync(roleName As String) As Task(Of IList(Of TUser))
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role whose users should be returned.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous query, a list of <em>TUser</em>s who\nare members of the specified role.\n"
  nameWithType.vb: UserManager(Of TUser).GetUsersInRoleAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetUsersInRoleAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticationTokenAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetAuthenticationTokenAsync(`0,System.String,System.String)
  id: GetAuthenticationTokenAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetAuthenticationTokenAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.GetAuthenticationTokenAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetAuthenticationTokenAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAuthenticationTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 1977
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns an authentication token for a user.\n"
  example: []
  syntax:
    content: public virtual Task<string> GetAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName)
    content.vb: Public Overridable Function GetAuthenticationTokenAsync(user As TUser, loginProvider As String, tokenName As String) As Task(Of String)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: loginProvider
      type: System.String
      description: The authentication scheme for the provider the token is associated with.
    - id: tokenName
      type: System.String
      description: The name of the token.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: ''
  nameWithType.vb: UserManager(Of TUser).GetAuthenticationTokenAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetAuthenticationTokenAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)
  id: SetAuthenticationTokenAsync(`0,System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: SetAuthenticationTokenAsync(TUser, String, String, String)
  nameWithType: UserManager<TUser>.SetAuthenticationTokenAsync(TUser, String, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.SetAuthenticationTokenAsync(TUser, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetAuthenticationTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 2005
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets an authentication token for a user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> SetAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName, string tokenValue)
    content.vb: Public Overridable Function SetAuthenticationTokenAsync(user As TUser, loginProvider As String, tokenName As String, tokenValue As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: loginProvider
      type: System.String
      description: The authentication scheme for the provider the token is associated with.
    - id: tokenName
      type: System.String
      description: The name of the token.
    - id: tokenValue
      type: System.String
      description: The value of the token.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: ''
  nameWithType.vb: UserManager(Of TUser).SetAuthenticationTokenAsync(TUser, String, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).SetAuthenticationTokenAsync(TUser, System.String, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.RemoveAuthenticationTokenAsync(`0,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.RemoveAuthenticationTokenAsync(`0,System.String,System.String)
  id: RemoveAuthenticationTokenAsync(`0,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: RemoveAuthenticationTokenAsync(TUser, String, String)
  nameWithType: UserManager<TUser>.RemoveAuthenticationTokenAsync(TUser, String, String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveAuthenticationTokenAsync(TUser, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveAuthenticationTokenAsync
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 2034
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRemove an authentication token for a user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> RemoveAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName)
    content.vb: Public Overridable Function RemoveAuthenticationTokenAsync(user As TUser, loginProvider As String, tokenName As String) As Task(Of IdentityResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: ''
    - id: loginProvider
      type: System.String
      description: The authentication scheme for the provider the token is associated with.
    - id: tokenName
      type: System.String
      description: The name of the token.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: Whether a token was removed.
  nameWithType.vb: UserManager(Of TUser).RemoveAuthenticationTokenAsync(TUser, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).RemoveAuthenticationTokenAsync(TUser, System.String, System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.Dispose(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: UserManager<TUser>.Dispose(Boolean)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Dispose
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 2060
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReleases the unmanaged resources used by the role manager and optionally releases the managed resources.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  nameWithType.vb: UserManager(Of TUser).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).Dispose(System.Boolean)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.GetChangeEmailTokenPurpose(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.GetChangeEmailTokenPurpose(System.String)
  id: GetChangeEmailTokenPurpose(System.String)
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: GetChangeEmailTokenPurpose(String)
  nameWithType: UserManager<TUser>.GetChangeEmailTokenPurpose(String)
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.GetChangeEmailTokenPurpose(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetChangeEmailTokenPurpose
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 2192
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGenerates the token purpose used to change email\n"
  example: []
  syntax:
    content: protected static string GetChangeEmailTokenPurpose(string newEmail)
    content.vb: Protected Shared Function GetChangeEmailTokenPurpose(newEmail As String) As String
    parameters:
    - id: newEmail
      type: System.String
      description: ''
    return:
      type: System.String
      description: ''
  nameWithType.vb: UserManager(Of TUser).GetChangeEmailTokenPurpose(String)
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).GetChangeEmailTokenPurpose(System.String)
- uid: Microsoft.AspNetCore.Identity.UserManager`1.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.UserManager`1.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.UserManager`1
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: UserManager<TUser>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ThrowIfDisposed
    path: src/Microsoft.AspNetCore.Identity/UserManager.cs
    startLine: 2267
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  nameWithType.vb: UserManager(Of TUser).ThrowIfDisposed()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser).ThrowIfDisposed()
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Builder.IdentityOptions
  commentId: T:Microsoft.AspNetCore.Builder.IdentityOptions
  parent: Microsoft.AspNetCore.Builder
  isExternal: false
  name: IdentityOptions
  nameWithType: IdentityOptions
  fullName: Microsoft.AspNetCore.Builder.IdentityOptions
- uid: Microsoft.AspNetCore.Identity.IUserValidator`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserValidator`1
  isExternal: false
  name: IUserValidator<TUser>
  nameWithType: IUserValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserValidator<TUser>
  nameWithType.vb: IUserValidator(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserValidator(Of TUser)
  name.vb: IUserValidator(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserValidator`1
    name: IUserValidator
    nameWithType: IUserValidator
    fullName: Microsoft.AspNetCore.Identity.IUserValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserValidator`1
    name: IUserValidator
    nameWithType: IUserValidator
    fullName: Microsoft.AspNetCore.Identity.IUserValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
  commentId: T:Microsoft.AspNetCore.Identity.IPasswordValidator`1
  isExternal: false
  name: IPasswordValidator<TUser>
  nameWithType: IPasswordValidator<TUser>
  fullName: Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>
  nameWithType.vb: IPasswordValidator(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser)
  name.vb: IPasswordValidator(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.ILookupNormalizer
  commentId: T:Microsoft.AspNetCore.Identity.ILookupNormalizer
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: ILookupNormalizer
  nameWithType: ILookupNormalizer
  fullName: Microsoft.AspNetCore.Identity.ILookupNormalizer
- uid: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  commentId: T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityErrorDescriber
  nameWithType: IdentityErrorDescriber
  fullName: Microsoft.AspNetCore.Identity.IdentityErrorDescriber
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.AspNetCore.Identity.IUserStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserStore`1
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<IdentityOptions>
  nameWithType: IOptions<IdentityOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>
  nameWithType.vb: IOptions(Of IdentityOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions)
  name.vb: IOptions(Of IdentityOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IPasswordHasher{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IPasswordHasher{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IPasswordHasher`1
  name: IPasswordHasher<TUser>
  nameWithType: IPasswordHasher<TUser>
  fullName: Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>
  nameWithType.vb: IPasswordHasher(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordHasher(Of TUser)
  name.vb: IPasswordHasher(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordHasher`1
    name: IPasswordHasher
    nameWithType: IPasswordHasher
    fullName: Microsoft.AspNetCore.Identity.IPasswordHasher
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordHasher`1
    name: IPasswordHasher
    nameWithType: IPasswordHasher
    fullName: Microsoft.AspNetCore.Identity.IPasswordHasher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{{TUser}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IUserValidator{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IUserValidator<TUser>>
  nameWithType: IEnumerable<IUserValidator<TUser>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IUserValidator<TUser>>
  nameWithType.vb: IEnumerable(Of IUserValidator(Of TUser))
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IUserValidator(Of TUser))
  name.vb: IEnumerable(Of IUserValidator(Of TUser))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IUserValidator`1
    name: IUserValidator
    nameWithType: IUserValidator
    fullName: Microsoft.AspNetCore.Identity.IUserValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IUserValidator`1
    name: IUserValidator
    nameWithType: IUserValidator
    fullName: Microsoft.AspNetCore.Identity.IUserValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{{TUser}}}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Identity.IPasswordValidator{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPasswordValidator<TUser>>
  nameWithType: IEnumerable<IPasswordValidator<TUser>>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>>
  nameWithType.vb: IEnumerable(Of IPasswordValidator(Of TUser))
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Identity.IPasswordValidator(Of TUser))
  name.vb: IEnumerable(Of IPasswordValidator(Of TUser))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IPasswordValidator`1
    name: IPasswordValidator
    nameWithType: IPasswordValidator
    fullName: Microsoft.AspNetCore.Identity.IPasswordValidator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager`1}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.UserManager`1}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<UserManager<TUser>>
  nameWithType: ILogger<UserManager<TUser>>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.UserManager<TUser>>
  nameWithType.vb: ILogger(Of UserManager(Of TUser))
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.UserManager(Of TUser))
  name.vb: ILogger(Of UserManager(Of TUser))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Builder
  commentId: N:Microsoft.AspNetCore.Builder
  isExternal: false
  name: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
- uid: Microsoft.AspNetCore.Identity.IUserStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserStore`1
  isExternal: false
  name: IUserStore<TUser>
  nameWithType: IUserStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserStore<TUser>
  nameWithType.vb: IUserStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserStore(Of TUser)
  name.vb: IUserStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserStore`1
    name: IUserStore
    nameWithType: IUserStore
    fullName: Microsoft.AspNetCore.Identity.IUserStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Microsoft.AspNetCore.Identity.IPasswordHasher`1
  commentId: T:Microsoft.AspNetCore.Identity.IPasswordHasher`1
  isExternal: false
  name: IPasswordHasher<TUser>
  nameWithType: IPasswordHasher<TUser>
  fullName: Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>
  nameWithType.vb: IPasswordHasher(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IPasswordHasher(Of TUser)
  name.vb: IPasswordHasher(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IPasswordHasher`1
    name: IPasswordHasher
    nameWithType: IPasswordHasher
    fullName: Microsoft.AspNetCore.Identity.IPasswordHasher
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IPasswordHasher`1
    name: IPasswordHasher
    nameWithType: IPasswordHasher
    fullName: Microsoft.AspNetCore.Identity.IPasswordHasher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
- uid: System.Linq.IQueryable{{TUser}}
  commentId: T:System.Linq.IQueryable{`0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TUser>
  nameWithType: IQueryable<TUser>
  fullName: System.Linq.IQueryable<TUser>
  nameWithType.vb: IQueryable(Of TUser)
  fullname.vb: System.Linq.IQueryable(Of TUser)
  name.vb: IQueryable(Of TUser)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Security.Claims.ClaimTypes.NameIdentifier
  commentId: F:System.Security.Claims.ClaimTypes.NameIdentifier
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullname.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1.CancellationToken
  commentId: P:Microsoft.AspNetCore.Identity.UserManager`1.CancellationToken
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.AspNetCore.Identity.PasswordVerificationResult
  commentId: T:Microsoft.AspNetCore.Identity.PasswordVerificationResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: PasswordVerificationResult
  nameWithType: PasswordVerificationResult
  fullName: Microsoft.AspNetCore.Identity.PasswordVerificationResult
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.PasswordVerificationResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.PasswordVerificationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PasswordVerificationResult>
  nameWithType: Task<PasswordVerificationResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.PasswordVerificationResult>
  nameWithType.vb: Task(Of PasswordVerificationResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.PasswordVerificationResult)
  name.vb: Task(Of PasswordVerificationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.PasswordVerificationResult
    name: PasswordVerificationResult
    nameWithType: PasswordVerificationResult
    fullName: Microsoft.AspNetCore.Identity.PasswordVerificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.PasswordVerificationResult
    name: PasswordVerificationResult
    nameWithType: PasswordVerificationResult
    fullName: Microsoft.AspNetCore.Identity.PasswordVerificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserPasswordStore`1
  isExternal: false
  name: IUserPasswordStore<TUser>
  nameWithType: IUserPasswordStore<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
  nameWithType.vb: IUserPasswordStore(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserPasswordStore(Of TUser)
  name.vb: IUserPasswordStore(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserPasswordStore`1
    name: IUserPasswordStore
    nameWithType: IUserPasswordStore
    fullName: Microsoft.AspNetCore.Identity.IUserPasswordStore
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserLoginInfo
  commentId: T:Microsoft.AspNetCore.Identity.UserLoginInfo
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{Microsoft.AspNetCore.Identity.UserLoginInfo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<UserLoginInfo>>
  nameWithType: Task<IList<UserLoginInfo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo>>
  nameWithType.vb: Task(Of IList(Of UserLoginInfo))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of Microsoft.AspNetCore.Identity.UserLoginInfo))
  name.vb: Task(Of IList(Of UserLoginInfo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.UserLoginInfo
    name: UserLoginInfo
    nameWithType: UserLoginInfo
    fullName: Microsoft.AspNetCore.Identity.UserLoginInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Security.Claims.Claim}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<Claim>>
  nameWithType: Task<IList<Claim>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim>>
  nameWithType.vb: Task(Of IList(Of Claim))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.Security.Claims.Claim))
  name.vb: Task(Of IList(Of Claim))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<String>>
  nameWithType: Task<IList<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<System.String>>
  nameWithType.vb: Task(Of IList(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of System.String))
  name.vb: Task(Of IList(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  name: IUserTwoFactorTokenProvider<TUser>
  nameWithType: IUserTwoFactorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser)
  name.vb: IUserTwoFactorTokenProvider(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
  isExternal: false
  name: IUserTwoFactorTokenProvider<TUser>
  nameWithType: IUserTwoFactorTokenProvider<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
  nameWithType.vb: IUserTwoFactorTokenProvider(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider(Of TUser)
  name.vb: IUserTwoFactorTokenProvider(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1
    name: IUserTwoFactorTokenProvider
    nameWithType: IUserTwoFactorTokenProvider
    fullName: Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
- uid: System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.DateTimeOffset}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Nullable<DateTimeOffset>>
  nameWithType: Task<Nullable<DateTimeOffset>>
  fullName: System.Threading.Tasks.Task<System.Nullable<System.DateTimeOffset>>
  nameWithType.vb: Task(Of Nullable(Of DateTimeOffset))
  fullname.vb: System.Threading.Tasks.Task(Of System.Nullable(Of System.DateTimeOffset))
  name.vb: Task(Of Nullable(Of DateTimeOffset))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IList{{TUser}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IList{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IList<TUser>>
  nameWithType: Task<IList<TUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser>>
  nameWithType.vb: Task(Of IList(Of TUser))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IList(Of TUser))
  name.vb: Task(Of IList(Of TUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
