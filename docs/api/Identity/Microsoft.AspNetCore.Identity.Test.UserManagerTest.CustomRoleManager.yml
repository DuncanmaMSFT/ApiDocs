### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager
  commentId: T:Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager
  id: UserManagerTest.CustomRoleManager
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager.#ctor
  langs:
  - csharp
  - vb
  name: UserManagerTest.CustomRoleManager
  nameWithType: UserManagerTest.CustomRoleManager
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/UserManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CustomRoleManager
    path: test/Microsoft.AspNetCore.Identity.Test/UserManagerTest.cs
    startLine: 57
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: 'public class CustomRoleManager : RoleManager<TestRole>, IDisposable'
    content.vb: >-
      Public Class CustomRoleManager
          Inherits RoleManager(Of TestRole)
          Implements IDisposable
  inheritance:
  - System.Object
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  implements:
  - System.IDisposable
  inheritedMembers:
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Store
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Logger
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Roles
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsQueryableRoles
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsRoleClaims
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.CreateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateNormalizedRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.DeleteAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RoleExistsAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.NormalizeKey(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByIdAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.String)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleIdAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByNameAsync(System.String)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.AddClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RemoveClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetClaimsAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose(System.Boolean)
  - Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.ThrowIfDisposed
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager.#ctor
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager.#ctor
  id: '#ctor'
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager
  langs:
  - csharp
  - vb
  name: CustomRoleManager()
  nameWithType: UserManagerTest.CustomRoleManager.CustomRoleManager()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTest.CustomRoleManager.CustomRoleManager()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.Test/UserManagerTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: test/Microsoft.AspNetCore.Identity.Test/UserManagerTest.cs
    startLine: 59
  assemblies:
  - Microsoft.AspNetCore.Identity.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public CustomRoleManager()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<TestRole>
  nameWithType: RoleManager<TestRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>
  nameWithType.vb: RoleManager(Of TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole)
  name.vb: RoleManager(Of TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Store
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Store
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.Store
  name: Store
  nameWithType: RoleManager<TestRole>.Store
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Store
  nameWithType.vb: RoleManager(Of TestRole).Store
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Store
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Logger
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Logger
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  name: Logger
  nameWithType: RoleManager<TestRole>.Logger
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Logger
  nameWithType.vb: RoleManager(Of TestRole).Logger
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Logger
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Roles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Roles
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  name: Roles
  nameWithType: RoleManager<TestRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Roles
  nameWithType.vb: RoleManager(Of TestRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Roles
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsQueryableRoles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsQueryableRoles
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  name: SupportsQueryableRoles
  nameWithType: RoleManager<TestRole>.SupportsQueryableRoles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.SupportsQueryableRoles
  nameWithType.vb: RoleManager(Of TestRole).SupportsQueryableRoles
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).SupportsQueryableRoles
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsRoleClaims
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SupportsRoleClaims
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  name: SupportsRoleClaims
  nameWithType: RoleManager<TestRole>.SupportsRoleClaims
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.SupportsRoleClaims
  nameWithType.vb: RoleManager(Of TestRole).SupportsRoleClaims
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).SupportsRoleClaims
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.CreateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.CreateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  name: CreateAsync(TestRole)
  nameWithType: RoleManager<TestRole>.CreateAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.CreateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).CreateAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).CreateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: RoleManager<TestRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: RoleManager(Of TestRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateNormalizedRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateNormalizedRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  name: UpdateNormalizedRoleNameAsync(TestRole)
  nameWithType: RoleManager<TestRole>.UpdateNormalizedRoleNameAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.UpdateNormalizedRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).UpdateNormalizedRoleNameAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).UpdateNormalizedRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
    name: UpdateNormalizedRoleNameAsync
    nameWithType: RoleManager<TestRole>.UpdateNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.UpdateNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
    name: UpdateNormalizedRoleNameAsync
    nameWithType: RoleManager(Of TestRole).UpdateNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).UpdateNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.UpdateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  name: UpdateAsync(TestRole)
  nameWithType: RoleManager<TestRole>.UpdateAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.UpdateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).UpdateAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).UpdateAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: RoleManager<TestRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: RoleManager(Of TestRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.DeleteAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.DeleteAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  name: DeleteAsync(TestRole)
  nameWithType: RoleManager<TestRole>.DeleteAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.DeleteAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).DeleteAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).DeleteAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
    name: DeleteAsync
    nameWithType: RoleManager<TestRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
    name: DeleteAsync
    nameWithType: RoleManager(Of TestRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RoleExistsAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RoleExistsAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  name: RoleExistsAsync(String)
  nameWithType: RoleManager<TestRole>.RoleExistsAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.RoleExistsAsync(System.String)
  nameWithType.vb: RoleManager(Of TestRole).RoleExistsAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).RoleExistsAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
    name: RoleExistsAsync
    nameWithType: RoleManager<TestRole>.RoleExistsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.RoleExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
    name: RoleExistsAsync
    nameWithType: RoleManager(Of TestRole).RoleExistsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).RoleExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.NormalizeKey(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.NormalizeKey(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  name: NormalizeKey(String)
  nameWithType: RoleManager<TestRole>.NormalizeKey(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.NormalizeKey(System.String)
  nameWithType.vb: RoleManager(Of TestRole).NormalizeKey(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).NormalizeKey(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
    name: NormalizeKey
    nameWithType: RoleManager<TestRole>.NormalizeKey
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.NormalizeKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
    name: NormalizeKey
    nameWithType: RoleManager(Of TestRole).NormalizeKey
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).NormalizeKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByIdAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByIdAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  name: FindByIdAsync(String)
  nameWithType: RoleManager<TestRole>.FindByIdAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.FindByIdAsync(System.String)
  nameWithType.vb: RoleManager(Of TestRole).FindByIdAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).FindByIdAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
    name: FindByIdAsync
    nameWithType: RoleManager<TestRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
    name: FindByIdAsync
    nameWithType: RoleManager(Of TestRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  name: GetRoleNameAsync(TestRole)
  nameWithType: RoleManager<TestRole>.GetRoleNameAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).GetRoleNameAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
    name: GetRoleNameAsync
    nameWithType: RoleManager<TestRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
    name: GetRoleNameAsync
    nameWithType: RoleManager(Of TestRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.SetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  name: SetRoleNameAsync(TestRole, String)
  nameWithType: RoleManager<TestRole>.SetRoleNameAsync(TestRole, String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.SetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.String)
  nameWithType.vb: RoleManager(Of TestRole).SetRoleNameAsync(TestRole, String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).SetRoleNameAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
    name: SetRoleNameAsync
    nameWithType: RoleManager<TestRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
    name: SetRoleNameAsync
    nameWithType: RoleManager(Of TestRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleIdAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetRoleIdAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  name: GetRoleIdAsync(TestRole)
  nameWithType: RoleManager<TestRole>.GetRoleIdAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetRoleIdAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).GetRoleIdAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetRoleIdAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
    name: GetRoleIdAsync
    nameWithType: RoleManager<TestRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
    name: GetRoleIdAsync
    nameWithType: RoleManager(Of TestRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByNameAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.FindByNameAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  name: FindByNameAsync(String)
  nameWithType: RoleManager<TestRole>.FindByNameAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.FindByNameAsync(System.String)
  nameWithType.vb: RoleManager(Of TestRole).FindByNameAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).FindByNameAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: RoleManager<TestRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: RoleManager(Of TestRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.AddClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.AddClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  name: AddClaimAsync(TestRole, Claim)
  nameWithType: RoleManager<TestRole>.AddClaimAsync(TestRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.AddClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.Security.Claims.Claim)
  nameWithType.vb: RoleManager(Of TestRole).AddClaimAsync(TestRole, Claim)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).AddClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.Security.Claims.Claim)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
    name: AddClaimAsync
    nameWithType: RoleManager<TestRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
    name: AddClaimAsync
    nameWithType: RoleManager(Of TestRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RemoveClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.RemoveClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole,System.Security.Claims.Claim)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  name: RemoveClaimAsync(TestRole, Claim)
  nameWithType: RoleManager<TestRole>.RemoveClaimAsync(TestRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.RemoveClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.Security.Claims.Claim)
  nameWithType.vb: RoleManager(Of TestRole).RemoveClaimAsync(TestRole, Claim)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).RemoveClaimAsync(Microsoft.AspNetCore.Identity.Test.TestRole, System.Security.Claims.Claim)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
    name: RemoveClaimAsync
    nameWithType: RoleManager<TestRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
    name: RemoveClaimAsync
    nameWithType: RoleManager(Of TestRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetClaimsAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.GetClaimsAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  name: GetClaimsAsync(TestRole)
  nameWithType: RoleManager<TestRole>.GetClaimsAsync(TestRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetClaimsAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  nameWithType.vb: RoleManager(Of TestRole).GetClaimsAsync(TestRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetClaimsAsync(Microsoft.AspNetCore.Identity.Test.TestRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
    name: GetClaimsAsync
    nameWithType: RoleManager<TestRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
    name: GetClaimsAsync
    nameWithType: RoleManager(Of TestRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.AspNetCore.Identity.Test.TestRole
    name: TestRole
    nameWithType: TestRole
    fullName: Microsoft.AspNetCore.Identity.Test.TestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  name: Dispose()
  nameWithType: RoleManager<TestRole>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Dispose()
  nameWithType.vb: RoleManager(Of TestRole).Dispose()
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Dispose()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
    name: Dispose
    nameWithType: RoleManager<TestRole>.Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
    name: Dispose
    nameWithType: RoleManager(Of TestRole).Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.Dispose(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  name: Dispose(Boolean)
  nameWithType: RoleManager<TestRole>.Dispose(Boolean)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Dispose(System.Boolean)
  nameWithType.vb: RoleManager(Of TestRole).Dispose(Boolean)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Dispose(System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: RoleManager<TestRole>.Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: RoleManager(Of TestRole).Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}.ThrowIfDisposed
  parent: Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.Test.TestRole}
  definition: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  name: ThrowIfDisposed()
  nameWithType: RoleManager<TestRole>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.ThrowIfDisposed()
  nameWithType.vb: RoleManager(Of TestRole).ThrowIfDisposed()
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: RoleManager<TestRole>.ThrowIfDisposed
    fullName: Microsoft.AspNetCore.Identity.RoleManager<Microsoft.AspNetCore.Identity.Test.TestRole>.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: RoleManager(Of TestRole).ThrowIfDisposed
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of Microsoft.AspNetCore.Identity.Test.TestRole).ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: false
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Store
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Store
  isExternal: false
  name: Store
  nameWithType: RoleManager<TRole>.Store
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Store
  nameWithType.vb: RoleManager(Of TRole).Store
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Store
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Logger
  isExternal: false
  name: Logger
  nameWithType: RoleManager<TRole>.Logger
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Logger
  nameWithType.vb: RoleManager(Of TRole).Logger
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Logger
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.Roles
  isExternal: false
  name: Roles
  nameWithType: RoleManager<TRole>.Roles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Roles
  nameWithType.vb: RoleManager(Of TRole).Roles
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Roles
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsQueryableRoles
  isExternal: false
  name: SupportsQueryableRoles
  nameWithType: RoleManager<TRole>.SupportsQueryableRoles
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsQueryableRoles
  nameWithType.vb: RoleManager(Of TRole).SupportsQueryableRoles
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SupportsQueryableRoles
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  commentId: P:Microsoft.AspNetCore.Identity.RoleManager`1.SupportsRoleClaims
  isExternal: false
  name: SupportsRoleClaims
  nameWithType: RoleManager<TRole>.SupportsRoleClaims
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsRoleClaims
  nameWithType.vb: RoleManager(Of TRole).SupportsRoleClaims
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SupportsRoleClaims
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
  isExternal: false
  name: CreateAsync(TRole)
  nameWithType: RoleManager<TRole>.CreateAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.CreateAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).CreateAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).CreateAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: RoleManager<TRole>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: RoleManager(Of TRole).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
  isExternal: false
  name: UpdateNormalizedRoleNameAsync(TRole)
  nameWithType: RoleManager<TRole>.UpdateNormalizedRoleNameAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateNormalizedRoleNameAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).UpdateNormalizedRoleNameAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateNormalizedRoleNameAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
    name: UpdateNormalizedRoleNameAsync
    nameWithType: RoleManager<TRole>.UpdateNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateNormalizedRoleNameAsync(`0)
    name: UpdateNormalizedRoleNameAsync
    nameWithType: RoleManager(Of TRole).UpdateNormalizedRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateNormalizedRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
  isExternal: false
  name: UpdateAsync(TRole)
  nameWithType: RoleManager<TRole>.UpdateAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).UpdateAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: RoleManager<TRole>.UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.UpdateAsync(`0)
    name: UpdateAsync
    nameWithType: RoleManager(Of TRole).UpdateAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
  isExternal: false
  name: DeleteAsync(TRole)
  nameWithType: RoleManager<TRole>.DeleteAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.DeleteAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).DeleteAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).DeleteAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
    name: DeleteAsync
    nameWithType: RoleManager<TRole>.DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.DeleteAsync(`0)
    name: DeleteAsync
    nameWithType: RoleManager(Of TRole).DeleteAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
  isExternal: true
  name: RoleExistsAsync(String)
  nameWithType: RoleManager<TRole>.RoleExistsAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleExistsAsync(System.String)
  nameWithType.vb: RoleManager(Of TRole).RoleExistsAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RoleExistsAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
    name: RoleExistsAsync
    nameWithType: RoleManager<TRole>.RoleExistsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RoleExistsAsync(System.String)
    name: RoleExistsAsync
    nameWithType: RoleManager(Of TRole).RoleExistsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RoleExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
  isExternal: true
  name: NormalizeKey(String)
  nameWithType: RoleManager<TRole>.NormalizeKey(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.NormalizeKey(System.String)
  nameWithType.vb: RoleManager(Of TRole).NormalizeKey(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).NormalizeKey(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
    name: NormalizeKey
    nameWithType: RoleManager<TRole>.NormalizeKey
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.NormalizeKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.NormalizeKey(System.String)
    name: NormalizeKey
    nameWithType: RoleManager(Of TRole).NormalizeKey
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).NormalizeKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
  isExternal: true
  name: FindByIdAsync(String)
  nameWithType: RoleManager<TRole>.FindByIdAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByIdAsync(System.String)
  nameWithType.vb: RoleManager(Of TRole).FindByIdAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByIdAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
    name: FindByIdAsync
    nameWithType: RoleManager<TRole>.FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByIdAsync(System.String)
    name: FindByIdAsync
    nameWithType: RoleManager(Of TRole).FindByIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
  isExternal: false
  name: GetRoleNameAsync(TRole)
  nameWithType: RoleManager<TRole>.GetRoleNameAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleNameAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).GetRoleNameAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleNameAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
    name: GetRoleNameAsync
    nameWithType: RoleManager<TRole>.GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleNameAsync(`0)
    name: GetRoleNameAsync
    nameWithType: RoleManager(Of TRole).GetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
  isExternal: true
  name: SetRoleNameAsync(TRole, String)
  nameWithType: RoleManager<TRole>.SetRoleNameAsync(TRole, String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SetRoleNameAsync(TRole, System.String)
  nameWithType.vb: RoleManager(Of TRole).SetRoleNameAsync(TRole, String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SetRoleNameAsync(TRole, System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
    name: SetRoleNameAsync
    nameWithType: RoleManager<TRole>.SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.SetRoleNameAsync(`0,System.String)
    name: SetRoleNameAsync
    nameWithType: RoleManager(Of TRole).SetRoleNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).SetRoleNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
  isExternal: false
  name: GetRoleIdAsync(TRole)
  nameWithType: RoleManager<TRole>.GetRoleIdAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleIdAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).GetRoleIdAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleIdAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
    name: GetRoleIdAsync
    nameWithType: RoleManager<TRole>.GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetRoleIdAsync(`0)
    name: GetRoleIdAsync
    nameWithType: RoleManager(Of TRole).GetRoleIdAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetRoleIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
  isExternal: true
  name: FindByNameAsync(String)
  nameWithType: RoleManager<TRole>.FindByNameAsync(String)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByNameAsync(System.String)
  nameWithType.vb: RoleManager(Of TRole).FindByNameAsync(String)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByNameAsync(System.String)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: RoleManager<TRole>.FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.FindByNameAsync(System.String)
    name: FindByNameAsync
    nameWithType: RoleManager(Of TRole).FindByNameAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).FindByNameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
  isExternal: true
  name: AddClaimAsync(TRole, Claim)
  nameWithType: RoleManager<TRole>.AddClaimAsync(TRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.AddClaimAsync(TRole, System.Security.Claims.Claim)
  nameWithType.vb: RoleManager(Of TRole).AddClaimAsync(TRole, Claim)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).AddClaimAsync(TRole, System.Security.Claims.Claim)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
    name: AddClaimAsync
    nameWithType: RoleManager<TRole>.AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.AddClaimAsync(`0,System.Security.Claims.Claim)
    name: AddClaimAsync
    nameWithType: RoleManager(Of TRole).AddClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).AddClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
  isExternal: true
  name: RemoveClaimAsync(TRole, Claim)
  nameWithType: RoleManager<TRole>.RemoveClaimAsync(TRole, Claim)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RemoveClaimAsync(TRole, System.Security.Claims.Claim)
  nameWithType.vb: RoleManager(Of TRole).RemoveClaimAsync(TRole, Claim)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RemoveClaimAsync(TRole, System.Security.Claims.Claim)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
    name: RemoveClaimAsync
    nameWithType: RoleManager<TRole>.RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.RemoveClaimAsync(`0,System.Security.Claims.Claim)
    name: RemoveClaimAsync
    nameWithType: RoleManager(Of TRole).RemoveClaimAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).RemoveClaimAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
  isExternal: false
  name: GetClaimsAsync(TRole)
  nameWithType: RoleManager<TRole>.GetClaimsAsync(TRole)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetClaimsAsync(TRole)
  nameWithType.vb: RoleManager(Of TRole).GetClaimsAsync(TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetClaimsAsync(TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
    name: GetClaimsAsync
    nameWithType: RoleManager<TRole>.GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.GetClaimsAsync(`0)
    name: GetClaimsAsync
    nameWithType: RoleManager(Of TRole).GetClaimsAsync
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).GetClaimsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
  isExternal: false
  name: Dispose()
  nameWithType: RoleManager<TRole>.Dispose()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose()
  nameWithType.vb: RoleManager(Of TRole).Dispose()
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
    name: Dispose
    nameWithType: RoleManager<TRole>.Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose
    name: Dispose
    nameWithType: RoleManager(Of TRole).Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: RoleManager<TRole>.Dispose(Boolean)
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose(System.Boolean)
  nameWithType.vb: RoleManager(Of TRole).Dispose(Boolean)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose(System.Boolean)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: RoleManager<TRole>.Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: RoleManager(Of TRole).Dispose
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  commentId: M:Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
  isExternal: false
  name: ThrowIfDisposed()
  nameWithType: RoleManager<TRole>.ThrowIfDisposed()
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.ThrowIfDisposed()
  nameWithType.vb: RoleManager(Of TRole).ThrowIfDisposed()
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).ThrowIfDisposed()
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: RoleManager<TRole>.ThrowIfDisposed
    fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>.ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: RoleManager(Of TRole).ThrowIfDisposed
    fullName: Microsoft.AspNetCore.Identity.RoleManager(Of TRole).ThrowIfDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
