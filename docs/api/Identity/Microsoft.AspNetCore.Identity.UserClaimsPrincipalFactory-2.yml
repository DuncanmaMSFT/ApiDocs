### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  commentId: T:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  id: UserClaimsPrincipalFactory`2
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.RoleManager{`1},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions})
  - Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.CreateAsync(`0)
  - Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.Options
  - Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.RoleManager
  - Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.UserManager
  langs:
  - csharp
  - vb
  name: UserClaimsPrincipalFactory<TUser, TRole>
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserClaimsPrincipalFactory
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 16
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides methods to create a claims principal for a given user.\n"
  example: []
  syntax:
    content: 'public class UserClaimsPrincipalFactory<TUser, TRole> : IUserClaimsPrincipalFactory<TUser> where TUser : class where TRole : class'
    content.vb: >-
      Public Class UserClaimsPrincipalFactory(Of TUser As Class, TRole As Class)
          Implements IUserClaimsPrincipalFactory(Of TUser)
    typeParameters:
    - id: TUser
      description: The type used to represent a user.
    - id: TRole
      description: The type used to represent a role.
  inheritance:
  - System.Object
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole)
  name.vb: UserClaimsPrincipalFactory(Of TUser, TRole)
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.RoleManager{`1},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions})
  commentId: M:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.RoleManager{`1},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions})
  id: '#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Identity.RoleManager{`1},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions})'
  parent: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  langs:
  - csharp
  - vb
  name: UserClaimsPrincipalFactory(UserManager<TUser>, RoleManager<TRole>, IOptions<IdentityOptions>)
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>.UserClaimsPrincipalFactory(UserManager<TUser>, RoleManager<TRole>, IOptions<IdentityOptions>)
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.UserClaimsPrincipalFactory(Microsoft.AspNetCore.Identity.UserManager<TUser>, Microsoft.AspNetCore.Identity.RoleManager<TRole>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 26
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory%602\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public UserClaimsPrincipalFactory(UserManager<TUser> userManager, RoleManager<TRole> roleManager, IOptions<IdentityOptions> optionsAccessor)
    content.vb: Public Sub New(userManager As UserManager(Of TUser), roleManager As RoleManager(Of TRole), optionsAccessor As IOptions(Of IdentityOptions))
    parameters:
    - id: userManager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: The <xref href="Microsoft.AspNetCore.Identity.UserManager%601" data-throw-if-not-resolved="false"></xref> to retrieve user information from.
    - id: roleManager
      type: Microsoft.AspNetCore.Identity.RoleManager{{TRole}}
      description: The <xref href="Microsoft.AspNetCore.Identity.RoleManager%601" data-throw-if-not-resolved="false"></xref> to retrieve a user's roles from.
    - id: optionsAccessor
      type: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
      description: The configured <xref href="Microsoft.AspNetCore.Builder.IdentityOptions" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole).UserClaimsPrincipalFactory(UserManager(Of TUser), RoleManager(Of TRole), IOptions(Of IdentityOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole).UserClaimsPrincipalFactory(Microsoft.AspNetCore.Identity.UserManager(Of TUser), Microsoft.AspNetCore.Identity.RoleManager(Of TRole), Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions))
  name.vb: UserClaimsPrincipalFactory(UserManager(Of TUser), RoleManager(Of TRole), IOptions(Of IdentityOptions))
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.UserManager
  commentId: P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.UserManager
  id: UserManager
  parent: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  langs:
  - csharp
  - vb
  name: UserManager
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>.UserManager
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.UserManager
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserManager
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 54
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Identity.UserManager%601\" data-throw-if-not-resolved=\"false\"></xref> for this factory.\n"
  example: []
  syntax:
    content: public UserManager<TUser> UserManager { get; }
    content.vb: Public ReadOnly Property UserManager As UserManager(Of TUser)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: "\nThe current <xref href=\"Microsoft.AspNetCore.Identity.UserManager%601\" data-throw-if-not-resolved=\"false\"></xref> for this factory instance.\n"
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole).UserManager
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole).UserManager
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.RoleManager
  commentId: P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.RoleManager
  id: RoleManager
  parent: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  langs:
  - csharp
  - vb
  name: RoleManager
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>.RoleManager
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.RoleManager
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleManager
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 62
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Identity.RoleManager%601\" data-throw-if-not-resolved=\"false\"></xref> for this factory.\n"
  example: []
  syntax:
    content: public RoleManager<TRole> RoleManager { get; }
    content.vb: Public ReadOnly Property RoleManager As RoleManager(Of TRole)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.RoleManager{{TRole}}
      description: "\nThe current <xref href=\"Microsoft.AspNetCore.Identity.RoleManager%601\" data-throw-if-not-resolved=\"false\"></xref> for this factory instance.\n"
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole).RoleManager
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole).RoleManager
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.Options
  commentId: P:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.Options
  id: Options
  parent: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>.Options
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.Options
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Options
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.AspNetCore.Builder.IdentityOptions\" data-throw-if-not-resolved=\"false\"></xref> for this factory.\n"
  example: []
  syntax:
    content: public IdentityOptions Options { get; }
    content.vb: Public ReadOnly Property Options As IdentityOptions
    parameters: []
    return:
      type: Microsoft.AspNetCore.Builder.IdentityOptions
      description: "\nThe current <xref href=\"Microsoft.AspNetCore.Builder.IdentityOptions\" data-throw-if-not-resolved=\"false\"></xref> for this factory instance.\n"
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole).Options
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole).Options
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2.CreateAsync(`0)
  id: CreateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  langs:
  - csharp
  - vb
  name: CreateAsync(TUser)
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>.CreateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.CreateAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateAsync
    path: src/Microsoft.AspNetCore.Identity/UserClaimsPrincipalFactory.cs
    startLine: 77
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> from an user asynchronously.\n"
  example: []
  syntax:
    content: public virtual Task<ClaimsPrincipal> CreateAsync(TUser user)
    content.vb: Public Overridable Function CreateAsync(user As TUser) As Task(Of ClaimsPrincipal)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create a <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> from.
    return:
      type: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous creation operation, containing the created <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}.CreateAsync({TUser})
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole).CreateAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole).CreateAsync(TUser)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  name: IUserClaimsPrincipalFactory<TUser>
  nameWithType: IUserClaimsPrincipalFactory<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser)
  name.vb: IUserClaimsPrincipalFactory(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  isExternal: false
  name: IUserClaimsPrincipalFactory<TUser>
  nameWithType: IUserClaimsPrincipalFactory<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser)
  name.vb: IUserClaimsPrincipalFactory(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  commentId: T:Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
  isExternal: false
  name: UserClaimsPrincipalFactory<TUser, TRole>
  nameWithType: UserClaimsPrincipalFactory<TUser, TRole>
  fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>
  nameWithType.vb: UserClaimsPrincipalFactory(Of TUser, TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory(Of TUser, TRole)
  name.vb: UserClaimsPrincipalFactory(Of TUser, TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
    name: UserClaimsPrincipalFactory
    nameWithType: UserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2
    name: UserClaimsPrincipalFactory
    nameWithType: UserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: false
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Builder.IdentityOptions
  commentId: T:Microsoft.AspNetCore.Builder.IdentityOptions
  parent: Microsoft.AspNetCore.Builder
  isExternal: false
  name: IdentityOptions
  nameWithType: IdentityOptions
  fullName: Microsoft.AspNetCore.Builder.IdentityOptions
- uid: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<IdentityOptions>
  nameWithType: IOptions<IdentityOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>
  nameWithType.vb: IOptions(Of IdentityOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions)
  name.vb: IOptions(Of IdentityOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Builder
  commentId: N:Microsoft.AspNetCore.Builder
  isExternal: false
  name: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}.CreateAsync({TUser})
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0}.CreateAsync(`0)
  parent: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}
  definition: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  name: CreateAsync(TUser)
  nameWithType: IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: IUserClaimsPrincipalFactory<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: IUserClaimsPrincipalFactory(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  commentId: T:System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClaimsPrincipal>
  nameWithType: Task<ClaimsPrincipal>
  fullName: System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal>
  nameWithType.vb: Task(Of ClaimsPrincipal)
  fullname.vb: System.Threading.Tasks.Task(Of System.Security.Claims.ClaimsPrincipal)
  name.vb: Task(Of ClaimsPrincipal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
  isExternal: false
  name: CreateAsync(TUser)
  nameWithType: IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser)
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser).CreateAsync(TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: IUserClaimsPrincipalFactory<TUser>.CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1.CreateAsync(`0)
    name: CreateAsync
    nameWithType: IUserClaimsPrincipalFactory(Of TUser).CreateAsync
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser).CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
