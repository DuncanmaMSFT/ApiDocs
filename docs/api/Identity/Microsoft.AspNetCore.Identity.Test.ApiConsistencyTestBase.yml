### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  commentId: T:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  id: ApiConsistencyTestBase
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Async_methods_should_end_with_async_suffix
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAllTypes(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAsyncSuffixExceptions
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetBasestTypeInAssembly(System.Type)
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetCancellationTokenExceptions
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Public_inheritable_apis_should_be_virtual
  - Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.TargetAssembly
  langs:
  - csharp
  - vb
  name: ApiConsistencyTestBase
  nameWithType: ApiConsistencyTestBase
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  type: Class
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ApiConsistencyTestBase
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 12
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public abstract class ApiConsistencyTestBase
    content.vb: Public MustInherit Class ApiConsistencyTestBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Public_inheritable_apis_should_be_virtual
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Public_inheritable_apis_should_be_virtual
  id: Public_inheritable_apis_should_be_virtual
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: Public_inheritable_apis_should_be_virtual()
  nameWithType: ApiConsistencyTestBase.Public_inheritable_apis_should_be_virtual()
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Public_inheritable_apis_should_be_virtual()
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Public_inheritable_apis_should_be_virtual
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 14
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public void Public_inheritable_apis_should_be_virtual()
    content.vb: >-
      <Fact>

      Public Sub Public_inheritable_apis_should_be_virtual
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Async_methods_should_end_with_async_suffix
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Async_methods_should_end_with_async_suffix
  id: Async_methods_should_end_with_async_suffix
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: Async_methods_should_end_with_async_suffix()
  nameWithType: ApiConsistencyTestBase.Async_methods_should_end_with_async_suffix()
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.Async_methods_should_end_with_async_suffix()
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Async_methods_should_end_with_async_suffix
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public void Async_methods_should_end_with_async_suffix()
    content.vb: >-
      <Fact>

      Public Sub Async_methods_should_end_with_async_suffix
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetCancellationTokenExceptions
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetCancellationTokenExceptions
  id: GetCancellationTokenExceptions
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: GetCancellationTokenExceptions()
  nameWithType: ApiConsistencyTestBase.GetCancellationTokenExceptions()
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetCancellationTokenExceptions()
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetCancellationTokenExceptions
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 61
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual IEnumerable<string> GetCancellationTokenExceptions()
    content.vb: Protected Overridable Function GetCancellationTokenExceptions As IEnumerable(Of String)
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAsyncSuffixExceptions
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAsyncSuffixExceptions
  id: GetAsyncSuffixExceptions
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: GetAsyncSuffixExceptions()
  nameWithType: ApiConsistencyTestBase.GetAsyncSuffixExceptions()
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAsyncSuffixExceptions()
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAsyncSuffixExceptions
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 66
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual IEnumerable<string> GetAsyncSuffixExceptions()
    content.vb: Protected Overridable Function GetAsyncSuffixExceptions As IEnumerable(Of String)
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.TargetAssembly
  commentId: P:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.TargetAssembly
  id: TargetAssembly
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: TargetAssembly
  nameWithType: ApiConsistencyTestBase.TargetAssembly
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.TargetAssembly
  type: Property
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TargetAssembly
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract Assembly TargetAssembly { get; }
    content.vb: Protected MustOverride ReadOnly Property TargetAssembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAllTypes(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAllTypes(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})
  id: GetAllTypes(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: GetAllTypes(IEnumerable<TypeInfo>)
  nameWithType: ApiConsistencyTestBase.GetAllTypes(IEnumerable<TypeInfo>)
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAllTypes(System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>)
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetAllTypes
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 73
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual IEnumerable<TypeInfo> GetAllTypes(IEnumerable<TypeInfo> types)
    content.vb: Protected Overridable Function GetAllTypes(types As IEnumerable(Of TypeInfo)) As IEnumerable(Of TypeInfo)
    parameters:
    - id: types
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  nameWithType.vb: ApiConsistencyTestBase.GetAllTypes(IEnumerable(Of TypeInfo))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetAllTypes(System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo))
  name.vb: GetAllTypes(IEnumerable(Of TypeInfo))
- uid: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetBasestTypeInAssembly(System.Type)
  commentId: M:Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetBasestTypeInAssembly(System.Type)
  id: GetBasestTypeInAssembly(System.Type)
  parent: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase
  langs:
  - csharp
  - vb
  name: GetBasestTypeInAssembly(Type)
  nameWithType: ApiConsistencyTestBase.GetBasestTypeInAssembly(Type)
  fullName: Microsoft.AspNetCore.Identity.Test.ApiConsistencyTestBase.GetBasestTypeInAssembly(System.Type)
  type: Method
  source:
    remote:
      path: test/Shared/ApiConsistencyTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetBasestTypeInAssembly
    path: test/Shared/ApiConsistencyTestBase.cs
    startLine: 86
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected TypeInfo GetBasestTypeInAssembly(Type type)
    content.vb: Protected Function GetBasestTypeInAssembly(type As Type) As TypeInfo
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.TypeInfo
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeInfo>
  nameWithType: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: true
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
