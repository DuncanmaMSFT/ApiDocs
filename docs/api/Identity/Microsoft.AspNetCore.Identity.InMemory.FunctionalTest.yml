### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  commentId: T:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  id: FunctionalTest
  parent: Microsoft.AspNetCore.Identity.InMemory
  children:
  - Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanChangePasswordOptions
  - Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndCookieStopsWorkingAfterExpiration
  - Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndSecurityStampExtendsExpiration(System.Boolean)
  - Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.TwoFactorRememberCookieVerification
  - Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.UseIdentityThrowsWithoutAddIdentity
  langs:
  - csharp
  - vb
  name: FunctionalTest
  nameWithType: FunctionalTest
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  type: Class
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: FunctionalTest
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: public class FunctionalTest
    content.vb: Public Class FunctionalTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.UseIdentityThrowsWithoutAddIdentity
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.UseIdentityThrowsWithoutAddIdentity
  id: UseIdentityThrowsWithoutAddIdentity
  parent: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  langs:
  - csharp
  - vb
  name: UseIdentityThrowsWithoutAddIdentity()
  nameWithType: FunctionalTest.UseIdentityThrowsWithoutAddIdentity()
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.UseIdentityThrowsWithoutAddIdentity()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UseIdentityThrowsWithoutAddIdentity
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 29
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: >-
      [Fact]

      public void UseIdentityThrowsWithoutAddIdentity()
    content.vb: >-
      <Fact>

      Public Sub UseIdentityThrowsWithoutAddIdentity
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanChangePasswordOptions
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanChangePasswordOptions
  id: CanChangePasswordOptions
  parent: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  langs:
  - csharp
  - vb
  name: CanChangePasswordOptions()
  nameWithType: FunctionalTest.CanChangePasswordOptions()
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanChangePasswordOptions()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChangePasswordOptions
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: >-
      [Fact]

      public Task CanChangePasswordOptions()
    content.vb: >-
      <Fact>

      Public Function CanChangePasswordOptions As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndCookieStopsWorkingAfterExpiration
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndCookieStopsWorkingAfterExpiration
  id: CanCreateMeLoginAndCookieStopsWorkingAfterExpiration
  parent: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  langs:
  - csharp
  - vb
  name: CanCreateMeLoginAndCookieStopsWorkingAfterExpiration()
  nameWithType: FunctionalTest.CanCreateMeLoginAndCookieStopsWorkingAfterExpiration()
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndCookieStopsWorkingAfterExpiration()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateMeLoginAndCookieStopsWorkingAfterExpiration
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: >-
      [Fact]

      public Task CanCreateMeLoginAndCookieStopsWorkingAfterExpiration()
    content.vb: >-
      <Fact>

      Public Function CanCreateMeLoginAndCookieStopsWorkingAfterExpiration As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndSecurityStampExtendsExpiration(System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndSecurityStampExtendsExpiration(System.Boolean)
  id: CanCreateMeLoginAndSecurityStampExtendsExpiration(System.Boolean)
  parent: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  langs:
  - csharp
  - vb
  name: CanCreateMeLoginAndSecurityStampExtendsExpiration(Boolean)
  nameWithType: FunctionalTest.CanCreateMeLoginAndSecurityStampExtendsExpiration(Boolean)
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.CanCreateMeLoginAndSecurityStampExtendsExpiration(System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateMeLoginAndSecurityStampExtendsExpiration
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(new object[]{false})]

      public Task CanCreateMeLoginAndSecurityStampExtendsExpiration(bool rememberMe)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(New Object() {False})>

      Public Function CanCreateMeLoginAndSecurityStampExtendsExpiration(rememberMe As Boolean) As Task
    parameters:
    - id: rememberMe
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.TwoFactorRememberCookieVerification
  commentId: M:Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.TwoFactorRememberCookieVerification
  id: TwoFactorRememberCookieVerification
  parent: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest
  langs:
  - csharp
  - vb
  name: TwoFactorRememberCookieVerification()
  nameWithType: FunctionalTest.TwoFactorRememberCookieVerification()
  fullName: Microsoft.AspNetCore.Identity.InMemory.FunctionalTest.TwoFactorRememberCookieVerification()
  type: Method
  source:
    remote:
      path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TwoFactorRememberCookieVerification
    path: test/Microsoft.AspNetCore.Identity.InMemory.Test/FunctionalTest.cs
    startLine: 141
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.InMemory
  syntax:
    content: >-
      [Fact]

      public Task TwoFactorRememberCookieVerification()
    content.vb: >-
      <Fact>

      Public Function TwoFactorRememberCookieVerification As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.AspNetCore.Identity.InMemory
  commentId: N:Microsoft.AspNetCore.Identity.InMemory
  isExternal: false
  name: Microsoft.AspNetCore.Identity.InMemory
  nameWithType: Microsoft.AspNetCore.Identity.InMemory
  fullName: Microsoft.AspNetCore.Identity.InMemory
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
