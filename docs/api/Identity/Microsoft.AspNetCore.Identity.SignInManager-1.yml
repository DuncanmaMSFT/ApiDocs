### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.SignInManager`1
  commentId: T:Microsoft.AspNetCore.Identity.SignInManager`1
  id: SignInManager`1
  parent: Microsoft.AspNetCore.Identity
  children:
  - Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})
  - Microsoft.AspNetCore.Identity.SignInManager`1.CanSignInAsync(`0)
  - Microsoft.AspNetCore.Identity.SignInManager`1.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)
  - Microsoft.AspNetCore.Identity.SignInManager`1.CreateUserPrincipalAsync(`0)
  - Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)
  - Microsoft.AspNetCore.Identity.SignInManager`1.ForgetTwoFactorClientAsync
  - Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemes
  - Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalLoginInfoAsync(System.String)
  - Microsoft.AspNetCore.Identity.SignInManager`1.GetTwoFactorAuthenticationUserAsync
  - Microsoft.AspNetCore.Identity.SignInManager`1.IsSignedIn(System.Security.Claims.ClaimsPrincipal)
  - Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorClientRememberedAsync(`0)
  - Microsoft.AspNetCore.Identity.SignInManager`1.Logger
  - Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.SignInManager`1.RefreshSignInAsync(`0)
  - Microsoft.AspNetCore.Identity.SignInManager`1.RememberTwoFactorClientAsync(`0)
  - Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)
  - Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,System.Boolean,System.String)
  - Microsoft.AspNetCore.Identity.SignInManager`1.SignOutAsync
  - Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  - Microsoft.AspNetCore.Identity.SignInManager`1.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  - Microsoft.AspNetCore.Identity.SignInManager`1.UserManager
  - Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
  langs:
  - csharp
  - vb
  name: SignInManager<TUser>
  nameWithType: SignInManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignInManager
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 22
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nProvides the APIs for user sign in.\n"
  example: []
  syntax:
    content: >-
      public class SignInManager<TUser>
          where TUser : class
    content.vb: Public Class SignInManager(Of TUser As Class)
    typeParameters:
    - id: TUser
      description: The type encapsulating a user.
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SignInManager(Of TUser)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser)
  name.vb: SignInManager(Of TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})
  id: '#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})'
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: SignInManager(UserManager<TUser>, IHttpContextAccessor, IUserClaimsPrincipalFactory<TUser>, IOptions<IdentityOptions>, ILogger<SignInManager<TUser>>)
  nameWithType: SignInManager<TUser>.SignInManager(UserManager<TUser>, IHttpContextAccessor, IUserClaimsPrincipalFactory<TUser>, IOptions<IdentityOptions>, ILogger<SignInManager<TUser>>)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.SignInManager(Microsoft.AspNetCore.Identity.UserManager<TUser>, Microsoft.AspNetCore.Http.IHttpContextAccessor, Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.SignInManager<TUser>>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 35
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates a new instance of <xref href=\"Microsoft.AspNetCore.Identity.SignInManager%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SignInManager(UserManager<TUser> userManager, IHttpContextAccessor contextAccessor, IUserClaimsPrincipalFactory<TUser> claimsFactory, IOptions<IdentityOptions> optionsAccessor, ILogger<SignInManager<TUser>> logger)
    content.vb: Public Sub New(userManager As UserManager(Of TUser), contextAccessor As IHttpContextAccessor, claimsFactory As IUserClaimsPrincipalFactory(Of TUser), optionsAccessor As IOptions(Of IdentityOptions), logger As ILogger(Of SignInManager(Of TUser)))
    parameters:
    - id: userManager
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
      description: An instance of <xref href="Microsoft.AspNetCore.Identity.SignInManager%601.UserManager" data-throw-if-not-resolved="false"></xref> used to retrieve users from and persist users.
    - id: contextAccessor
      type: Microsoft.AspNetCore.Http.IHttpContextAccessor
      description: The accessor used to access the <xref href="Microsoft.AspNetCore.Http.HttpContext" data-throw-if-not-resolved="false"></xref>.
    - id: claimsFactory
      type: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}
      description: The factory to use to create claims principals for a user.
    - id: optionsAccessor
      type: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
      description: The accessor used to access the <xref href="Microsoft.AspNetCore.Builder.IdentityOptions" data-throw-if-not-resolved="false"></xref>.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager`1}
      description: The logger used to log messages, warnings and errors.
  nameWithType.vb: SignInManager(Of TUser).SignInManager(UserManager(Of TUser), IHttpContextAccessor, IUserClaimsPrincipalFactory(Of TUser), IOptions(Of IdentityOptions), ILogger(Of SignInManager(Of TUser)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).SignInManager(Microsoft.AspNetCore.Identity.UserManager(Of TUser), Microsoft.AspNetCore.Http.IHttpContextAccessor, Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser), Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions), Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.SignInManager(Of TUser)))
  name.vb: SignInManager(UserManager(Of TUser), IHttpContextAccessor, IUserClaimsPrincipalFactory(Of TUser), IOptions(Of IdentityOptions), ILogger(Of SignInManager(Of TUser)))
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.Logger
  commentId: P:Microsoft.AspNetCore.Identity.SignInManager`1.Logger
  id: Logger
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: SignInManager<TUser>.Logger
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: Logger
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 70
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  example: []
  syntax:
    content: protected virtual ILogger Logger { get; set; }
    content.vb: Protected Overridable Property Logger As ILogger
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
      description: "\nThe <xref href=\"Microsoft.Extensions.Logging.ILogger\" data-throw-if-not-resolved=\"false\"></xref> used to log messages from the manager.\n"
  nameWithType.vb: SignInManager(Of TUser).Logger
  modifiers.csharp:
  - protected
  - virtual
  - get
  - set
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).Logger
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.UserManager
  commentId: P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager
  id: UserManager
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: UserManager
  nameWithType: SignInManager<TUser>.UserManager
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.UserManager
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserManager
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 71
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  syntax:
    content: protected UserManager<TUser> UserManager { get; set; }
    content.vb: Protected Property UserManager As UserManager(Of TUser)
    parameters: []
    return:
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  nameWithType.vb: SignInManager(Of TUser).UserManager
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).UserManager
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.CreateUserPrincipalAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.CreateUserPrincipalAsync(`0)
  id: CreateUserPrincipalAsync(`0)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: CreateUserPrincipalAsync(TUser)
  nameWithType: SignInManager<TUser>.CreateUserPrincipalAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.CreateUserPrincipalAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUserPrincipalAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nCreates a <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> for the specified <em>user</em>, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<ClaimsPrincipal> CreateUserPrincipalAsync(TUser user)
    content.vb: Public Overridable Function CreateUserPrincipalAsync(user As TUser) As Task(Of ClaimsPrincipal)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to create a <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> for.
    return:
      type: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
      description: The task object representing the asynchronous operation, containing the ClaimsPrincipal for the specified user.
  nameWithType.vb: SignInManager(Of TUser).CreateUserPrincipalAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).CreateUserPrincipalAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.IsSignedIn(System.Security.Claims.ClaimsPrincipal)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.IsSignedIn(System.Security.Claims.ClaimsPrincipal)
  id: IsSignedIn(System.Security.Claims.ClaimsPrincipal)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: IsSignedIn(ClaimsPrincipal)
  nameWithType: SignInManager<TUser>.IsSignedIn(ClaimsPrincipal)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.IsSignedIn(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsSignedIn
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 104
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns true if the principal has an identity with the application cookie identity\n"
  example: []
  syntax:
    content: public virtual bool IsSignedIn(ClaimsPrincipal principal)
    content.vb: Public Overridable Function IsSignedIn(principal As ClaimsPrincipal) As Boolean
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: The <xref href="System.Security.Claims.ClaimsPrincipal" data-throw-if-not-resolved="false"></xref> instance.
    return:
      type: System.Boolean
      description: True if the user is logged in with identity.
  nameWithType.vb: SignInManager(Of TUser).IsSignedIn(ClaimsPrincipal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).IsSignedIn(System.Security.Claims.ClaimsPrincipal)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.CanSignInAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.CanSignInAsync(`0)
  id: CanSignInAsync(`0)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: CanSignInAsync(TUser)
  nameWithType: SignInManager<TUser>.CanSignInAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.CanSignInAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 122
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating whether the specified user can sign in.\n"
  example: []
  syntax:
    content: public virtual Task<bool> CanSignInAsync(TUser user)
    content.vb: Public Overridable Function CanSignInAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose sign-in status should be returned.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object representing the asynchronous operation, containing a flag that is true\nif the specified user can sign-in, otherwise false.\n"
  nameWithType.vb: SignInManager(Of TUser).CanSignInAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).CanSignInAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.RefreshSignInAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.RefreshSignInAsync(`0)
  id: RefreshSignInAsync(`0)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: RefreshSignInAsync(TUser)
  nameWithType: SignInManager<TUser>.RefreshSignInAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.RefreshSignInAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RefreshSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 144
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nRegenerates the user's application cookie, whilst preserving the existing\nAuthenticationProperties like rememberMe, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task RefreshSignInAsync(TUser user)
    content.vb: Public Overridable Function RefreshSignInAsync(user As TUser) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user whose sign-in cookie should be refreshed.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: SignInManager(Of TUser).RefreshSignInAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).RefreshSignInAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,System.Boolean,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,System.Boolean,System.String)
  id: SignInAsync(`0,System.Boolean,System.String)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: SignInAsync(TUser, Boolean, String)
  nameWithType: SignInManager<TUser>.SignInAsync(TUser, Boolean, String)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.SignInAsync(TUser, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 159
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSigns in the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SignInAsync(TUser user, bool isPersistent, string authenticationMethod = null)
    content.vb: Public Overridable Function SignInAsync(user As TUser, isPersistent As Boolean, authenticationMethod As String = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to sign-in.
    - id: isPersistent
      type: System.Boolean
      description: Flag indicating whether the sign-in cookie should persist after the browser is closed.
    - id: authenticationMethod
      type: System.String
      description: Name of the method used to authenticate the user.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: SignInManager(Of TUser).SignInAsync(TUser, Boolean, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).SignInAsync(TUser, System.Boolean, System.String)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)
  id: SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: SignInAsync(TUser, AuthenticationProperties, String)
  nameWithType: SignInManager<TUser>.SignInAsync(TUser, AuthenticationProperties, String)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.SignInAsync(TUser, Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 171
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSigns in the specified <em>user</em>.\n"
  example: []
  syntax:
    content: public virtual Task SignInAsync(TUser user, AuthenticationProperties authenticationProperties, string authenticationMethod = null)
    content.vb: Public Overridable Function SignInAsync(user As TUser, authenticationProperties As AuthenticationProperties, authenticationMethod As String = Nothing) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to sign-in.
    - id: authenticationProperties
      type: Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties
      description: Properties applied to the login and authentication cookie.
    - id: authenticationMethod
      type: System.String
      description: Name of the method used to authenticate the user.
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: SignInManager(Of TUser).SignInAsync(TUser, AuthenticationProperties, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).SignInAsync(TUser, Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties, System.String)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.SignOutAsync
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.SignOutAsync
  id: SignOutAsync
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: SignOutAsync()
  nameWithType: SignInManager<TUser>.SignOutAsync()
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.SignOutAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SignOutAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 187
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSigns the current user out of the application.\n"
  example: []
  syntax:
    content: public virtual Task SignOutAsync()
    content.vb: Public Overridable Function SignOutAsync As Task
    return:
      type: System.Threading.Tasks.Task
  nameWithType.vb: SignInManager(Of TUser).SignOutAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).SignOutAsync()
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
  id: ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: ValidateSecurityStampAsync(ClaimsPrincipal)
  nameWithType: SignInManager<TUser>.ValidateSecurityStampAsync(ClaimsPrincipal)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ValidateSecurityStampAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 201
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nValidates the security stamp for the specified <em>principal</em> against\nthe persisted stamp for the current user, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> ValidateSecurityStampAsync(ClaimsPrincipal principal)
    content.vb: Public Overridable Function ValidateSecurityStampAsync(principal As ClaimsPrincipal) As Task(Of TUser)
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: The principal whose stamp should be validated.
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: >-
        The task object representing the asynchronous operation. The task will contain the <em>TUser</em>

        if the stamp matches the persisted value, otherwise it will return false.
  nameWithType.vb: SignInManager(Of TUser).ValidateSecurityStampAsync(ClaimsPrincipal)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)
  id: PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: PasswordSignInAsync(TUser, String, Boolean, Boolean)
  nameWithType: SignInManager<TUser>.PasswordSignInAsync(TUser, String, Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(TUser, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 230
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAttempts to sign in the specified <em>user</em> and <em>password</em> combination\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<SignInResult> PasswordSignInAsync(TUser user, string password, bool isPersistent, bool lockoutOnFailure)
    content.vb: Public Overridable Function PasswordSignInAsync(user As TUser, password As String, isPersistent As Boolean, lockoutOnFailure As Boolean) As Task(Of SignInResult)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user to sign in.
    - id: password
      type: System.String
      description: The password to attempt to sign in with.
    - id: isPersistent
      type: System.Boolean
      description: Flag indicating whether the sign-in cookie should persist after the browser is closed.
    - id: lockoutOnFailure
      type: System.Boolean
      description: Flag indicating if the user account should be locked if the sign in fails.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
      description: >-
        The task object representing the asynchronous operation containing the <see name="SignInResult"></see>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).PasswordSignInAsync(TUser, String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).PasswordSignInAsync(TUser, System.String, System.Boolean, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  id: PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: PasswordSignInAsync(String, String, Boolean, Boolean)
  nameWithType: SignInManager<TUser>.PasswordSignInAsync(String, String, Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.PasswordSignInAsync(System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 276
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nAttempts to sign in the specified <em>userName</em> and <em>password</em> combination\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<SignInResult> PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure)
    content.vb: Public Overridable Function PasswordSignInAsync(userName As String, password As String, isPersistent As Boolean, lockoutOnFailure As Boolean) As Task(Of SignInResult)
    parameters:
    - id: userName
      type: System.String
      description: The user name to sign in.
    - id: password
      type: System.String
      description: The password to attempt to sign in with.
    - id: isPersistent
      type: System.Boolean
      description: Flag indicating whether the sign-in cookie should persist after the browser is closed.
    - id: lockoutOnFailure
      type: System.Boolean
      description: Flag indicating if the user account should be locked if the sign in fails.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
      description: >-
        The task object representing the asynchronous operation containing the <see name="SignInResult"></see>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).PasswordSignInAsync(String, String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).PasswordSignInAsync(System.String, System.String, System.Boolean, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorClientRememberedAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorClientRememberedAsync(`0)
  id: IsTwoFactorClientRememberedAsync(`0)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: IsTwoFactorClientRememberedAsync(TUser)
  nameWithType: SignInManager<TUser>.IsTwoFactorClientRememberedAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.IsTwoFactorClientRememberedAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: IsTwoFactorClientRememberedAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 297
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nReturns a flag indicating if the current client browser has been remembered by two factor authentication\nfor the user attempting to login, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<bool> IsTwoFactorClientRememberedAsync(TUser user)
    content.vb: Public Overridable Function IsTwoFactorClientRememberedAsync(user As TUser) As Task(Of Boolean)
    parameters:
    - id: user
      type: '{TUser}'
      description: The user attempting to login.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nThe task object representing the asynchronous operation containing true if the browser has been remembered\nfor the current user.\n"
  nameWithType.vb: SignInManager(Of TUser).IsTwoFactorClientRememberedAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).IsTwoFactorClientRememberedAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.RememberTwoFactorClientAsync(`0)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.RememberTwoFactorClientAsync(`0)
  id: RememberTwoFactorClientAsync(`0)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: RememberTwoFactorClientAsync(TUser)
  nameWithType: SignInManager<TUser>.RememberTwoFactorClientAsync(TUser)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.RememberTwoFactorClientAsync(TUser)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RememberTwoFactorClientAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 310
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSets a flag on the browser to indicate the user has selected \"Remember this browser\" for two factor authentication purposes,\nas an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task RememberTwoFactorClientAsync(TUser user)
    content.vb: Public Overridable Function RememberTwoFactorClientAsync(user As TUser) As Task
    parameters:
    - id: user
      type: '{TUser}'
      description: The user who choose "remember this browser".
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: SignInManager(Of TUser).RememberTwoFactorClientAsync(TUser)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).RememberTwoFactorClientAsync(TUser)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.ForgetTwoFactorClientAsync
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.ForgetTwoFactorClientAsync
  id: ForgetTwoFactorClientAsync
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: ForgetTwoFactorClientAsync()
  nameWithType: SignInManager<TUser>.ForgetTwoFactorClientAsync()
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.ForgetTwoFactorClientAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ForgetTwoFactorClientAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 324
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nClears the \"Remember this browser flag\" from the current browser, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task ForgetTwoFactorClientAsync()
    content.vb: Public Overridable Function ForgetTwoFactorClientAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: The task object representing the asynchronous operation.
  nameWithType.vb: SignInManager(Of TUser).ForgetTwoFactorClientAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).ForgetTwoFactorClientAsync()
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  id: TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: TwoFactorSignInAsync(String, String, Boolean, Boolean)
  nameWithType: SignInManager<TUser>.TwoFactorSignInAsync(String, String, Boolean, Boolean)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.TwoFactorSignInAsync(System.String, System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TwoFactorSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 339
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nValidates the two faction sign in code and creates and signs in the user, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<SignInResult> TwoFactorSignInAsync(string provider, string code, bool isPersistent, bool rememberClient)
    content.vb: Public Overridable Function TwoFactorSignInAsync(provider As String, code As String, isPersistent As Boolean, rememberClient As Boolean) As Task(Of SignInResult)
    parameters:
    - id: provider
      type: System.String
      description: The two factor authentication provider to validate the code against.
    - id: code
      type: System.String
      description: The two factor authentication code to validate.
    - id: isPersistent
      type: System.Boolean
      description: Flag indicating whether the sign-in cookie should persist after the browser is closed.
    - id: rememberClient
      type: System.Boolean
      description: "Flag indicating whether the current browser should be remember, suppressing all further \ntwo factor authentication prompts."
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
      description: >-
        The task object representing the asynchronous operation containing the <see name="SignInResult"></see>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).TwoFactorSignInAsync(String, String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).TwoFactorSignInAsync(System.String, System.String, System.Boolean, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.GetTwoFactorAuthenticationUserAsync
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.GetTwoFactorAuthenticationUserAsync
  id: GetTwoFactorAuthenticationUserAsync
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: GetTwoFactorAuthenticationUserAsync()
  nameWithType: SignInManager<TUser>.GetTwoFactorAuthenticationUserAsync()
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.GetTwoFactorAuthenticationUserAsync()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetTwoFactorAuthenticationUserAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 387
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the <em>TUser</em> for the current two factor authentication login, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<TUser> GetTwoFactorAuthenticationUserAsync()
    content.vb: Public Overridable Function GetTwoFactorAuthenticationUserAsync As Task(Of TUser)
    return:
      type: System.Threading.Tasks.Task{{TUser}}
      description: >-
        The task object representing the asynchronous operation containing the <em>TUser</em>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).GetTwoFactorAuthenticationUserAsync()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).GetTwoFactorAuthenticationUserAsync()
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)
  id: ExternalLoginSignInAsync(System.String,System.String,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: ExternalLoginSignInAsync(String, String, Boolean)
  nameWithType: SignInManager<TUser>.ExternalLoginSignInAsync(String, String, Boolean)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.ExternalLoginSignInAsync(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ExternalLoginSignInAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 406
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nSigns in a user via a previously registered third party login, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<SignInResult> ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent)
    content.vb: Public Overridable Function ExternalLoginSignInAsync(loginProvider As String, providerKey As String, isPersistent As Boolean) As Task(Of SignInResult)
    parameters:
    - id: loginProvider
      type: System.String
      description: The login provider to use.
    - id: providerKey
      type: System.String
      description: The unique provider identifier for the user.
    - id: isPersistent
      type: System.Boolean
      description: Flag indicating whether the sign-in cookie should persist after the browser is closed.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
      description: >-
        The task object representing the asynchronous operation containing the <see name="SignInResult"></see>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).ExternalLoginSignInAsync(String, String, Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).ExternalLoginSignInAsync(System.String, System.String, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemes
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemes
  id: GetExternalAuthenticationSchemes
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: GetExternalAuthenticationSchemes()
  nameWithType: SignInManager<TUser>.GetExternalAuthenticationSchemes()
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.GetExternalAuthenticationSchemes()
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetExternalAuthenticationSchemes
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 426
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets a collection of <xref href=\"Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription\" data-throw-if-not-resolved=\"false\"></xref>s for the known external login providers.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<AuthenticationDescription> GetExternalAuthenticationSchemes()
    content.vb: Public Overridable Function GetExternalAuthenticationSchemes As IEnumerable(Of AuthenticationDescription)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription}
      description: A collection of <xref href="Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription" data-throw-if-not-resolved="false"></xref>s for the known external login providers.
  nameWithType.vb: SignInManager(Of TUser).GetExternalAuthenticationSchemes()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).GetExternalAuthenticationSchemes()
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalLoginInfoAsync(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalLoginInfoAsync(System.String)
  id: GetExternalLoginInfoAsync(System.String)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: GetExternalLoginInfoAsync(String)
  nameWithType: SignInManager<TUser>.GetExternalLoginInfoAsync(String)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.GetExternalLoginInfoAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetExternalLoginInfoAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 437
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nGets the external login information for the current login, as an asynchronous operation.\n"
  example: []
  syntax:
    content: public virtual Task<ExternalLoginInfo> GetExternalLoginInfoAsync(string expectedXsrf = null)
    content.vb: Public Overridable Function GetExternalLoginInfoAsync(expectedXsrf As String = Nothing) As Task(Of ExternalLoginInfo)
    parameters:
    - id: expectedXsrf
      type: System.String
      description: Flag indication whether a Cross Site Request Forgery token was expected in the current request.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.ExternalLoginInfo}
      description: >-
        The task object representing the asynchronous operation containing the <see name="ExternalLoginInfo"></see>

        for the sign-in attempt.
  nameWithType.vb: SignInManager(Of TUser).GetExternalLoginInfoAsync(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).GetExternalLoginInfoAsync(System.String)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  id: UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: UpdateExternalAuthenticationTokensAsync(ExternalLoginInfo)
  nameWithType: SignInManager<TUser>.UpdateExternalAuthenticationTokensAsync(ExternalLoginInfo)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateExternalAuthenticationTokensAsync
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 476
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nStores any authentication tokens found in the external authentication cookie into the associated user.\n"
  example: []
  syntax:
    content: public virtual Task<IdentityResult> UpdateExternalAuthenticationTokensAsync(ExternalLoginInfo externalLogin)
    content.vb: Public Overridable Function UpdateExternalAuthenticationTokensAsync(externalLogin As ExternalLoginInfo) As Task(Of IdentityResult)
    parameters:
    - id: externalLogin
      type: Microsoft.AspNetCore.Identity.ExternalLoginInfo
      description: The information from the external login provider.
    return:
      type: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
      description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation, containing the <xref href="Microsoft.AspNetCore.Identity.IdentityResult" data-throw-if-not-resolved="false"></xref> of the operation.
  nameWithType.vb: SignInManager(Of TUser).UpdateExternalAuthenticationTokensAsync(ExternalLoginInfo)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.SignInManager`1.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)
  id: ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)
  parent: Microsoft.AspNetCore.Identity.SignInManager`1
  langs:
  - csharp
  - vb
  name: ConfigureExternalAuthenticationProperties(String, String, String)
  nameWithType: SignInManager<TUser>.ConfigureExternalAuthenticationProperties(String, String, String)
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>.ConfigureExternalAuthenticationProperties(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfigureExternalAuthenticationProperties
    path: src/Microsoft.AspNetCore.Identity/SignInManager.cs
    startLine: 511
  assemblies:
  - Microsoft.AspNetCore.Identity
  namespace: Microsoft.AspNetCore.Identity
  summary: "\nConfigures the redirect URL and user identifier for the specified external login <em>provider</em>.\n"
  example: []
  syntax:
    content: public virtual AuthenticationProperties ConfigureExternalAuthenticationProperties(string provider, string redirectUrl, string userId = null)
    content.vb: Public Overridable Function ConfigureExternalAuthenticationProperties(provider As String, redirectUrl As String, userId As String = Nothing) As AuthenticationProperties
    parameters:
    - id: provider
      type: System.String
      description: The provider to configure.
    - id: redirectUrl
      type: System.String
      description: The external login URL users should be redirected to during the login glow.
    - id: userId
      type: System.String
      description: The current user's identifier, which will be used to provide CSRF protection.
    return:
      type: Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties
      description: A configured <xref href="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: SignInManager(Of TUser).ConfigureExternalAuthenticationProperties(String, String, String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser).ConfigureExternalAuthenticationProperties(System.String, System.String, System.String)
references:
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Identity.SignInManager`1
  commentId: T:Microsoft.AspNetCore.Identity.SignInManager`1
  isExternal: false
  name: SignInManager<TUser>
  nameWithType: SignInManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.SignInManager<TUser>
  nameWithType.vb: SignInManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.SignInManager(Of TUser)
  name.vb: SignInManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.SignInManager`1.UserManager
  commentId: P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager
- uid: Microsoft.AspNetCore.Http.HttpContext
  commentId: T:Microsoft.AspNetCore.Http.HttpContext
- uid: Microsoft.AspNetCore.Builder.IdentityOptions
  commentId: T:Microsoft.AspNetCore.Builder.IdentityOptions
  parent: Microsoft.AspNetCore.Builder
  isExternal: false
  name: IdentityOptions
  nameWithType: IdentityOptions
  fullName: Microsoft.AspNetCore.Builder.IdentityOptions
- uid: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.IHttpContextAccessor
  commentId: T:Microsoft.AspNetCore.Http.IHttpContextAccessor
  parent: Microsoft.AspNetCore.Http
  isExternal: true
  name: IHttpContextAccessor
  nameWithType: IHttpContextAccessor
  fullName: Microsoft.AspNetCore.Http.IHttpContextAccessor
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  name: IUserClaimsPrincipalFactory<TUser>
  nameWithType: IUserClaimsPrincipalFactory<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser)
  name.vb: IUserClaimsPrincipalFactory(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  commentId: T:Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions}
  parent: Microsoft.Extensions.Options
  definition: Microsoft.Extensions.Options.IOptions`1
  name: IOptions<IdentityOptions>
  nameWithType: IOptions<IdentityOptions>
  fullName: Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.IdentityOptions>
  nameWithType.vb: IOptions(Of IdentityOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of Microsoft.AspNetCore.Builder.IdentityOptions)
  name.vb: IOptions(Of IdentityOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Builder.IdentityOptions
    name: IdentityOptions
    nameWithType: IdentityOptions
    fullName: Microsoft.AspNetCore.Builder.IdentityOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager`1}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager`1}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<SignInManager<TUser>>
  nameWithType: ILogger<SignInManager<TUser>>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.SignInManager<TUser>>
  nameWithType.vb: ILogger(Of SignInManager(Of TUser))
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.AspNetCore.Identity.SignInManager(Of TUser))
  name.vb: ILogger(Of SignInManager(Of TUser))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.SignInManager`1
    name: SignInManager
    nameWithType: SignInManager
    fullName: Microsoft.AspNetCore.Identity.SignInManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Builder
  commentId: N:Microsoft.AspNetCore.Builder
  isExternal: false
  name: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http
  commentId: N:Microsoft.AspNetCore.Http
  isExternal: false
  name: Microsoft.AspNetCore.Http
  nameWithType: Microsoft.AspNetCore.Http
  fullName: Microsoft.AspNetCore.Http
- uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  commentId: T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
  isExternal: false
  name: IUserClaimsPrincipalFactory<TUser>
  nameWithType: IUserClaimsPrincipalFactory<TUser>
  fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
  nameWithType.vb: IUserClaimsPrincipalFactory(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory(Of TUser)
  name.vb: IUserClaimsPrincipalFactory(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1
    name: IUserClaimsPrincipalFactory
    nameWithType: IUserClaimsPrincipalFactory
    fullName: Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options.IOptions`1
  commentId: T:Microsoft.Extensions.Options.IOptions`1
  isExternal: true
  name: IOptions<TOptions>
  nameWithType: IOptions<TOptions>
  fullName: Microsoft.Extensions.Options.IOptions<TOptions>
  nameWithType.vb: IOptions(Of TOptions)
  fullname.vb: Microsoft.Extensions.Options.IOptions(Of TOptions)
  name.vb: IOptions(Of TOptions)
  spec.csharp:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Options.IOptions`1
    name: IOptions
    nameWithType: IOptions
    fullName: Microsoft.Extensions.Options.IOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOptions
    nameWithType: TOptions
    fullName: TOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Options
  commentId: N:Microsoft.Extensions.Options
  isExternal: false
  name: Microsoft.Extensions.Options
  nameWithType: Microsoft.Extensions.Options
  fullName: Microsoft.Extensions.Options
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  commentId: T:System.Threading.Tasks.Task{System.Security.Claims.ClaimsPrincipal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClaimsPrincipal>
  nameWithType: Task<ClaimsPrincipal>
  fullName: System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal>
  nameWithType.vb: Task(Of ClaimsPrincipal)
  fullname.vb: System.Threading.Tasks.Task(Of System.Security.Claims.ClaimsPrincipal)
  name.vb: Task(Of ClaimsPrincipal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    nameWithType: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties
  commentId: T:Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties
  parent: Microsoft.AspNetCore.Http.Authentication
  isExternal: true
  name: AuthenticationProperties
  nameWithType: AuthenticationProperties
  fullName: Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties
- uid: Microsoft.AspNetCore.Http.Authentication
  commentId: N:Microsoft.AspNetCore.Http.Authentication
  isExternal: false
  name: Microsoft.AspNetCore.Http.Authentication
  nameWithType: Microsoft.AspNetCore.Http.Authentication
  fullName: Microsoft.AspNetCore.Http.Authentication
- uid: System.Threading.Tasks.Task{{TUser}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TUser>
  nameWithType: Task<TUser>
  fullName: System.Threading.Tasks.Task<TUser>
  nameWithType.vb: Task(Of TUser)
  fullname.vb: System.Threading.Tasks.Task(Of TUser)
  name.vb: Task(Of TUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.SignInResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SignInResult>
  nameWithType: Task<SignInResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.SignInResult>
  nameWithType.vb: Task(Of SignInResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.SignInResult)
  name.vb: Task(Of SignInResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.SignInResult
    name: SignInResult
    nameWithType: SignInResult
    fullName: Microsoft.AspNetCore.Identity.SignInResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.SignInResult
    name: SignInResult
    nameWithType: SignInResult
    fullName: Microsoft.AspNetCore.Identity.SignInResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
  commentId: T:Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
- uid: System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<AuthenticationDescription>
  nameWithType: IEnumerable<AuthenticationDescription>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription>
  nameWithType.vb: IEnumerable(Of AuthenticationDescription)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription)
  name.vb: IEnumerable(Of AuthenticationDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
    name: AuthenticationDescription
    nameWithType: AuthenticationDescription
    fullName: Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
    name: AuthenticationDescription
    nameWithType: AuthenticationDescription
    fullName: Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.ExternalLoginInfo}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.ExternalLoginInfo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ExternalLoginInfo>
  nameWithType: Task<ExternalLoginInfo>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.ExternalLoginInfo>
  nameWithType.vb: Task(Of ExternalLoginInfo)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.ExternalLoginInfo)
  name.vb: Task(Of ExternalLoginInfo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.ExternalLoginInfo
    name: ExternalLoginInfo
    nameWithType: ExternalLoginInfo
    fullName: Microsoft.AspNetCore.Identity.ExternalLoginInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.ExternalLoginInfo
    name: ExternalLoginInfo
    nameWithType: ExternalLoginInfo
    fullName: Microsoft.AspNetCore.Identity.ExternalLoginInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.IdentityResult
  commentId: T:Microsoft.AspNetCore.Identity.IdentityResult
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: IdentityResult
  nameWithType: IdentityResult
  fullName: Microsoft.AspNetCore.Identity.IdentityResult
- uid: Microsoft.AspNetCore.Identity.ExternalLoginInfo
  commentId: T:Microsoft.AspNetCore.Identity.ExternalLoginInfo
  parent: Microsoft.AspNetCore.Identity
  isExternal: false
  name: ExternalLoginInfo
  nameWithType: ExternalLoginInfo
  fullName: Microsoft.AspNetCore.Identity.ExternalLoginInfo
- uid: System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.AspNetCore.Identity.IdentityResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IdentityResult>
  nameWithType: Task<IdentityResult>
  fullName: System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult>
  nameWithType.vb: Task(Of IdentityResult)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.AspNetCore.Identity.IdentityResult)
  name.vb: Task(Of IdentityResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.AspNetCore.Identity.IdentityResult
    name: IdentityResult
    nameWithType: IdentityResult
    fullName: Microsoft.AspNetCore.Identity.IdentityResult
  - name: )
    nameWithType: )
    fullName: )
