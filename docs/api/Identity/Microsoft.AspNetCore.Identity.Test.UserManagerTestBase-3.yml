### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  commentId: T:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  id: UserManagerTestBase`3
  parent: Microsoft.AspNetCore.Identity.Test
  children:
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailAllowedByDefault
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailFailsWhenUniqueEmailRequired
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeLoginFails
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeUserNameFails
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddPasswordFailsIfAlreadyHave
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRoleFailsIfAlreadyInRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRolesIgnoresDuplicates
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksCreateRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksRoleUpdate
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveRoleClaim
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveUserClaim
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddUsersToRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainPasswordValidators
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainRoleValidators
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainUserValidators
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmail
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmailWithDifferentTokenProvider
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePhoneNumber
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanConfirmEmailWithStaticToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateRoleTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddLogin
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddRemoveLogin
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserLoginAndAddPassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserNoPassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanEnableLockoutManuallyAndLockout
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindByEmail
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindById
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleByNameWithManager
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleWithManager
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindUsersViaUserQuerable
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGenerateAndVerifyUserTokenWithStaticTokenProvider
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetRolesForUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetSetUpdateAndRemoveUserToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersInRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersWithClaims
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetValidTwoFactor
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanQueryableRoles
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemovePassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemoveUsersFromRole
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanReplaceUserClaim
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanResetPasswordWithStaticTokenProvider
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindById
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindByName
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdatePasswordUsingHasher
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateRoleName
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateUserName
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanVerifyPhoneNumber
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithEmail
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithWrongToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePasswordFallsIfPasswordWrong
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongPhoneNumber
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetEmailValidatesUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetUserNameValidatesUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailFalseByDefaultTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailWithStaticTokenFailsWithWrongToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmTokenFailsAfterPasswordChange
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleFailsIfExists
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestContext
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestRole(System.String,System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestUser(System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Boolean)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateUpdatesSecurityStamp
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EmailFactorFailsAfterSecurityStampChangeTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EnableTwoFactorChangesSecurityStamp
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateRoles(System.String,System.Int32)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateTwoFactorWithUnknownFactorProviderWillThrow
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateUsers(System.String,System.Int32)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GetValidTwoFactorTestEmptyWithNoProviders
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowPlus5ShouldBeLockedOut
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutFailsIfNotEnabled
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.NullableDateTimeOperationTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockAddPassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockChangePassword
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockCreateUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PhoneFactorFailsAfterSecurityStampChangeTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveClaimOnlyAffectsUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserFromRoleWithMultipleRoles
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserNotInRoleFails
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ReplaceUserClaimOnlyAffectsUser
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetAccessCountPreventsLockout
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetPasswordWithStaticTokenProviderFailsWithWrongToken
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameEqualsPredicate(System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameStartsWithPredicate(System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetPhoneNumberTest
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserNameUpdatesSecurityStamp
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserPasswordHash(`0,System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ShouldSkipDbTests
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SingleFailureLockout
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.TwoFailureLockout
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UpdateSecurityStampActuallyChanges
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserLockedOutWithDateTimeLocalKindNowPlus30
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameEqualsPredicate(System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameStartsWithPredicate(System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNotLockedOutWithNullDateTimeAndIsSetToNullDate
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockCreate
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockUpdate
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyTokenFromWrongTokenProviderFails
  - Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyWithWrongSmsTokenFails
  langs:
  - csharp
  - vb
  name: UserManagerTestBase<TUser, TRole, TKey>
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>
  type: Class
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserManagerTestBase
    path: test/Shared/UserManagerTestBase.cs
    startLine: 25
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      public abstract class UserManagerTestBase<TUser, TRole, TKey>
          where TUser : class where TRole : class where TKey : IEquatable<TKey>
    content.vb: Public MustInherit Class UserManagerTestBase(Of TUser As Class, TRole As Class, TKey As IEquatable(Of TKey))
    typeParameters:
    - id: TUser
    - id: TRole
    - id: TKey
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey)
  name.vb: UserManagerTestBase(Of TUser, TRole, TKey)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ShouldSkipDbTests
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ShouldSkipDbTests
  id: ShouldSkipDbTests
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ShouldSkipDbTests()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ShouldSkipDbTests()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ShouldSkipDbTests()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ShouldSkipDbTests
    path: test/Shared/UserManagerTestBase.cs
    startLine: 32
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual bool ShouldSkipDbTests()
    content.vb: Protected Overridable Function ShouldSkipDbTests As Boolean
    return:
      type: System.Boolean
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ShouldSkipDbTests()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ShouldSkipDbTests()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  id: SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: SetupIdentityServices(IServiceCollection, Object)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.SetupIdentityServices(IServiceCollection, Object)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetupIdentityServices
    path: test/Shared/UserManagerTestBase.cs
    startLine: 37
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual void SetupIdentityServices(IServiceCollection services, object context = null)
    content.vb: Protected Overridable Sub SetupIdentityServices(services As IServiceCollection, context As Object = Nothing)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: context
      type: System.Object
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).SetupIdentityServices(IServiceCollection, Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).SetupIdentityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  id: CreateManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateManager(Object, IServiceCollection, Action<IServiceCollection>)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateManager(Object, IServiceCollection, Action<IServiceCollection>)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateManager(System.Object, Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateManager
    path: test/Shared/UserManagerTestBase.cs
    startLine: 55
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected virtual UserManager<TUser> CreateManager(object context = null, IServiceCollection services = null, Action<IServiceCollection> configureServices = null)
    content.vb: Protected Overridable Function CreateManager(context As Object = Nothing, services As IServiceCollection = Nothing, configureServices As Action(Of IServiceCollection) = Nothing) As UserManager(Of TUser)
    parameters:
    - id: context
      type: System.Object
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: configureServices
      type: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
    return:
      type: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateManager(Object, IServiceCollection, Action(Of IServiceCollection))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateManager(System.Object, Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection))
  name.vb: CreateManager(Object, IServiceCollection, Action(Of IServiceCollection))
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: CreateRoleManager(System.Object,Microsoft.Extensions.DependencyInjection.IServiceCollection)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateRoleManager(Object, IServiceCollection)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateRoleManager(Object, IServiceCollection)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateRoleManager(System.Object, Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateRoleManager
    path: test/Shared/UserManagerTestBase.cs
    startLine: 73
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected RoleManager<TRole> CreateRoleManager(object context = null, IServiceCollection services = null)
    content.vb: Protected Function CreateRoleManager(context As Object = Nothing, services As IServiceCollection = Nothing) As RoleManager(Of TRole)
    parameters:
    - id: context
      type: System.Object
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    return:
      type: Microsoft.AspNetCore.Identity.RoleManager{{TRole}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateRoleManager(Object, IServiceCollection)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateRoleManager(System.Object, Microsoft.Extensions.DependencyInjection.IServiceCollection)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestContext
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestContext
  id: CreateTestContext
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateTestContext()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateTestContext()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateTestContext()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateTestContext
    path: test/Shared/UserManagerTestBase.cs
    startLine: 87
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract object CreateTestContext()
    content.vb: Protected MustOverride Function CreateTestContext As Object
    return:
      type: System.Object
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateTestContext()
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateTestContext()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  id: AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddUserStore(IServiceCollection, Object)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddUserStore(IServiceCollection, Object)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddUserStore
    path: test/Shared/UserManagerTestBase.cs
    startLine: 89
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract void AddUserStore(IServiceCollection services, object context = null)
    content.vb: Protected MustOverride Sub AddUserStore(services As IServiceCollection, context As Object = Nothing)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: context
      type: System.Object
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddUserStore(IServiceCollection, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddUserStore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  id: AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddRoleStore(IServiceCollection, Object)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddRoleStore(IServiceCollection, Object)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddRoleStore
    path: test/Shared/UserManagerTestBase.cs
    startLine: 90
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract void AddRoleStore(IServiceCollection services, object context = null)
    content.vb: Protected MustOverride Sub AddRoleStore(services As IServiceCollection, context As Object = Nothing)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
    - id: context
      type: System.Object
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddRoleStore(IServiceCollection, Object)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddRoleStore(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Object)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserPasswordHash(`0,System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserPasswordHash(`0,System.String)
  id: SetUserPasswordHash(`0,System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: SetUserPasswordHash(TUser, String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.SetUserPasswordHash(TUser, String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.SetUserPasswordHash(TUser, System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserPasswordHash
    path: test/Shared/UserManagerTestBase.cs
    startLine: 92
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract void SetUserPasswordHash(TUser user, string hashedPassword)
    content.vb: Protected MustOverride Sub SetUserPasswordHash(user As TUser, hashedPassword As String)
    parameters:
    - id: user
      type: '{TUser}'
    - id: hashedPassword
      type: System.String
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).SetUserPasswordHash(TUser, String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).SetUserPasswordHash(TUser, System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestUser(System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestUser(System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Boolean)
  id: CreateTestUser(System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTimeOffset},System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateTestUser(String, String, String, Boolean, Nullable<DateTimeOffset>, Boolean)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateTestUser(String, String, String, Boolean, Nullable<DateTimeOffset>, Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateTestUser(System.String, System.String, System.String, System.Boolean, System.Nullable<System.DateTimeOffset>, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateTestUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 94
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract TUser CreateTestUser(string namePrefix = "", string email = "", string phoneNumber = "", bool lockoutEnabled = false, DateTimeOffset? lockoutEnd = null, bool useNamePrefixAsUserName = false)
    content.vb: Protected MustOverride Function CreateTestUser(namePrefix As String = "", email As String = "", phoneNumber As String = "", lockoutEnabled As Boolean = False, lockoutEnd As DateTimeOffset? = Nothing, useNamePrefixAsUserName As Boolean = False) As TUser
    parameters:
    - id: namePrefix
      type: System.String
    - id: email
      type: System.String
    - id: phoneNumber
      type: System.String
    - id: lockoutEnabled
      type: System.Boolean
    - id: lockoutEnd
      type: System.Nullable{System.DateTimeOffset}
    - id: useNamePrefixAsUserName
      type: System.Boolean
    return:
      type: '{TUser}'
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateTestUser(String, String, String, Boolean, Nullable(Of DateTimeOffset), Boolean)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateTestUser(System.String, System.String, System.String, System.Boolean, System.Nullable(Of System.DateTimeOffset), System.Boolean)
  name.vb: CreateTestUser(String, String, String, Boolean, Nullable(Of DateTimeOffset), Boolean)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestRole(System.String,System.Boolean)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateTestRole(System.String,System.Boolean)
  id: CreateTestRole(System.String,System.Boolean)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateTestRole(String, Boolean)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateTestRole(String, Boolean)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateTestRole(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateTestRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 97
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract TRole CreateTestRole(string roleNamePrefix = "", bool useRoleNamePrefixAsRoleName = false)
    content.vb: Protected MustOverride Function CreateTestRole(roleNamePrefix As String = "", useRoleNamePrefixAsRoleName As Boolean = False) As TRole
    parameters:
    - id: roleNamePrefix
      type: System.String
    - id: useRoleNamePrefixAsRoleName
      type: System.Boolean
    return:
      type: '{TRole}'
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateTestRole(String, Boolean)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateTestRole(System.String, System.Boolean)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameEqualsPredicate(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameEqualsPredicate(System.String)
  id: UserNameEqualsPredicate(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserNameEqualsPredicate(String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserNameEqualsPredicate(String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserNameEqualsPredicate(System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserNameEqualsPredicate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 99
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract Expression<Func<TUser, bool>> UserNameEqualsPredicate(string userName)
    content.vb: Protected MustOverride Function UserNameEqualsPredicate(userName As String) As Expression(Of Func(Of TUser, Boolean))
    parameters:
    - id: userName
      type: System.String
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TUser},System.Boolean}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserNameEqualsPredicate(String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserNameEqualsPredicate(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameStartsWithPredicate(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNameStartsWithPredicate(System.String)
  id: UserNameStartsWithPredicate(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserNameStartsWithPredicate(String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserNameStartsWithPredicate(String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserNameStartsWithPredicate(System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserNameStartsWithPredicate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 100
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract Expression<Func<TUser, bool>> UserNameStartsWithPredicate(string userName)
    content.vb: Protected MustOverride Function UserNameStartsWithPredicate(userName As String) As Expression(Of Func(Of TUser, Boolean))
    parameters:
    - id: userName
      type: System.String
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TUser},System.Boolean}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserNameStartsWithPredicate(String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserNameStartsWithPredicate(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameEqualsPredicate(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameEqualsPredicate(System.String)
  id: RoleNameEqualsPredicate(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: RoleNameEqualsPredicate(String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.RoleNameEqualsPredicate(String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.RoleNameEqualsPredicate(System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleNameEqualsPredicate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 102
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract Expression<Func<TRole, bool>> RoleNameEqualsPredicate(string roleName)
    content.vb: Protected MustOverride Function RoleNameEqualsPredicate(roleName As String) As Expression(Of Func(Of TRole, Boolean))
    parameters:
    - id: roleName
      type: System.String
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TRole},System.Boolean}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).RoleNameEqualsPredicate(String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).RoleNameEqualsPredicate(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameStartsWithPredicate(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RoleNameStartsWithPredicate(System.String)
  id: RoleNameStartsWithPredicate(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: RoleNameStartsWithPredicate(String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.RoleNameStartsWithPredicate(String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.RoleNameStartsWithPredicate(System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RoleNameStartsWithPredicate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 103
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: protected abstract Expression<Func<TRole, bool>> RoleNameStartsWithPredicate(string roleName)
    content.vb: Protected MustOverride Function RoleNameStartsWithPredicate(roleName As String) As Expression(Of Func(Of TRole, Boolean))
    parameters:
    - id: roleName
      type: System.String
    return:
      type: System.Linq.Expressions.Expression{System.Func{{TRole},System.Boolean}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).RoleNameStartsWithPredicate(String)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).RoleNameStartsWithPredicate(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteUser
  id: CanDeleteUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanDeleteUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanDeleteUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanDeleteUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanDeleteUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 105
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanDeleteUser()
    content.vb: >-
      <Fact>

      Public Function CanDeleteUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanDeleteUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanDeleteUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateUserName
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateUserName
  id: CanUpdateUserName
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanUpdateUserName()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanUpdateUserName()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanUpdateUserName()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanUpdateUserName
    path: test/Shared/UserManagerTestBase.cs
    startLine: 120
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanUpdateUserName()
    content.vb: >-
      <Fact>

      Public Function CanUpdateUserName As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanUpdateUserName()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanUpdateUserName()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetUserNameValidatesUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetUserNameValidatesUser
  id: CheckSetUserNameValidatesUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CheckSetUserNameValidatesUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CheckSetUserNameValidatesUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CheckSetUserNameValidatesUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CheckSetUserNameValidatesUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 139
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CheckSetUserNameValidatesUser()
    content.vb: >-
      <Fact>

      Public Function CheckSetUserNameValidatesUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CheckSetUserNameValidatesUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CheckSetUserNameValidatesUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserNameUpdatesSecurityStamp
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetUserNameUpdatesSecurityStamp
  id: SetUserNameUpdatesSecurityStamp
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: SetUserNameUpdatesSecurityStamp()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.SetUserNameUpdatesSecurityStamp()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.SetUserNameUpdatesSecurityStamp()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetUserNameUpdatesSecurityStamp
    path: test/Shared/UserManagerTestBase.cs
    startLine: 167
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task SetUserNameUpdatesSecurityStamp()
    content.vb: >-
      <Fact>

      Public Function SetUserNameUpdatesSecurityStamp As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).SetUserNameUpdatesSecurityStamp()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).SetUserNameUpdatesSecurityStamp()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateUpdatesSecurityStamp
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateUpdatesSecurityStamp
  id: CreateUpdatesSecurityStamp
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateUpdatesSecurityStamp()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateUpdatesSecurityStamp()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateUpdatesSecurityStamp()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateUpdatesSecurityStamp
    path: test/Shared/UserManagerTestBase.cs
    startLine: 185
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CreateUpdatesSecurityStamp()
    content.vb: >-
      <Fact>

      Public Function CreateUpdatesSecurityStamp As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateUpdatesSecurityStamp()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateUpdatesSecurityStamp()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetEmailValidatesUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CheckSetEmailValidatesUser
  id: CheckSetEmailValidatesUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CheckSetEmailValidatesUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CheckSetEmailValidatesUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CheckSetEmailValidatesUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CheckSetEmailValidatesUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 200
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CheckSetEmailValidatesUser()
    content.vb: >-
      <Fact>

      Public Function CheckSetEmailValidatesUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CheckSetEmailValidatesUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CheckSetEmailValidatesUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdatePasswordUsingHasher
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdatePasswordUsingHasher
  id: CanUpdatePasswordUsingHasher
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanUpdatePasswordUsingHasher()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanUpdatePasswordUsingHasher()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanUpdatePasswordUsingHasher()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanUpdatePasswordUsingHasher
    path: test/Shared/UserManagerTestBase.cs
    startLine: 223
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanUpdatePasswordUsingHasher()
    content.vb: >-
      <Fact>

      Public Function CanUpdatePasswordUsingHasher As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanUpdatePasswordUsingHasher()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanUpdatePasswordUsingHasher()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindById
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindById
  id: CanFindById
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanFindById()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanFindById()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanFindById()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanFindById
    path: test/Shared/UserManagerTestBase.cs
    startLine: 243
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanFindById()
    content.vb: >-
      <Fact>

      Public Function CanFindById As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanFindById()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanFindById()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockCreate
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockCreate
  id: UserValidatorCanBlockCreate
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserValidatorCanBlockCreate()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserValidatorCanBlockCreate()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserValidatorCanBlockCreate()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserValidatorCanBlockCreate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 256
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task UserValidatorCanBlockCreate()
    content.vb: >-
      <Fact>

      Public Function UserValidatorCanBlockCreate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorCanBlockCreate()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorCanBlockCreate()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockUpdate
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorCanBlockUpdate
  id: UserValidatorCanBlockUpdate
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserValidatorCanBlockUpdate()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserValidatorCanBlockUpdate()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserValidatorCanBlockUpdate()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserValidatorCanBlockUpdate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 271
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task UserValidatorCanBlockUpdate()
    content.vb: >-
      <Fact>

      Public Function UserValidatorCanBlockUpdate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorCanBlockUpdate()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorCanBlockUpdate()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainUserValidators
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainUserValidators
  id: CanChainUserValidators
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChainUserValidators()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChainUserValidators()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChainUserValidators()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChainUserValidators
    path: test/Shared/UserManagerTestBase.cs
    startLine: 287
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChainUserValidators()
    content.vb: >-
      <Fact>

      Public Function CanChainUserValidators As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChainUserValidators()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChainUserValidators()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
  id: UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(String)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(String)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail
    path: test/Shared/UserManagerTestBase.cs
    startLine: 305
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [ConditionalTheory]

      [InlineData(new object[]{""})]

      [InlineData(null)]

      public Task UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(string email)
    content.vb: >-
      <ConditionalTheory>

      <InlineData(New Object() {""})>

      <InlineData(Nothing)>

      Public Function UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(email As String) As Task
    parameters:
    - id: email
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalTheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserValidatorBlocksShortEmailsWhenRequiresUniqueEmail(System.String)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockAddPassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockAddPassword
  id: PasswordValidatorCanBlockAddPassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: PasswordValidatorCanBlockAddPassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockAddPassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockAddPassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidatorCanBlockAddPassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 337
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordValidatorCanBlockAddPassword()
    content.vb: >-
      <Fact>

      Public Function PasswordValidatorCanBlockAddPassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockAddPassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockAddPassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainPasswordValidators
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainPasswordValidators
  id: CanChainPasswordValidators
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChainPasswordValidators()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChainPasswordValidators()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChainPasswordValidators()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChainPasswordValidators
    path: test/Shared/UserManagerTestBase.cs
    startLine: 354
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChainPasswordValidators()
    content.vb: >-
      <Fact>

      Public Function CanChainPasswordValidators As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChainPasswordValidators()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChainPasswordValidators()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockChangePassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockChangePassword
  id: PasswordValidatorCanBlockChangePassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: PasswordValidatorCanBlockChangePassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockChangePassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockChangePassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidatorCanBlockChangePassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 372
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordValidatorCanBlockChangePassword()
    content.vb: >-
      <Fact>

      Public Function PasswordValidatorCanBlockChangePassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockChangePassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockChangePassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockCreateUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockCreateUser
  id: PasswordValidatorCanBlockCreateUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: PasswordValidatorCanBlockCreateUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockCreateUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockCreateUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidatorCanBlockCreateUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 389
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordValidatorCanBlockCreateUser()
    content.vb: >-
      <Fact>

      Public Function PasswordValidatorCanBlockCreateUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockCreateUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockCreateUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserNoPassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserNoPassword
  id: CanCreateUserNoPassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanCreateUserNoPassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserNoPassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserNoPassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateUserNoPassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 404
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanCreateUserNoPassword()
    content.vb: >-
      <Fact>

      Public Function CanCreateUserNoPassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserNoPassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserNoPassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddLogin
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddLogin
  id: CanCreateUserAddLogin
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanCreateUserAddLogin()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserAddLogin()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserAddLogin()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateUserAddLogin
    path: test/Shared/UserManagerTestBase.cs
    startLine: 423
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanCreateUserAddLogin()
    content.vb: >-
      <Fact>

      Public Function CanCreateUserAddLogin As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserAddLogin()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserAddLogin()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserLoginAndAddPassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserLoginAndAddPassword
  id: CanCreateUserLoginAndAddPassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanCreateUserLoginAndAddPassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserLoginAndAddPassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserLoginAndAddPassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateUserLoginAndAddPassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 445
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanCreateUserLoginAndAddPassword()
    content.vb: >-
      <Fact>

      Public Function CanCreateUserLoginAndAddPassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserLoginAndAddPassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserLoginAndAddPassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddPasswordFailsIfAlreadyHave
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddPasswordFailsIfAlreadyHave
  id: AddPasswordFailsIfAlreadyHave
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddPasswordFailsIfAlreadyHave()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddPasswordFailsIfAlreadyHave()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddPasswordFailsIfAlreadyHave()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddPasswordFailsIfAlreadyHave
    path: test/Shared/UserManagerTestBase.cs
    startLine: 468
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddPasswordFailsIfAlreadyHave()
    content.vb: >-
      <Fact>

      Public Function AddPasswordFailsIfAlreadyHave As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddPasswordFailsIfAlreadyHave()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddPasswordFailsIfAlreadyHave()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddRemoveLogin
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateUserAddRemoveLogin
  id: CanCreateUserAddRemoveLogin
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanCreateUserAddRemoveLogin()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserAddRemoveLogin()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanCreateUserAddRemoveLogin()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateUserAddRemoveLogin
    path: test/Shared/UserManagerTestBase.cs
    startLine: 484
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanCreateUserAddRemoveLogin()
    content.vb: >-
      <Fact>

      Public Function CanCreateUserAddRemoveLogin As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserAddRemoveLogin()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanCreateUserAddRemoveLogin()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemovePassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemovePassword
  id: CanRemovePassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanRemovePassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanRemovePassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanRemovePassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRemovePassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 515
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanRemovePassword()
    content.vb: >-
      <Fact>

      Public Function CanRemovePassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanRemovePassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanRemovePassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePassword
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePassword
  id: CanChangePassword
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChangePassword()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChangePassword()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChangePassword()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChangePassword
    path: test/Shared/UserManagerTestBase.cs
    startLine: 535
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChangePassword()
    content.vb: >-
      <Fact>

      Public Function CanChangePassword As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChangePassword()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChangePassword()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveUserClaim
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveUserClaim
  id: CanAddRemoveUserClaim
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanAddRemoveUserClaim()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanAddRemoveUserClaim()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanAddRemoveUserClaim()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanAddRemoveUserClaim
    path: test/Shared/UserManagerTestBase.cs
    startLine: 555
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanAddRemoveUserClaim()
    content.vb: >-
      <Fact>

      Public Function CanAddRemoveUserClaim As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanAddRemoveUserClaim()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanAddRemoveUserClaim()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveClaimOnlyAffectsUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveClaimOnlyAffectsUser
  id: RemoveClaimOnlyAffectsUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: RemoveClaimOnlyAffectsUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.RemoveClaimOnlyAffectsUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.RemoveClaimOnlyAffectsUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveClaimOnlyAffectsUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 584
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task RemoveClaimOnlyAffectsUser()
    content.vb: >-
      <Fact>

      Public Function RemoveClaimOnlyAffectsUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).RemoveClaimOnlyAffectsUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).RemoveClaimOnlyAffectsUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanReplaceUserClaim
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanReplaceUserClaim
  id: CanReplaceUserClaim
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanReplaceUserClaim()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanReplaceUserClaim()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanReplaceUserClaim()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanReplaceUserClaim
    path: test/Shared/UserManagerTestBase.cs
    startLine: 617
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanReplaceUserClaim()
    content.vb: >-
      <Fact>

      Public Function CanReplaceUserClaim As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanReplaceUserClaim()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanReplaceUserClaim()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ReplaceUserClaimOnlyAffectsUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ReplaceUserClaimOnlyAffectsUser
  id: ReplaceUserClaimOnlyAffectsUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ReplaceUserClaimOnlyAffectsUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ReplaceUserClaimOnlyAffectsUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ReplaceUserClaimOnlyAffectsUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ReplaceUserClaimOnlyAffectsUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 640
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ReplaceUserClaimOnlyAffectsUser()
    content.vb: >-
      <Fact>

      Public Function ReplaceUserClaimOnlyAffectsUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ReplaceUserClaimOnlyAffectsUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ReplaceUserClaimOnlyAffectsUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePasswordFallsIfPasswordWrong
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePasswordFallsIfPasswordWrong
  id: ChangePasswordFallsIfPasswordWrong
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ChangePasswordFallsIfPasswordWrong()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ChangePasswordFallsIfPasswordWrong()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ChangePasswordFallsIfPasswordWrong()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangePasswordFallsIfPasswordWrong
    path: test/Shared/UserManagerTestBase.cs
    startLine: 673
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ChangePasswordFallsIfPasswordWrong()
    content.vb: >-
      <Fact>

      Public Function ChangePasswordFallsIfPasswordWrong As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ChangePasswordFallsIfPasswordWrong()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ChangePasswordFallsIfPasswordWrong()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeUserNameFails
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeUserNameFails
  id: AddDupeUserNameFails
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddDupeUserNameFails()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddDupeUserNameFails()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddDupeUserNameFails()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddDupeUserNameFails
    path: test/Shared/UserManagerTestBase.cs
    startLine: 688
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddDupeUserNameFails()
    content.vb: >-
      <Fact>

      Public Function AddDupeUserNameFails As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddDupeUserNameFails()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddDupeUserNameFails()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailAllowedByDefault
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailAllowedByDefault
  id: AddDupeEmailAllowedByDefault
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddDupeEmailAllowedByDefault()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddDupeEmailAllowedByDefault()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddDupeEmailAllowedByDefault()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddDupeEmailAllowedByDefault
    path: test/Shared/UserManagerTestBase.cs
    startLine: 703
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddDupeEmailAllowedByDefault()
    content.vb: >-
      <Fact>

      Public Function AddDupeEmailAllowedByDefault As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddDupeEmailAllowedByDefault()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddDupeEmailAllowedByDefault()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailFailsWhenUniqueEmailRequired
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeEmailFailsWhenUniqueEmailRequired
  id: AddDupeEmailFailsWhenUniqueEmailRequired
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddDupeEmailFailsWhenUniqueEmailRequired()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddDupeEmailFailsWhenUniqueEmailRequired()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddDupeEmailFailsWhenUniqueEmailRequired()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddDupeEmailFailsWhenUniqueEmailRequired
    path: test/Shared/UserManagerTestBase.cs
    startLine: 718
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddDupeEmailFailsWhenUniqueEmailRequired()
    content.vb: >-
      <Fact>

      Public Function AddDupeEmailFailsWhenUniqueEmailRequired As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddDupeEmailFailsWhenUniqueEmailRequired()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddDupeEmailFailsWhenUniqueEmailRequired()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UpdateSecurityStampActuallyChanges
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UpdateSecurityStampActuallyChanges
  id: UpdateSecurityStampActuallyChanges
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UpdateSecurityStampActuallyChanges()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UpdateSecurityStampActuallyChanges()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UpdateSecurityStampActuallyChanges()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UpdateSecurityStampActuallyChanges
    path: test/Shared/UserManagerTestBase.cs
    startLine: 733
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task UpdateSecurityStampActuallyChanges()
    content.vb: >-
      <Fact>

      Public Function UpdateSecurityStampActuallyChanges As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UpdateSecurityStampActuallyChanges()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UpdateSecurityStampActuallyChanges()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeLoginFails
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddDupeLoginFails
  id: AddDupeLoginFails
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddDupeLoginFails()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddDupeLoginFails()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddDupeLoginFails()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddDupeLoginFails
    path: test/Shared/UserManagerTestBase.cs
    startLine: 750
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddDupeLoginFails()
    content.vb: >-
      <Fact>

      Public Function AddDupeLoginFails As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddDupeLoginFails()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddDupeLoginFails()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindByEmail
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindByEmail
  id: CanFindByEmail
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanFindByEmail()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanFindByEmail()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanFindByEmail()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanFindByEmail
    path: test/Shared/UserManagerTestBase.cs
    startLine: 768
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanFindByEmail()
    content.vb: >-
      <Fact>

      Public Function CanFindByEmail As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanFindByEmail()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanFindByEmail()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindUsersViaUserQuerable
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindUsersViaUserQuerable
  id: CanFindUsersViaUserQuerable
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanFindUsersViaUserQuerable()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanFindUsersViaUserQuerable()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanFindUsersViaUserQuerable()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanFindUsersViaUserQuerable
    path: test/Shared/UserManagerTestBase.cs
    startLine: 783
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanFindUsersViaUserQuerable()
    content.vb: >-
      <Fact>

      Public Function CanFindUsersViaUserQuerable As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanFindUsersViaUserQuerable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanFindUsersViaUserQuerable()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailFalseByDefaultTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailFalseByDefaultTest
  id: ConfirmEmailFalseByDefaultTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ConfirmEmailFalseByDefaultTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ConfirmEmailFalseByDefaultTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ConfirmEmailFalseByDefaultTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfirmEmailFalseByDefaultTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 803
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ConfirmEmailFalseByDefaultTest()
    content.vb: >-
      <Fact>

      Public Function ConfirmEmailFalseByDefaultTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ConfirmEmailFalseByDefaultTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ConfirmEmailFalseByDefaultTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanResetPasswordWithStaticTokenProvider
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanResetPasswordWithStaticTokenProvider
  id: CanResetPasswordWithStaticTokenProvider
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanResetPasswordWithStaticTokenProvider()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanResetPasswordWithStaticTokenProvider()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanResetPasswordWithStaticTokenProvider()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanResetPasswordWithStaticTokenProvider
    path: test/Shared/UserManagerTestBase.cs
    startLine: 839
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanResetPasswordWithStaticTokenProvider()
    content.vb: >-
      <Fact>

      Public Function CanResetPasswordWithStaticTokenProvider As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanResetPasswordWithStaticTokenProvider()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanResetPasswordWithStaticTokenProvider()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider
  id: PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider
    path: test/Shared/UserManagerTestBase.cs
    startLine: 864
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
    content.vb: >-
      <Fact>

      Public Function PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).PasswordValidatorCanBlockResetPasswordWithStaticTokenProvider()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetPasswordWithStaticTokenProviderFailsWithWrongToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetPasswordWithStaticTokenProviderFailsWithWrongToken
  id: ResetPasswordWithStaticTokenProviderFailsWithWrongToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetPasswordWithStaticTokenProviderFailsWithWrongToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 890
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
    content.vb: >-
      <Fact>

      Public Function ResetPasswordWithStaticTokenProviderFailsWithWrongToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ResetPasswordWithStaticTokenProviderFailsWithWrongToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGenerateAndVerifyUserTokenWithStaticTokenProvider
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGenerateAndVerifyUserTokenWithStaticTokenProvider
  id: CanGenerateAndVerifyUserTokenWithStaticTokenProvider
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGenerateAndVerifyUserTokenWithStaticTokenProvider
    path: test/Shared/UserManagerTestBase.cs
    startLine: 912
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
    content.vb: >-
      <Fact>

      Public Function CanGenerateAndVerifyUserTokenWithStaticTokenProvider As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGenerateAndVerifyUserTokenWithStaticTokenProvider()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanConfirmEmailWithStaticToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanConfirmEmailWithStaticToken
  id: CanConfirmEmailWithStaticToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanConfirmEmailWithStaticToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanConfirmEmailWithStaticToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanConfirmEmailWithStaticToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanConfirmEmailWithStaticToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 940
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanConfirmEmailWithStaticToken()
    content.vb: >-
      <Fact>

      Public Function CanConfirmEmailWithStaticToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanConfirmEmailWithStaticToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanConfirmEmailWithStaticToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailWithStaticTokenFailsWithWrongToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmEmailWithStaticTokenFailsWithWrongToken
  id: ConfirmEmailWithStaticTokenFailsWithWrongToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ConfirmEmailWithStaticTokenFailsWithWrongToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ConfirmEmailWithStaticTokenFailsWithWrongToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ConfirmEmailWithStaticTokenFailsWithWrongToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfirmEmailWithStaticTokenFailsWithWrongToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 962
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ConfirmEmailWithStaticTokenFailsWithWrongToken()
    content.vb: >-
      <Fact>

      Public Function ConfirmEmailWithStaticTokenFailsWithWrongToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ConfirmEmailWithStaticTokenFailsWithWrongToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ConfirmEmailWithStaticTokenFailsWithWrongToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmTokenFailsAfterPasswordChange
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ConfirmTokenFailsAfterPasswordChange
  id: ConfirmTokenFailsAfterPasswordChange
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ConfirmTokenFailsAfterPasswordChange()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ConfirmTokenFailsAfterPasswordChange()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ConfirmTokenFailsAfterPasswordChange()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ConfirmTokenFailsAfterPasswordChange
    path: test/Shared/UserManagerTestBase.cs
    startLine: 980
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ConfirmTokenFailsAfterPasswordChange()
    content.vb: >-
      <Fact>

      Public Function ConfirmTokenFailsAfterPasswordChange As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ConfirmTokenFailsAfterPasswordChange()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ConfirmTokenFailsAfterPasswordChange()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SingleFailureLockout
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SingleFailureLockout
  id: SingleFailureLockout
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: SingleFailureLockout()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.SingleFailureLockout()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.SingleFailureLockout()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SingleFailureLockout
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1001
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task SingleFailureLockout()
    content.vb: >-
      <Fact>

      Public Function SingleFailureLockout As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).SingleFailureLockout()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).SingleFailureLockout()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.TwoFailureLockout
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.TwoFailureLockout
  id: TwoFailureLockout
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: TwoFailureLockout()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.TwoFailureLockout()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.TwoFailureLockout()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: TwoFailureLockout
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1023
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task TwoFailureLockout()
    content.vb: >-
      <Fact>

      Public Function TwoFailureLockout As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).TwoFailureLockout()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).TwoFailureLockout()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetAccessCountPreventsLockout
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ResetAccessCountPreventsLockout
  id: ResetAccessCountPreventsLockout
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ResetAccessCountPreventsLockout()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ResetAccessCountPreventsLockout()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ResetAccessCountPreventsLockout()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ResetAccessCountPreventsLockout
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1048
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ResetAccessCountPreventsLockout()
    content.vb: >-
      <Fact>

      Public Function ResetAccessCountPreventsLockout As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ResetAccessCountPreventsLockout()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ResetAccessCountPreventsLockout()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanEnableLockoutManuallyAndLockout
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanEnableLockoutManuallyAndLockout
  id: CanEnableLockoutManuallyAndLockout
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanEnableLockoutManuallyAndLockout()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanEnableLockoutManuallyAndLockout()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanEnableLockoutManuallyAndLockout()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanEnableLockoutManuallyAndLockout
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1076
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanEnableLockoutManuallyAndLockout()
    content.vb: >-
      <Fact>

      Public Function CanEnableLockoutManuallyAndLockout As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanEnableLockoutManuallyAndLockout()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanEnableLockoutManuallyAndLockout()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNotLockedOutWithNullDateTimeAndIsSetToNullDate
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserNotLockedOutWithNullDateTimeAndIsSetToNullDate
  id: UserNotLockedOutWithNullDateTimeAndIsSetToNullDate
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserNotLockedOutWithNullDateTimeAndIsSetToNullDate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1104
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
    content.vb: >-
      <Fact>

      Public Function UserNotLockedOutWithNullDateTimeAndIsSetToNullDate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserNotLockedOutWithNullDateTimeAndIsSetToNullDate()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutFailsIfNotEnabled
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutFailsIfNotEnabled
  id: LockoutFailsIfNotEnabled
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: LockoutFailsIfNotEnabled()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.LockoutFailsIfNotEnabled()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.LockoutFailsIfNotEnabled()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutFailsIfNotEnabled
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1120
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task LockoutFailsIfNotEnabled()
    content.vb: >-
      <Fact>

      Public Function LockoutFailsIfNotEnabled As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).LockoutFailsIfNotEnabled()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).LockoutFailsIfNotEnabled()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut
  id: LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1138
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
    content.vb: >-
      <Fact>

      Public Function LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowMinus1SecInUserShouldNotBeLockedOut()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut
  id: LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1152
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
    content.vb: >-
      <Fact>

      Public Function LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowSubOneSecondWithManagerShouldNotBeLockedOut()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowPlus5ShouldBeLockedOut
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.LockoutEndToUtcNowPlus5ShouldBeLockedOut
  id: LockoutEndToUtcNowPlus5ShouldBeLockedOut
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: LockoutEndToUtcNowPlus5ShouldBeLockedOut()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowPlus5ShouldBeLockedOut()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.LockoutEndToUtcNowPlus5ShouldBeLockedOut()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: LockoutEndToUtcNowPlus5ShouldBeLockedOut
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1167
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task LockoutEndToUtcNowPlus5ShouldBeLockedOut()
    content.vb: >-
      <Fact>

      Public Function LockoutEndToUtcNowPlus5ShouldBeLockedOut As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowPlus5ShouldBeLockedOut()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).LockoutEndToUtcNowPlus5ShouldBeLockedOut()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserLockedOutWithDateTimeLocalKindNowPlus30
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.UserLockedOutWithDateTimeLocalKindNowPlus30
  id: UserLockedOutWithDateTimeLocalKindNowPlus30
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: UserLockedOutWithDateTimeLocalKindNowPlus30()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.UserLockedOutWithDateTimeLocalKindNowPlus30()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.UserLockedOutWithDateTimeLocalKindNowPlus30()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: UserLockedOutWithDateTimeLocalKindNowPlus30
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1182
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task UserLockedOutWithDateTimeLocalKindNowPlus30()
    content.vb: >-
      <Fact>

      Public Function UserLockedOutWithDateTimeLocalKindNowPlus30 As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).UserLockedOutWithDateTimeLocalKindNowPlus30()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).UserLockedOutWithDateTimeLocalKindNowPlus30()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateRoleTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanCreateRoleTest
  id: CanCreateRoleTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanCreateRoleTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanCreateRoleTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanCreateRoleTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanCreateRoleTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1201
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanCreateRoleTest()
    content.vb: >-
      <Fact>

      Public Function CanCreateRoleTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanCreateRoleTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanCreateRoleTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksCreateRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksCreateRole
  id: BadValidatorBlocksCreateRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: BadValidatorBlocksCreateRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.BadValidatorBlocksCreateRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.BadValidatorBlocksCreateRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: BadValidatorBlocksCreateRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1237
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task BadValidatorBlocksCreateRole()
    content.vb: >-
      <Fact>

      Public Function BadValidatorBlocksCreateRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).BadValidatorBlocksCreateRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).BadValidatorBlocksCreateRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainRoleValidators
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChainRoleValidators
  id: CanChainRoleValidators
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChainRoleValidators()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChainRoleValidators()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChainRoleValidators()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChainRoleValidators
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1253
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChainRoleValidators()
    content.vb: >-
      <Fact>

      Public Function CanChainRoleValidators As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChainRoleValidators()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChainRoleValidators()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksRoleUpdate
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.BadValidatorBlocksRoleUpdate
  id: BadValidatorBlocksRoleUpdate
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: BadValidatorBlocksRoleUpdate()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.BadValidatorBlocksRoleUpdate()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.BadValidatorBlocksRoleUpdate()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: BadValidatorBlocksRoleUpdate
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1271
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task BadValidatorBlocksRoleUpdate()
    content.vb: >-
      <Fact>

      Public Function BadValidatorBlocksRoleUpdate As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).BadValidatorBlocksRoleUpdate()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).BadValidatorBlocksRoleUpdate()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanDeleteRole
  id: CanDeleteRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanDeleteRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanDeleteRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanDeleteRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanDeleteRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1288
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanDeleteRole()
    content.vb: >-
      <Fact>

      Public Function CanDeleteRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanDeleteRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanDeleteRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveRoleClaim
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddRemoveRoleClaim
  id: CanAddRemoveRoleClaim
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanAddRemoveRoleClaim()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanAddRemoveRoleClaim()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanAddRemoveRoleClaim()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanAddRemoveRoleClaim
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1305
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanAddRemoveRoleClaim()
    content.vb: >-
      <Fact>

      Public Function CanAddRemoveRoleClaim As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanAddRemoveRoleClaim()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanAddRemoveRoleClaim()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindById
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindById
  id: CanRoleFindById
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanRoleFindById()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanRoleFindById()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanRoleFindById()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRoleFindById
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1344
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanRoleFindById()
    content.vb: >-
      <Fact>

      Public Function CanRoleFindById As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanRoleFindById()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanRoleFindById()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindByName
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRoleFindByName
  id: CanRoleFindByName
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanRoleFindByName()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanRoleFindByName()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanRoleFindByName()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRoleFindByName
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1358
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanRoleFindByName()
    content.vb: >-
      <Fact>

      Public Function CanRoleFindByName As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanRoleFindByName()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanRoleFindByName()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateRoleName
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanUpdateRoleName
  id: CanUpdateRoleName
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanUpdateRoleName()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanUpdateRoleName()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanUpdateRoleName()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanUpdateRoleName
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1374
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanUpdateRoleName()
    content.vb: >-
      <Fact>

      Public Function CanUpdateRoleName As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanUpdateRoleName()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanUpdateRoleName()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanQueryableRoles
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanQueryableRoles
  id: CanQueryableRoles
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanQueryableRoles()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanQueryableRoles()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanQueryableRoles()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanQueryableRoles
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1393
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanQueryableRoles()
    content.vb: >-
      <Fact>

      Public Function CanQueryableRoles As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanQueryableRoles()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanQueryableRoles()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleFailsIfExists
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CreateRoleFailsIfExists
  id: CreateRoleFailsIfExists
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CreateRoleFailsIfExists()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CreateRoleFailsIfExists()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CreateRoleFailsIfExists()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CreateRoleFailsIfExists
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1413
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CreateRoleFailsIfExists()
    content.vb: >-
      <Fact>

      Public Function CreateRoleFailsIfExists As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CreateRoleFailsIfExists()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CreateRoleFailsIfExists()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddUsersToRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanAddUsersToRole
  id: CanAddUsersToRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanAddUsersToRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanAddUsersToRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanAddUsersToRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanAddUsersToRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1430
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanAddUsersToRole()
    content.vb: >-
      <Fact>

      Public Function CanAddUsersToRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanAddUsersToRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanAddUsersToRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetRolesForUser
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetRolesForUser
  id: CanGetRolesForUser
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGetRolesForUser()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGetRolesForUser()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGetRolesForUser()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGetRolesForUser
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1455
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [ConditionalFact]

      [FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason = "Fails due to threading bugs in Mono")]

      public Task CanGetRolesForUser()
    content.vb: >-
      <ConditionalFact>

      <FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason:="Fails due to threading bugs in Mono")>

      Public Function CanGetRolesForUser As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  - type: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute.#ctor(Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks)
    arguments:
    - type: Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks
      value: 1
    namedArguments:
    - name: SkipReason
      type: System.String
      value: Fails due to threading bugs in Mono
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGetRolesForUser()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGetRolesForUser()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserFromRoleWithMultipleRoles
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserFromRoleWithMultipleRoles
  id: RemoveUserFromRoleWithMultipleRoles
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: RemoveUserFromRoleWithMultipleRoles()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.RemoveUserFromRoleWithMultipleRoles()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.RemoveUserFromRoleWithMultipleRoles()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveUserFromRoleWithMultipleRoles
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1495
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task RemoveUserFromRoleWithMultipleRoles()
    content.vb: >-
      <Fact>

      Public Function RemoveUserFromRoleWithMultipleRoles As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).RemoveUserFromRoleWithMultipleRoles()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).RemoveUserFromRoleWithMultipleRoles()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemoveUsersFromRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanRemoveUsersFromRole
  id: CanRemoveUsersFromRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanRemoveUsersFromRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanRemoveUsersFromRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanRemoveUsersFromRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanRemoveUsersFromRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1518
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanRemoveUsersFromRole()
    content.vb: >-
      <Fact>

      Public Function CanRemoveUsersFromRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanRemoveUsersFromRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanRemoveUsersFromRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserNotInRoleFails
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.RemoveUserNotInRoleFails
  id: RemoveUserNotInRoleFails
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: RemoveUserNotInRoleFails()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.RemoveUserNotInRoleFails()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.RemoveUserNotInRoleFails()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: RemoveUserNotInRoleFails
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1547
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task RemoveUserNotInRoleFails()
    content.vb: >-
      <Fact>

      Public Function RemoveUserNotInRoleFails As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).RemoveUserNotInRoleFails()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).RemoveUserNotInRoleFails()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRoleFailsIfAlreadyInRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRoleFailsIfAlreadyInRole
  id: AddUserToRoleFailsIfAlreadyInRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddUserToRoleFailsIfAlreadyInRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddUserToRoleFailsIfAlreadyInRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddUserToRoleFailsIfAlreadyInRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddUserToRoleFailsIfAlreadyInRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1567
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddUserToRoleFailsIfAlreadyInRole()
    content.vb: >-
      <Fact>

      Public Function AddUserToRoleFailsIfAlreadyInRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddUserToRoleFailsIfAlreadyInRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddUserToRoleFailsIfAlreadyInRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRolesIgnoresDuplicates
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.AddUserToRolesIgnoresDuplicates
  id: AddUserToRolesIgnoresDuplicates
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: AddUserToRolesIgnoresDuplicates()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.AddUserToRolesIgnoresDuplicates()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.AddUserToRolesIgnoresDuplicates()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: AddUserToRolesIgnoresDuplicates
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1588
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task AddUserToRolesIgnoresDuplicates()
    content.vb: >-
      <Fact>

      Public Function AddUserToRolesIgnoresDuplicates As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).AddUserToRolesIgnoresDuplicates()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).AddUserToRolesIgnoresDuplicates()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleByNameWithManager
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleByNameWithManager
  id: CanFindRoleByNameWithManager
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanFindRoleByNameWithManager()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanFindRoleByNameWithManager()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanFindRoleByNameWithManager()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanFindRoleByNameWithManager
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1608
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanFindRoleByNameWithManager()
    content.vb: >-
      <Fact>

      Public Function CanFindRoleByNameWithManager As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanFindRoleByNameWithManager()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanFindRoleByNameWithManager()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleWithManager
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanFindRoleWithManager
  id: CanFindRoleWithManager
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanFindRoleWithManager()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanFindRoleWithManager()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanFindRoleWithManager()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanFindRoleWithManager
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1622
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanFindRoleWithManager()
    content.vb: >-
      <Fact>

      Public Function CanFindRoleWithManager As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanFindRoleWithManager()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanFindRoleWithManager()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetPhoneNumberTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.SetPhoneNumberTest
  id: SetPhoneNumberTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: SetPhoneNumberTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.SetPhoneNumberTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.SetPhoneNumberTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: SetPhoneNumberTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1636
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task SetPhoneNumberTest()
    content.vb: >-
      <Fact>

      Public Function SetPhoneNumberTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).SetPhoneNumberTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).SetPhoneNumberTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePhoneNumber
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangePhoneNumber
  id: CanChangePhoneNumber
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChangePhoneNumber()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChangePhoneNumber()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChangePhoneNumber()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChangePhoneNumber
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1653
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChangePhoneNumber()
    content.vb: >-
      <Fact>

      Public Function CanChangePhoneNumber As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChangePhoneNumber()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChangePhoneNumber()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongToken
  id: ChangePhoneNumberFailsWithWrongToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ChangePhoneNumberFailsWithWrongToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ChangePhoneNumberFailsWithWrongToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ChangePhoneNumberFailsWithWrongToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangePhoneNumberFailsWithWrongToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1672
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ChangePhoneNumberFailsWithWrongToken()
    content.vb: >-
      <Fact>

      Public Function ChangePhoneNumberFailsWithWrongToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ChangePhoneNumberFailsWithWrongToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ChangePhoneNumberFailsWithWrongToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongPhoneNumber
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangePhoneNumberFailsWithWrongPhoneNumber
  id: ChangePhoneNumberFailsWithWrongPhoneNumber
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ChangePhoneNumberFailsWithWrongPhoneNumber()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ChangePhoneNumberFailsWithWrongPhoneNumber()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ChangePhoneNumberFailsWithWrongPhoneNumber()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangePhoneNumberFailsWithWrongPhoneNumber
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1692
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ChangePhoneNumberFailsWithWrongPhoneNumber()
    content.vb: >-
      <Fact>

      Public Function ChangePhoneNumberFailsWithWrongPhoneNumber As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ChangePhoneNumberFailsWithWrongPhoneNumber()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ChangePhoneNumberFailsWithWrongPhoneNumber()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanVerifyPhoneNumber
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanVerifyPhoneNumber
  id: CanVerifyPhoneNumber
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanVerifyPhoneNumber()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanVerifyPhoneNumber()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanVerifyPhoneNumber()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanVerifyPhoneNumber
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1712
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanVerifyPhoneNumber()
    content.vb: >-
      <Fact>

      Public Function CanVerifyPhoneNumber As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanVerifyPhoneNumber()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanVerifyPhoneNumber()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmail
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmail
  id: CanChangeEmail
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChangeEmail()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChangeEmail()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChangeEmail()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChangeEmail
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1736
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChangeEmail()
    content.vb: >-
      <Fact>

      Public Function CanChangeEmail As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChangeEmail()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChangeEmail()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmailWithDifferentTokenProvider
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanChangeEmailWithDifferentTokenProvider
  id: CanChangeEmailWithDifferentTokenProvider
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanChangeEmailWithDifferentTokenProvider()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanChangeEmailWithDifferentTokenProvider()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanChangeEmailWithDifferentTokenProvider()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanChangeEmailWithDifferentTokenProvider
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1758
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanChangeEmailWithDifferentTokenProvider()
    content.vb: >-
      <Fact>

      Public Function CanChangeEmailWithDifferentTokenProvider As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanChangeEmailWithDifferentTokenProvider()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanChangeEmailWithDifferentTokenProvider()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithWrongToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithWrongToken
  id: ChangeEmailFailsWithWrongToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ChangeEmailFailsWithWrongToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ChangeEmailFailsWithWrongToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ChangeEmailFailsWithWrongToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangeEmailFailsWithWrongToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1783
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ChangeEmailFailsWithWrongToken()
    content.vb: >-
      <Fact>

      Public Function ChangeEmailFailsWithWrongToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ChangeEmailFailsWithWrongToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ChangeEmailFailsWithWrongToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithEmail
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.ChangeEmailFailsWithEmail
  id: ChangeEmailFailsWithEmail
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: ChangeEmailFailsWithEmail()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.ChangeEmailFailsWithEmail()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.ChangeEmailFailsWithEmail()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: ChangeEmailFailsWithEmail
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1806
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task ChangeEmailFailsWithEmail()
    content.vb: >-
      <Fact>

      Public Function ChangeEmailFailsWithEmail As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).ChangeEmailFailsWithEmail()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).ChangeEmailFailsWithEmail()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EmailFactorFailsAfterSecurityStampChangeTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EmailFactorFailsAfterSecurityStampChangeTest
  id: EmailFactorFailsAfterSecurityStampChangeTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: EmailFactorFailsAfterSecurityStampChangeTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.EmailFactorFailsAfterSecurityStampChangeTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.EmailFactorFailsAfterSecurityStampChangeTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: EmailFactorFailsAfterSecurityStampChangeTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1830
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task EmailFactorFailsAfterSecurityStampChangeTest()
    content.vb: >-
      <Fact>

      Public Function EmailFactorFailsAfterSecurityStampChangeTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).EmailFactorFailsAfterSecurityStampChangeTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).EmailFactorFailsAfterSecurityStampChangeTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EnableTwoFactorChangesSecurityStamp
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.EnableTwoFactorChangesSecurityStamp
  id: EnableTwoFactorChangesSecurityStamp
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: EnableTwoFactorChangesSecurityStamp()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.EnableTwoFactorChangesSecurityStamp()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.EnableTwoFactorChangesSecurityStamp()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: EnableTwoFactorChangesSecurityStamp
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1855
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task EnableTwoFactorChangesSecurityStamp()
    content.vb: >-
      <Fact>

      Public Function EnableTwoFactorChangesSecurityStamp As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).EnableTwoFactorChangesSecurityStamp()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).EnableTwoFactorChangesSecurityStamp()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateTwoFactorWithUnknownFactorProviderWillThrow
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateTwoFactorWithUnknownFactorProviderWillThrow
  id: GenerateTwoFactorWithUnknownFactorProviderWillThrow
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: GenerateTwoFactorWithUnknownFactorProviderWillThrow()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.GenerateTwoFactorWithUnknownFactorProviderWillThrow()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.GenerateTwoFactorWithUnknownFactorProviderWillThrow()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateTwoFactorWithUnknownFactorProviderWillThrow
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1872
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task GenerateTwoFactorWithUnknownFactorProviderWillThrow()
    content.vb: >-
      <Fact>

      Public Function GenerateTwoFactorWithUnknownFactorProviderWillThrow As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).GenerateTwoFactorWithUnknownFactorProviderWillThrow()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).GenerateTwoFactorWithUnknownFactorProviderWillThrow()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GetValidTwoFactorTestEmptyWithNoProviders
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GetValidTwoFactorTestEmptyWithNoProviders
  id: GetValidTwoFactorTestEmptyWithNoProviders
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: GetValidTwoFactorTestEmptyWithNoProviders()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.GetValidTwoFactorTestEmptyWithNoProviders()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.GetValidTwoFactorTestEmptyWithNoProviders()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GetValidTwoFactorTestEmptyWithNoProviders
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1890
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task GetValidTwoFactorTestEmptyWithNoProviders()
    content.vb: >-
      <Fact>

      Public Function GetValidTwoFactorTestEmptyWithNoProviders As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).GetValidTwoFactorTestEmptyWithNoProviders()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).GetValidTwoFactorTestEmptyWithNoProviders()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetSetUpdateAndRemoveUserToken
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetSetUpdateAndRemoveUserToken
  id: CanGetSetUpdateAndRemoveUserToken
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGetSetUpdateAndRemoveUserToken()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGetSetUpdateAndRemoveUserToken()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGetSetUpdateAndRemoveUserToken()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGetSetUpdateAndRemoveUserToken
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1905
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanGetSetUpdateAndRemoveUserToken()
    content.vb: >-
      <Fact>

      Public Function CanGetSetUpdateAndRemoveUserToken As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGetSetUpdateAndRemoveUserToken()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGetSetUpdateAndRemoveUserToken()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetValidTwoFactor
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetValidTwoFactor
  id: CanGetValidTwoFactor
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGetValidTwoFactor()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGetValidTwoFactor()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGetValidTwoFactor()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGetValidTwoFactor
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1929
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task CanGetValidTwoFactor()
    content.vb: >-
      <Fact>

      Public Function CanGetValidTwoFactor As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGetValidTwoFactor()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGetValidTwoFactor()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PhoneFactorFailsAfterSecurityStampChangeTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.PhoneFactorFailsAfterSecurityStampChangeTest
  id: PhoneFactorFailsAfterSecurityStampChangeTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: PhoneFactorFailsAfterSecurityStampChangeTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.PhoneFactorFailsAfterSecurityStampChangeTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.PhoneFactorFailsAfterSecurityStampChangeTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: PhoneFactorFailsAfterSecurityStampChangeTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1964
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task PhoneFactorFailsAfterSecurityStampChangeTest()
    content.vb: >-
      <Fact>

      Public Function PhoneFactorFailsAfterSecurityStampChangeTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).PhoneFactorFailsAfterSecurityStampChangeTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).PhoneFactorFailsAfterSecurityStampChangeTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyTokenFromWrongTokenProviderFails
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyTokenFromWrongTokenProviderFails
  id: VerifyTokenFromWrongTokenProviderFails
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: VerifyTokenFromWrongTokenProviderFails()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.VerifyTokenFromWrongTokenProviderFails()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.VerifyTokenFromWrongTokenProviderFails()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyTokenFromWrongTokenProviderFails
    path: test/Shared/UserManagerTestBase.cs
    startLine: 1984
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task VerifyTokenFromWrongTokenProviderFails()
    content.vb: >-
      <Fact>

      Public Function VerifyTokenFromWrongTokenProviderFails As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).VerifyTokenFromWrongTokenProviderFails()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).VerifyTokenFromWrongTokenProviderFails()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyWithWrongSmsTokenFails
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.VerifyWithWrongSmsTokenFails
  id: VerifyWithWrongSmsTokenFails
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: VerifyWithWrongSmsTokenFails()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.VerifyWithWrongSmsTokenFails()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.VerifyWithWrongSmsTokenFails()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: VerifyWithWrongSmsTokenFails
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2000
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task VerifyWithWrongSmsTokenFails()
    content.vb: >-
      <Fact>

      Public Function VerifyWithWrongSmsTokenFails As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).VerifyWithWrongSmsTokenFails()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).VerifyWithWrongSmsTokenFails()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.NullableDateTimeOperationTest
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.NullableDateTimeOperationTest
  id: NullableDateTimeOperationTest
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: NullableDateTimeOperationTest()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.NullableDateTimeOperationTest()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.NullableDateTimeOperationTest()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: NullableDateTimeOperationTest
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2014
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [Fact]

      public Task NullableDateTimeOperationTest()
    content.vb: >-
      <Fact>

      Public Function NullableDateTimeOperationTest As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).NullableDateTimeOperationTest()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).NullableDateTimeOperationTest()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersWithClaims
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersWithClaims
  id: CanGetUsersWithClaims
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGetUsersWithClaims()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGetUsersWithClaims()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGetUsersWithClaims()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGetUsersWithClaims
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2036
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [ConditionalFact]

      [FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason = "Fails due to threading bugs in Mono")]

      public Task CanGetUsersWithClaims()
    content.vb: >-
      <ConditionalFact>

      <FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason:="Fails due to threading bugs in Mono")>

      Public Function CanGetUsersWithClaims As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  - type: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute.#ctor(Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks)
    arguments:
    - type: Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks
      value: 1
    namedArguments:
    - name: SkipReason
      type: System.String
      value: Fails due to threading bugs in Mono
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGetUsersWithClaims()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGetUsersWithClaims()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersInRole
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.CanGetUsersInRole
  id: CanGetUsersInRole
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: CanGetUsersInRole()
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.CanGetUsersInRole()
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.CanGetUsersInRole()
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: CanGetUsersInRole
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2062
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: >-
      [ConditionalFact]

      [FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason = "Fails due to threading bugs in Mono")]

      public Task CanGetUsersInRole()
    content.vb: >-
      <ConditionalFact>

      <FrameworkSkipCondition(RuntimeFrameworks.Mono, SkipReason:="Fails due to threading bugs in Mono")>

      Public Function CanGetUsersInRole As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.ConditionalFactAttribute.#ctor
    arguments: []
  - type: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute
    ctor: Microsoft.AspNetCore.Testing.xunit.FrameworkSkipConditionAttribute.#ctor(Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks)
    arguments:
    - type: Microsoft.AspNetCore.Testing.xunit.RuntimeFrameworks
      value: 1
    namedArguments:
    - name: SkipReason
      type: System.String
      value: Fails due to threading bugs in Mono
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).CanGetUsersInRole()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).CanGetUsersInRole()
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateUsers(System.String,System.Int32)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateUsers(System.String,System.Int32)
  id: GenerateUsers(System.String,System.Int32)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: GenerateUsers(String, Int32)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.GenerateUsers(String, Int32)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.GenerateUsers(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateUsers
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2101
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public List<TUser> GenerateUsers(string userNamePrefix, int count)
    content.vb: Public Function GenerateUsers(userNamePrefix As String, count As Integer) As List(Of TUser)
    parameters:
    - id: userNamePrefix
      type: System.String
    - id: count
      type: System.Int32
    return:
      type: System.Collections.Generic.List{{TUser}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).GenerateUsers(String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).GenerateUsers(System.String, System.Int32)
- uid: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateRoles(System.String,System.Int32)
  commentId: M:Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3.GenerateRoles(System.String,System.Int32)
  id: GenerateRoles(System.String,System.Int32)
  parent: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase`3
  langs:
  - csharp
  - vb
  name: GenerateRoles(String, Int32)
  nameWithType: UserManagerTestBase<TUser, TRole, TKey>.GenerateRoles(String, Int32)
  fullName: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase<TUser, TRole, TKey>.GenerateRoles(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: test/Shared/UserManagerTestBase.cs
      branch: master
      repo: https://github.com/aspnet/Identity.git
    id: GenerateRoles
    path: test/Shared/UserManagerTestBase.cs
    startLine: 2111
  assemblies:
  - Microsoft.AspNetCore.Identity.InMemory.Test
  namespace: Microsoft.AspNetCore.Identity.Test
  syntax:
    content: public List<TRole> GenerateRoles(string namePrefix, int count)
    content.vb: Public Function GenerateRoles(namePrefix As String, count As Integer) As List(Of TRole)
    parameters:
    - id: namePrefix
      type: System.String
    - id: count
      type: System.Int32
    return:
      type: System.Collections.Generic.List{{TRole}}
  nameWithType.vb: UserManagerTestBase(Of TUser, TRole, TKey).GenerateRoles(String, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Identity.Test.UserManagerTestBase(Of TUser, TRole, TKey).GenerateRoles(System.String, System.Int32)
references:
- uid: Microsoft.AspNetCore.Identity.Test
  commentId: N:Microsoft.AspNetCore.Identity.Test
  isExternal: false
  name: Microsoft.AspNetCore.Identity.Test
  nameWithType: Microsoft.AspNetCore.Identity.Test
  fullName: Microsoft.AspNetCore.Identity.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: false
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
  commentId: T:System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}
  parent: System
  definition: System.Action`1
  name: Action<IServiceCollection>
  nameWithType: Action<IServiceCollection>
  fullName: System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>
  nameWithType.vb: Action(Of IServiceCollection)
  fullname.vb: System.Action(Of Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name.vb: Action(Of IServiceCollection)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
    name: IServiceCollection
    nameWithType: IServiceCollection
    fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager{{TUser}}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: false
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullname.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    nameWithType: UserManager
    fullName: Microsoft.AspNetCore.Identity.UserManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: false
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
- uid: Microsoft.AspNetCore.Identity.RoleManager{{TRole}}
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager{`0}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: false
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullname.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    nameWithType: RoleManager
    fullName: Microsoft.AspNetCore.Identity.RoleManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TUser}'
  commentId: '!:TUser'
  definition: TUser
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TUser
  isExternal: false
  name: TUser
  nameWithType: TUser
  fullName: TUser
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TRole}'
  commentId: '!:TRole'
  definition: TRole
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: TRole
  isExternal: false
  name: TRole
  nameWithType: TRole
  fullName: TRole
- uid: System.Linq.Expressions.Expression{System.Func{{TUser},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TUser, Boolean>>
  nameWithType: Expression<Func<TUser, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TUser, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TUser, Boolean))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TUser, System.Boolean))
  name.vb: Expression(Of Func(Of TUser, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.Expression{System.Func{{TRole},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRole, Boolean>>
  nameWithType: Expression<Func<TRole, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRole, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of TRole, Boolean))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRole, System.Boolean))
  name.vb: Expression(Of Func(Of TRole, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{{TUser}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TUser>
  nameWithType: List<TUser>
  fullName: System.Collections.Generic.List<TUser>
  nameWithType.vb: List(Of TUser)
  fullname.vb: System.Collections.Generic.List(Of TUser)
  name.vb: List(Of TUser)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TUser
    nameWithType: TUser
    fullName: TUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{{TRole}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TRole>
  nameWithType: List<TRole>
  fullName: System.Collections.Generic.List<TRole>
  nameWithType.vb: List(Of TRole)
  fullname.vb: System.Collections.Generic.List(Of TRole)
  name.vb: List(Of TRole)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRole
    nameWithType: TRole
    fullName: TRole
  - name: )
    nameWithType: )
    fullName: )
