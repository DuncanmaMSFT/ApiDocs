### YamlMime:ManagedReference
items:
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
  commentId: T:Microsoft.AspNetCore.Localization.ProviderCultureResult
  id: ProviderCultureResult
  parent: Microsoft.AspNetCore.Localization
  children:
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String})
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String)
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String,System.String)
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
  - Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
  langs:
  - csharp
  - vb
  name: ProviderCultureResult
  nameWithType: ProviderCultureResult
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
  type: Class
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: ProviderCultureResult
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 10
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nDetails about the cultures obtained from <xref href=\"Microsoft.AspNetCore.Localization.IRequestCultureProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class ProviderCultureResult
    content.vb: Public Class ProviderCultureResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String)
  commentId: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: ProviderCultureResult(String)
  nameWithType: ProviderCultureResult.ProviderCultureResult(String)
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 17
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref> object that has its <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures\" data-throw-if-not-resolved=\"false\"></xref> properties set to the same culture value.\n"
  example: []
  syntax:
    content: public ProviderCultureResult(string culture)
    content.vb: Public Sub New(culture As String)
    parameters:
    - id: culture
      type: System.String
      description: The name of the culture to be used for formatting, text, i.e. language.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String,System.String)
  commentId: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: ProviderCultureResult(String, String)
  nameWithType: ProviderCultureResult.ProviderCultureResult(String, String)
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 28
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref> object has its <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures\" data-throw-if-not-resolved=\"false\"></xref> properties set to the respective culture values provided.\n"
  example: []
  syntax:
    content: public ProviderCultureResult(string culture, string uiCulture)
    content.vb: Public Sub New(culture As String, uiCulture As String)
    parameters:
    - id: culture
      type: System.String
      description: The name of the culture to be used for formatting.
    - id: uiCulture
      type: System.String
      description: The name of the ui culture to be used for text, i.e. language.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String})
  id: '#ctor(System.Collections.Generic.IList{System.String})'
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: ProviderCultureResult(IList<String>)
  nameWithType: ProviderCultureResult.ProviderCultureResult(IList<String>)
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.Collections.Generic.IList<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 38
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref> object that has its <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures\" data-throw-if-not-resolved=\"false\"></xref> properties set to the same culture value.\n"
  example: []
  syntax:
    content: public ProviderCultureResult(IList<string> cultures)
    content.vb: Public Sub New(cultures As IList(Of String))
    parameters:
    - id: cultures
      type: System.Collections.Generic.IList{System.String}
      description: The list of cultures to be used for formatting, text, i.e. language.
  nameWithType.vb: ProviderCultureResult.ProviderCultureResult(IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.Collections.Generic.IList(Of System.String))
  name.vb: ProviderCultureResult(IList(Of String))
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})
  commentId: M:Microsoft.AspNetCore.Localization.ProviderCultureResult.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})
  id: '#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})'
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: ProviderCultureResult(IList<String>, IList<String>)
  nameWithType: ProviderCultureResult.ProviderCultureResult(IList<String>, IList<String>)
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.Collections.Generic.IList<System.String>, System.Collections.Generic.IList<System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: .ctor
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 49
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nCreates a new <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult\" data-throw-if-not-resolved=\"false\"></xref> object has its <xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures\" data-throw-if-not-resolved=\"false\"></xref> properties set to the respective culture values provided.\n"
  example: []
  syntax:
    content: public ProviderCultureResult(IList<string> cultures, IList<string> uiCultures)
    content.vb: Public Sub New(cultures As IList(Of String), uiCultures As IList(Of String))
    parameters:
    - id: cultures
      type: System.Collections.Generic.IList{System.String}
      description: The list of cultures to be used for formatting.
    - id: uiCultures
      type: System.Collections.Generic.IList{System.String}
      description: The list of ui cultures to be used for text, i.e. language.
  nameWithType.vb: ProviderCultureResult.ProviderCultureResult(IList(Of String), IList(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.AspNetCore.Localization.ProviderCultureResult.ProviderCultureResult(System.Collections.Generic.IList(Of System.String), System.Collections.Generic.IList(Of System.String))
  name.vb: ProviderCultureResult(IList(Of String), IList(Of String))
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
  commentId: P:Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
  id: Cultures
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: Cultures
  nameWithType: ProviderCultureResult.Cultures
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: Cultures
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 58
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nGets the list of cultures to be used for formatting.\n"
  example: []
  syntax:
    content: public IList<string> Cultures { get; }
    content.vb: Public ReadOnly Property Cultures As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
  commentId: P:Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
  id: UICultures
  parent: Microsoft.AspNetCore.Localization.ProviderCultureResult
  langs:
  - csharp
  - vb
  name: UICultures
  nameWithType: ProviderCultureResult.UICultures
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
  type: Property
  source:
    remote:
      path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
      branch: master
      repo: https://github.com/aspnet/Localization.git
    id: UICultures
    path: src/Microsoft.AspNetCore.Localization/ProviderCultureResult.cs
    startLine: 63
  assemblies:
  - Microsoft.AspNetCore.Localization
  namespace: Microsoft.AspNetCore.Localization
  summary: "\nGets the list of ui cultures to be used for text, i.e. language;\n"
  example: []
  syntax:
    content: public IList<string> UICultures { get; }
    content.vb: Public ReadOnly Property UICultures As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.AspNetCore.Localization.IRequestCultureProvider
  commentId: T:Microsoft.AspNetCore.Localization.IRequestCultureProvider
  parent: Microsoft.AspNetCore.Localization
  isExternal: false
  name: IRequestCultureProvider
  nameWithType: IRequestCultureProvider
  fullName: Microsoft.AspNetCore.Localization.IRequestCultureProvider
- uid: Microsoft.AspNetCore.Localization
  commentId: N:Microsoft.AspNetCore.Localization
  isExternal: false
  name: Microsoft.AspNetCore.Localization
  nameWithType: Microsoft.AspNetCore.Localization
  fullName: Microsoft.AspNetCore.Localization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult
  commentId: T:Microsoft.AspNetCore.Localization.ProviderCultureResult
  parent: Microsoft.AspNetCore.Localization
  isExternal: false
  name: ProviderCultureResult
  nameWithType: ProviderCultureResult
  fullName: Microsoft.AspNetCore.Localization.ProviderCultureResult
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
  commentId: P:Microsoft.AspNetCore.Localization.ProviderCultureResult.Cultures
- uid: Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
  commentId: P:Microsoft.AspNetCore.Localization.ProviderCultureResult.UICultures
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
